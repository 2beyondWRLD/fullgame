This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
assets/
  backgrounds/
    desolateDesert.png:Zone.Identifier
    fishingLake.png:Zone.Identifier
    Minifantasy_TownsOutdoorMockup3.0.png:Zone.Identifier
    outerGrasslands.png:Zone.Identifier
    rockyTundra.png:Zone.Identifier
  data/
    lootTable.json
    narrativePrologues.json
    narrativeprompt.json
  ezgif-split/
    frame_113_delay-0.1s.png:Zone.Identifier
    frame_114_delay-0.05s.png:Zone.Identifier
    frame_115_delay-0.05s.png:Zone.Identifier
    frame_116_delay-0.1s.png:Zone.Identifier
    frame_117_delay-0.1s.png:Zone.Identifier
    frame_118_delay-0.1s.png:Zone.Identifier
    frame_119_delay-0.05s.png:Zone.Identifier
    frame_120_delay-0.05s.png:Zone.Identifier
    frame_121_delay-0.05s.png:Zone.Identifier
    frame_122_delay-0.15s.png:Zone.Identifier
    frame_123_delay-0.1s.png:Zone.Identifier
    frame_124_delay-0.05s.png:Zone.Identifier
    frame_125_delay-0.05s.png:Zone.Identifier
    frame_126_delay-0.05s.png:Zone.Identifier
    frame_127_delay-0.15s.png:Zone.Identifier
    frame_128_delay-0.1s.png:Zone.Identifier
    frame_129_delay-0.1s.png:Zone.Identifier
    frame_130_delay-0.05s.png:Zone.Identifier
    frame_131_delay-0.15s.png:Zone.Identifier
    frame_132_delay-0.1s.png:Zone.Identifier
    frame_133_delay-0.1s.png:Zone.Identifier
    frame_134_delay-0.05s.png:Zone.Identifier
    frame_135_delay-0.1s.png:Zone.Identifier
    frame_136_delay-0.1s.png:Zone.Identifier
    frame_137_delay-0.05s.png:Zone.Identifier
    frame_138_delay-0.05s.png:Zone.Identifier
    frame_139_delay-0.1s.png:Zone.Identifier
    frame_140_delay-0.1s.png:Zone.Identifier
    frame_141_delay-0.1s.png:Zone.Identifier
    frame_142_delay-0.05s.png:Zone.Identifier
    frame_143_delay-0.05s.png:Zone.Identifier
    frame_144_delay-0.1s.png:Zone.Identifier
    frame_145_delay-0.1s.png:Zone.Identifier
    frame_146_delay-0.1s.png:Zone.Identifier
    frame_147_delay-0.05s.png:Zone.Identifier
    frame_148_delay-0.05s.png:Zone.Identifier
    frame_149_delay-0.05s.png:Zone.Identifier
    frame_150_delay-0.15s.png:Zone.Identifier
    frame_151_delay-0.1s.png:Zone.Identifier
    frame_152_delay-0.1s.png:Zone.Identifier
    frame_153_delay-0.05s.png:Zone.Identifier
    frame_154_delay-0.15s.png:Zone.Identifier
    frame_155_delay-0.1s.png:Zone.Identifier
    frame_156_delay-0.05s.png:Zone.Identifier
    frame_157_delay-0.05s.png:Zone.Identifier
    frame_158_delay-0.05s.png:Zone.Identifier
    frame_159_delay-0.1s.png:Zone.Identifier
    frame_160_delay-0.15s.png:Zone.Identifier
    frame_161_delay-0.05s.png:Zone.Identifier
    frame_162_delay-0.05s.png:Zone.Identifier
    frame_163_delay-0.05s.png:Zone.Identifier
    frame_164_delay-0.1s.png:Zone.Identifier
    frame_165_delay-0.1s.png:Zone.Identifier
    frame_166_delay-0.1s.png:Zone.Identifier
    frame_167_delay-0.05s.png:Zone.Identifier
    frame_168_delay-0.05s.png:Zone.Identifier
    frame_169_delay-0.1s.png:Zone.Identifier
    frame_170_delay-0.1s.png:Zone.Identifier
    frame_171_delay-0.1s.png:Zone.Identifier
    frame_172_delay-0.1s.png:Zone.Identifier
    frame_173_delay-0.1s.png:Zone.Identifier
    frame_174_delay-0.1s.png:Zone.Identifier
    frame_175_delay-0.1s.png:Zone.Identifier
    frame_176_delay-0.1s.png:Zone.Identifier
    frame_177_delay-0.1s.png:Zone.Identifier
    frame_178_delay-0.1s.png:Zone.Identifier
    frame_179_delay-0.1s.png:Zone.Identifier
    frame_180_delay-0.1s.png:Zone.Identifier
    frame_181_delay-0.1s.png:Zone.Identifier
    frame_182_delay-0.1s.png:Zone.Identifier
    frame_183_delay-0.1s.png:Zone.Identifier
    frame_184_delay-0.1s.png:Zone.Identifier
    frame_185_delay-0.1s.png:Zone.Identifier
    frame_186_delay-0.1s.png:Zone.Identifier
    frame_187_delay-0.1s.png:Zone.Identifier
    frame_188_delay-0.1s.png:Zone.Identifier
    frame_189_delay-0.1s.png:Zone.Identifier
    frame_190_delay-0.1s.png:Zone.Identifier
    frame_191_delay-0.05s.png:Zone.Identifier
    frame_192_delay-0.05s.png:Zone.Identifier
    frame_193_delay-0.1s.png:Zone.Identifier
    frame_194_delay-0.1s.png:Zone.Identifier
    frame_195_delay-0.1s.png:Zone.Identifier
    frame_196_delay-0.05s.png:Zone.Identifier
    frame_197_delay-0.05s.png:Zone.Identifier
    frame_198_delay-0.05s.png:Zone.Identifier
    frame_199_delay-0.15s.png:Zone.Identifier
    frame_200_delay-0.1s.png:Zone.Identifier
    frame_201_delay-0.05s.png:Zone.Identifier
    frame_202_delay-0.05s.png:Zone.Identifier
    frame_203_delay-0.05s.png:Zone.Identifier
    frame_204_delay-0.15s.png:Zone.Identifier
    frame_205_delay-0.1s.png:Zone.Identifier
    frame_206_delay-0.05s.png:Zone.Identifier
    frame_207_delay-0.05s.png:Zone.Identifier
    frame_208_delay-0.05s.png:Zone.Identifier
    frame_209_delay-0.15s.png:Zone.Identifier
    frame_210_delay-0.1s.png:Zone.Identifier
    frame_211_delay-0.1s.png:Zone.Identifier
    frame_212_delay-0.1s.png:Zone.Identifier
    frame_213_delay-0.1s.png:Zone.Identifier
    frame_214_delay-0.1s.png:Zone.Identifier
    frame_215_delay-0.05s.png:Zone.Identifier
    frame_216_delay-0.05s.png:Zone.Identifier
    frame_217_delay-0.1s.png:Zone.Identifier
    frame_218_delay-0.1s.png:Zone.Identifier
    frame_219_delay-0.1s.png:Zone.Identifier
    frame_220_delay-0.05s.png:Zone.Identifier
    frame_221_delay-0.05s.png:Zone.Identifier
    frame_222_delay-0.1s.png:Zone.Identifier
    frame_223_delay-0.1s.png:Zone.Identifier
    frame_224_delay-0.1s.png:Zone.Identifier
    frame_225_delay-0.05s.png:Zone.Identifier
    frame_226_delay-0.05s.png:Zone.Identifier
    frame_227_delay-0.05s.png:Zone.Identifier
    frame_228_delay-0.15s.png:Zone.Identifier
    frame_229_delay-0.1s.png:Zone.Identifier
    frame_230_delay-0.05s.png:Zone.Identifier
    frame_231_delay-0.05s.png:Zone.Identifier
    frame_232_delay-0.05s.png:Zone.Identifier
    frame_233_delay-0.15s.png:Zone.Identifier
    frame_234_delay-0.1s.png:Zone.Identifier
    frame_235_delay-0.05s.png:Zone.Identifier
    frame_236_delay-0.05s.png:Zone.Identifier
    frame_237_delay-0.05s.png:Zone.Identifier
    frame_238_delay-0.1s.png:Zone.Identifier
    frame_239_delay-0.1s.png:Zone.Identifier
    frame_240_delay-0.1s.png:Zone.Identifier
    frame_241_delay-0.05s.png:Zone.Identifier
    frame_242_delay-0.05s.png:Zone.Identifier
  foregrounds/
    aridDesertForeground.png:Zone.Identifier
    desolateDesertforeground.png:Zone.Identifier
    shadyGroveforeground.png:Zone.Identifier
  images/
    bobber.png:Zone.Identifier
    campfire-sheet.png:Zone.Identifier
    FishingRod2.webp:Zone.Identifier
    floss-idle-with-sail-blue.png:Zone.Identifier
    floss-move-with-sail-blue.png:Zone.Identifier
    forestNight.png:Zone.Identifier
    menu.png:Zone.Identifier
    menugif.gif:Zone.Identifier
    Ns5nCS.png:Zone.Identifier
    skillet.png:Zone.Identifier
    tent.png:Zone.Identifier
  maps/
    aridDesert.json
    aridDesert.json:Zone.Identifier
    campsite.json
    fishing_lake.json
    outerGrasslands.json
    outerGrasslands.json:Zone.Identifier
    shadyGrove.json
    shadyGrove.json:Zone.Identifier
    villageCommons.tmj
    villageCommonsMap.json
  menu/
    frame_000_delay-0.05s.png:Zone.Identifier
    frame_001_delay-0.1s.png:Zone.Identifier
    frame_002_delay-0.1s.png:Zone.Identifier
    frame_003_delay-0.1s.png:Zone.Identifier
    frame_004_delay-0.1s.png:Zone.Identifier
    frame_005_delay-0.1s.png:Zone.Identifier
    frame_006_delay-0.1s.png:Zone.Identifier
    frame_007_delay-0.1s.png:Zone.Identifier
    frame_008_delay-0.1s.png:Zone.Identifier
    frame_009_delay-0.1s.png:Zone.Identifier
    frame_010_delay-0.1s.png:Zone.Identifier
    frame_011_delay-0.1s.png:Zone.Identifier
    frame_012_delay-0.1s.png:Zone.Identifier
    frame_013_delay-0.1s.png:Zone.Identifier
    frame_014_delay-0.1s.png:Zone.Identifier
    frame_015_delay-0.1s.png:Zone.Identifier
    frame_016_delay-0.1s.png:Zone.Identifier
    frame_017_delay-0.1s.png:Zone.Identifier
    frame_018_delay-0.1s.png:Zone.Identifier
    frame_019_delay-0.1s.png:Zone.Identifier
    frame_020_delay-0.1s.png:Zone.Identifier
    frame_021_delay-0.1s.png:Zone.Identifier
    frame_022_delay-0.1s.png:Zone.Identifier
    frame_023_delay-0.1s.png:Zone.Identifier
    frame_024_delay-0.1s.png:Zone.Identifier
    frame_025_delay-0.1s.png:Zone.Identifier
    frame_026_delay-0.1s.png:Zone.Identifier
    frame_027_delay-0.1s.png:Zone.Identifier
    frame_028_delay-0.1s.png:Zone.Identifier
    frame_029_delay-0.1s.png:Zone.Identifier
    frame_030_delay-0.05s.png:Zone.Identifier
    frame_031_delay-0.05s.png:Zone.Identifier
    frame_032_delay-0.1s.png:Zone.Identifier
    frame_033_delay-0.1s.png:Zone.Identifier
    frame_034_delay-0.1s.png:Zone.Identifier
    frame_035_delay-0.05s.png:Zone.Identifier
    frame_036_delay-0.05s.png:Zone.Identifier
    frame_037_delay-0.1s.png:Zone.Identifier
    frame_038_delay-0.1s.png:Zone.Identifier
    frame_039_delay-0.1s.png:Zone.Identifier
    frame_040_delay-0.05s.png:Zone.Identifier
    frame_041_delay-0.05s.png:Zone.Identifier
    frame_042_delay-0.1s.png:Zone.Identifier
    frame_043_delay-0.1s.png:Zone.Identifier
    frame_044_delay-0.1s.png:Zone.Identifier
    frame_045_delay-0.05s.png:Zone.Identifier
    frame_046_delay-0.05s.png:Zone.Identifier
    frame_047_delay-0.05s.png:Zone.Identifier
    frame_048_delay-0.1s.png:Zone.Identifier
    frame_049_delay-0.15s.png:Zone.Identifier
    frame_050_delay-0.05s.png:Zone.Identifier
    frame_051_delay-0.05s.png:Zone.Identifier
    frame_052_delay-0.05s.png:Zone.Identifier
    frame_053_delay-0.15s.png:Zone.Identifier
    frame_054_delay-0.1s.png:Zone.Identifier
    frame_055_delay-0.1s.png:Zone.Identifier
    frame_056_delay-0.1s.png:Zone.Identifier
    frame_057_delay-0.1s.png:Zone.Identifier
    frame_058_delay-0.1s.png:Zone.Identifier
    frame_059_delay-0.05s.png:Zone.Identifier
    frame_060_delay-0.05s.png:Zone.Identifier
    frame_061_delay-0.1s.png:Zone.Identifier
    frame_062_delay-0.1s.png:Zone.Identifier
    frame_063_delay-0.1s.png:Zone.Identifier
    frame_064_delay-0.05s.png:Zone.Identifier
    frame_065_delay-0.05s.png:Zone.Identifier
    frame_066_delay-0.1s.png:Zone.Identifier
    frame_067_delay-0.1s.png:Zone.Identifier
    frame_068_delay-0.1s.png:Zone.Identifier
    frame_069_delay-0.05s.png:Zone.Identifier
    frame_070_delay-0.05s.png:Zone.Identifier
    frame_071_delay-0.1s.png:Zone.Identifier
    frame_072_delay-0.1s.png:Zone.Identifier
    frame_073_delay-0.1s.png:Zone.Identifier
    frame_074_delay-0.05s.png:Zone.Identifier
    frame_075_delay-0.05s.png:Zone.Identifier
    frame_076_delay-0.05s.png:Zone.Identifier
    frame_077_delay-0.1s.png:Zone.Identifier
    frame_078_delay-0.15s.png:Zone.Identifier
    frame_079_delay-0.05s.png:Zone.Identifier
    frame_080_delay-0.05s.png:Zone.Identifier
    frame_081_delay-0.05s.png:Zone.Identifier
    frame_082_delay-0.1s.png:Zone.Identifier
    frame_083_delay-0.1s.png:Zone.Identifier
    frame_084_delay-0.1s.png:Zone.Identifier
    frame_085_delay-0.05s.png:Zone.Identifier
    frame_086_delay-0.05s.png:Zone.Identifier
    frame_087_delay-0.1s.png:Zone.Identifier
    frame_088_delay-0.1s.png:Zone.Identifier
    frame_089_delay-0.1s.png:Zone.Identifier
    frame_090_delay-0.1s.png:Zone.Identifier
    frame_091_delay-0.1s.png:Zone.Identifier
    frame_092_delay-0.1s.png:Zone.Identifier
    frame_093_delay-0.1s.png:Zone.Identifier
    frame_094_delay-0.1s.png:Zone.Identifier
    frame_095_delay-0.1s.png:Zone.Identifier
    frame_096_delay-0.1s.png:Zone.Identifier
    frame_097_delay-0.1s.png:Zone.Identifier
    frame_098_delay-0.1s.png:Zone.Identifier
    frame_099_delay-0.1s.png:Zone.Identifier
    frame_100_delay-0.1s.png:Zone.Identifier
    frame_101_delay-0.1s.png:Zone.Identifier
    frame_102_delay-0.1s.png:Zone.Identifier
    frame_103_delay-0.1s.png:Zone.Identifier
    frame_104_delay-0.1s.png:Zone.Identifier
    frame_105_delay-0.1s.png:Zone.Identifier
    frame_106_delay-0.1s.png:Zone.Identifier
    frame_107_delay-0.1s.png:Zone.Identifier
    frame_108_delay-0.1s.png:Zone.Identifier
    frame_109_delay-0.05s.png:Zone.Identifier
    frame_110_delay-0.05s.png:Zone.Identifier
    frame_111_delay-0.1s.png:Zone.Identifier
    frame_112_delay-0.1s.png:Zone.Identifier
  sprites/
    crate.png:Zone.Identifier
    exclamation.png:Zone.Identifier
    Hickory_Attack.png:Zone.Identifier
    Hickory_Die.png:Zone.Identifier
    Hickory_Dmg.png:Zone.Identifier
    Hickory_Idle.png:Zone.Identifier
    Hickory_Walk.png:Zone.Identifier
    player.png:Zone.Identifier
  tilesets/
    outer_grasslands_tiles.png.tsx
scripts/
  blockchain.js
  constants.js
  contractCalls.js
  MainScene.js
  uiModules.js
  utils.js
  VillageCommons.js
campingScene.js
fishingScene.js
index.html
main.js
MenuScene.js
scavengerMode.js
villageCommons.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="assets/backgrounds/desolateDesert.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://mail.google.com/
HostUrl=https://mail-attachment.googleusercontent.com/attachment/u/0/?ui=2&ik=fb8c278282&attid=0.1&permmsgid=msg-a:r7209828176997297483&th=194bee30698bbe38&view=att&disp=safe&realattid=f_m6lg6jrq0&zw&saddbat=ANGjdJ-994qwpVz-4Bx48QyHFi_GhF8RjScJW3UfTsaOZiSy8XWCI5KrchKCg8RIkr5eSorTeZQpxbVQsFWSyhH6aKHI_kTviITay-2t6D4BJ51YqJrlS7kYhv_d3W1qt5eZhaRmKQkGDztuf8e9LT1ihmIVcdsYPd0NhjBRpJWx4Rep5H68VtIgu1Bc0ogppniKct6WXmwPuCvDLtBHYaSetxt9mik-CCljrWTGlqrzgGjcMReCG5nNaL0KamLann_Vfv5yk1HzU9RrHlFUCm_7E-56IZe-AygB1xr0RnSMJuRFPf5GyzMscounKacbX70WZAO92GX4_YikZZ1GcshV3CfJcmRgFqAjdpSZp0HPYospZOaTyIe2kHDgkCe-HEe_VHXVXfzGAZ3vPw-y2MbTOil92I3eT83mkf4FT4a5d-1GdwwJxq9_9iB3HSA7xXT5LIe7oxktc8O1PDO0MgrLvQh64mobyH00sxfaQqsJS7ie-STURWjm40V4aRCfw1qDlZUb5sbc55JQ6jWHaAQOQTniaiqv4ePuDFf7yl7XLW8-MkYRIXgVdXwvSy3h46pRFoM0K0V_9cU879gEBdwXJVcAAFN2TaO0jId-z6oH6e0erSI8QI5kZju_CP8i9AC_3uSQ-aUnB-mBPou1SHt9sm3SAIOd0Pmgph2reqXai0qYghNCEJPueL51HevP1SsHTMVfPj-nbfNsfSE3lA6m094eu4JV7ZndROcD36G97CjvcL_7rBfVF0Urj_vgq4TLP3tNuegBqiaRtTMu3M8RetpibhOvswnqC_QSiBsRvO-05xKXNWPYPBd6MWEEIFZq93NkeVcADElGlk3q2FBvjDZAMTXVdT8yqiDb9gQ58MkxzjvdSZy4ifOfA8selu51-00dHerMhRC6e-Y4ZmWn8fIASPHO6Wr4zJOflIpuETjpugE5CIY4ia9C82zSn6JWR3JS1m8dBU8btog1oeF94LdJXNB1POZ8ORAX5-TYan5deMzXxsdLbNfY_KU
</file>

<file path="assets/backgrounds/fishingLake.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://pixlr.com/editor/#myhistory
HostUrl=https://pixlr.com/editor/#myhistory
</file>

<file path="assets/backgrounds/Minifantasy_TownsOutdoorMockup3.0.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\Minifantasy_Towns_v3.0 (1).zip
</file>

<file path="assets/backgrounds/outerGrasslands.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://mail.google.com/
HostUrl=https://mail-attachment.googleusercontent.com/attachment/u/0/?ui=2&ik=fb8c278282&attid=0.2&permmsgid=msg-a:r7209828176997297483&th=194bee30698bbe38&view=att&disp=safe&realattid=f_m6lg6jsb1&zw&saddbat=ANGjdJ94xWgnEDwgxAZnQtL2ZPY3c_NvOTplmdS0DNYv08HkunTmfiDmUW7tVbvp-Z4yAjoICejvKlNeyRkgKzsbtIdoGd8u4h2caVXr3i2EEsSFI66T5tfGqCYfNXVIKYibAE2M7OBF21rt8tUqO5JSM20GYSU8R6iU87zXGNWdGbKgRP58xqRdPIFHIrFb-NayX1ZpNUbR9R4xXTGr3Umnk_iXp3TL6ir0wTcgeDvRYHuvEOSFyJ6St9agAAQdnTzJt8GzjAUJFSVU0BZfZAtHy5wWdbyGrZwZcslcFZAJTOcvcMsVBQqt_9VSRKEfaiHm206s3VnUKpobRRotajbR1Tv6qfMT6LNhxvEwh63qdOzyo2DDbNCsphuVaReZ4gDxoYvGnPkJ6gf_GWzYuvdfZrasfAoxg1FqPjs1oIj9LW9Oz93E8tAoaw8B3BYwmS19Ick4Od23ZxftyrgkFIKvQEZAlXNgJDz8LANkv7yqi_xk93Q5akku-RH5ts_oh2O8V7UkrvXAXcmNwAkh3L9Bic7n0ztoQhuOxutqM-yYstilfJyZMxngauPX--mIDn5cf_bOvtvwdDjPpIKccYDgGlfXMxshy-UAC4AQ4C4BSiqqNw1PciCme2JNK2qLsLwOe_2MFwfoWHImjCTTV_VRvkBUOD-0CwS5x6vGknD-RIYEqYwwVZ2SBHJMi-7WQlDslGzkg1yASTEhrQlfXQp5JnbuCG7mL-QX66ZJsniKG-v02NW6885ECKpNHZmXMZrmRtO9XorE2uOnl68WyownhNCQPO7dpuJ6EyHTzxgXo81qbEXCeiDw22vPAJbrK2SLgJPSR_H3rAVRyVcLGT6-OrE4bUc4ReOgRlE_u97Z1rRwg8ZciAgiX98IBPCJvTzjSIB_svYhMZzOTBKx7SoAxcBj8UZb_47F1pCVYItm4Zpd92BNn6nrNXo2bltccI9H4PW6vr7j3QPGFMClFnrP0mZ712A6Ek2VxvVHW9GZFBVSoljkJ-xGGnQzGBY
</file>

<file path="assets/backgrounds/rockyTundra.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://mail.google.com/
HostUrl=https://mail-attachment.googleusercontent.com/attachment/u/0/?ui=2&ik=fb8c278282&attid=0.3&permmsgid=msg-a:r7209828176997297483&th=194bee30698bbe38&view=att&disp=safe&realattid=f_m6lg6jsi2&zw&saddbat=ANGjdJ_M201g4kgWkg1hBl0PyorzFGsY7NvEovky6KJ5ik8JCCpd9crmGkBs-SKB1POswmI3jDRSpoEg-s_sQkJLT-AM01uRkw0A2FPUE3_4blf-EzxUSFK7rtsdjr0h1fr3SoiUKaWIAOtQnzD9uJR9bEU81uT_GI9RQihTPw7OT6ii0I66tmw-UzKvwWIMFW_afYt5sagY6iToxTk4W8fdfLVo_3Y7AeE0TGabw_YqCI8HHzS7hJo9XAAHhuSolwgP7QXe-TqbD2xVmAN-hJdF-PN18PSX_j4mwjJQJG1M4vg7hucfh09FWKc_ROJQneaKsxpxjqlBXim6_qcD_fRU4Jd_u4gHM2MgVV1cat1GBJxJm4E9gq40uijxJY8z_vzd63NKNH6WgHnKLwfR0L4Y0xSM2kDk2lLy7eBIWs341GMEimShIMRZ6pQaoX_x9QhtTTbZ0p1iwiwYfb6FUfylhEYPbxaEnwV9htJGTNU4AQffg1SV72l7v-OFijUg0RX8BYB3o6WA-oaG2N95WXLNDAGK2IQgBwh5shnsNAWr6zxWOKoZ72uBSnePyRfyu7Q9JHS7O8lt_X6pfuSMmV5yTgzK1SAiPlWaq-oFFsZ_PtJ132Einwrp01c9BzlU-aJgeFDKprPe40UT4RVzIpaV9F0GSnFJi-ipd4qPu8lmrIvUkz7RZuSERADqNb35w1SETiOtEWsHADoOJd03LoBQlEFEFGYiFqD6W7Sk9ytJ8jo8V0g-4gfJ-DFfxaQSRBTtHk0mqrEAvpOgLql3FkFQPPZl5I5URPWiYpQ7qY0OXdMPyiX_iUniL5TL9rO1nOumBU4MXnOtSNe34pDPJF3-U3tUyM-uG9cMoQqF6d8Z96YiZtjcSMb2TOweAJtgyjWlG10lN0ynNoUsqnyd5eK2gMLKTungijSanhRLWzHbs0Bohuoakdypoc2w-v9BijAHpaW-KyOT5z28MEzJM8wzXuFVzX7_-1oYSjutmvEEC4_OOl9dlWo4-rzdTXA
</file>

<file path="assets/data/narrativePrologues.json">
{
  "Outer Grasslands": [
    "A warm breeze sweeps across the tall grass, carrying the faint scent of wildflowers. In the distance, rolling hills shimmer under the golden sunlight.",
    "Stalks of grass sway like ocean waves, while a chorus of hidden insects hums in the background. The horizon stretches infinitely beneath a wide blue sky.",
    "Early morning dew sparkles on each blade, reflecting the soft hues of dawn. You feel a quiet promise in the air, calling you toward adventure.",
    "A gentle wind teases the grassy plains, stirring whispers of life unseen. The sweet smell of wild blossoms mingles with the warmth of the rising sun.",
    "Cool twilight air settles over the expansive fields, crickets tuning their nightly symphony. Shadows lengthen over the land, hinting at secrets just beyond sight."
  ],

  "Shady Grove": [
    "Sun-dappled leaves arch overhead, forming a cathedral of emerald light. The gentle rustle of branches invites you deeper into nature’s hush.",
    "A soft carpet of moss cushions your steps, releasing an earthy fragrance. Rays of golden light slip through the canopy, dancing on the forest floor.",
    "The grove’s silence feels reverent, broken only by distant birdsong. Each breath carries the scent of damp wood and lush greenery.",
    "Towering trees twist like ancient guardians, their bark etched with mysteries. The air is cool and tinged with the perfume of flowering vines.",
    "A meandering breeze rustles the foliage, sending a ripple of shadows across the ground. Hints of pine and sweet decay drift through the shaded undergrowth."
  ],

  "Arid Desert": [
    "Heat waves ripple across endless dunes, bending the horizon in a mirage of shimmering light. Every breath tastes of sun-baked sand.",
    "A lone cactus stands sentinel in the searing sun, defying the vast expanse of shifting sands. Dusty wind carries the faint aroma of scorched earth.",
    "The world narrows to heat and light, the sky a blazing blue over rippling dunes. Footprints vanish almost as soon as they’re made.",
    "Cracked earth crunches beneath each step, echoing in the silent desert. The scorching sun reveals only a barren beauty stretching in every direction.",
    "Wind carves subtle ripples into the dunes, leaving delicate patterns in the blazing sand. You wonder what secrets lie beneath this scorching realm."
  ],

  "Rocky Savanna": [
    "Scattered boulders punctuate the golden grasslands, standing guard under the open sky. Warm gusts carry the distant calls of roaming animals.",
    "Low, gnarled trees offer sparse shade in this sunlit realm. The tall grass brushes against your legs, whispering of hidden paths.",
    "Gentle hills roll into the distance, dotted with rugged rock formations. In the breeze, the savanna breathes with a slow, steady rhythm of life.",
    "Sunbaked stones glow with midday heat, while hardy shrubs cling to their crevices. A subtle tension hums in the warm air, hinting at life’s daily struggles.",
    "Even under the bright sun, the savanna feels alive with possibility. Faint rustles in the grass betray unseen creatures moving along ancient trails."
  ],

  "Lush Waterfall": [
    "Mist beads on your skin as a chorus of rushing water greets your ears. Tall ferns crowd around the pool, their leaves dripping with crystal droplets.",
    "Sunbeams fracture through the tumbling cascade, painting rainbows on mossy stones. The moist air carries a hint of wildflowers and clean mineral springs.",
    "The roar of the waterfall vibrates through your chest, a steady heartbeat in the deep greenery. Everything shimmers beneath a veil of gentle spray.",
    "Foamy water cascades over smooth rocks, filling the air with a constant, soothing thunder. In the distance, birds sing above the lush canopy.",
    "A humid breeze stirs the leaves, mingling fresh mist with the earthy smell of wet soil. Drops of water glisten on every surface, reflecting nature’s hidden wonders."
  ],

  "Marshy Riverbanks": [
    "Your boots sink gently into the sodden ground, releasing a rich scent of mud and reeds. Frogs croak in the reeds as water lazily trickles by.",
    "Dragonflies dart across the murky water, their wings flashing in stray sunlight. The marsh hums with unseen creatures stirring in the soft mud.",
    "The river flows slowly, carrying fragments of leaves on its languid journey. A mild, humid air clings to your skin, hinting at hidden secrets in the reeds.",
    "Cattails sway in the breeze, while ripples lap against the muddy banks. The dense smell of marshy vegetation saturates each breath.",
    "A symphony of croaks and chirps envelops you, an ode to the swamp’s abundant life. You sense unseen eyes peering from the still, brackish water."
  ],

  "Active Volcano": [
    "Intense heat radiates from the blackened ground, the faint tang of sulfur stinging the air. Far above, a plume of smoke crowns the volcanic peak.",
    "Rivulets of magma glow in the distance, tracing molten paths down the scorched slopes. The surrounding rocks shimmer with waves of rising heat.",
    "Your skin prickles under the mountain’s restless tremors, each hiss of steam a reminder of untamed power beneath your feet.",
    "Acrid smoke mixes with the sharp scent of molten rock, painting the sky in hazy reds. Every gust of wind carries sparks that dance against the darkened earth.",
    "Cracks in the uneven terrain reveal a glowing heart of embers. A heavy silence breaks only for the volcano’s deep, volatile rumble."
  ],

  "Frozen Peaks": [
    "Snow-capped mountains tower above, their ridges cloaked in drifting clouds. Each breath turns to mist in the biting cold air.",
    "A crisp wind sweeps across the frosty landscape, carrying a subtle hush of falling snow. Icy crystals glitter like diamonds in the pale sunlight.",
    "Loose snow crunches beneath your feet, the only sound in a silent white world. The air smells clean and sharp, refreshing yet unforgiving.",
    "Jagged peaks pierce a steel-gray sky, their slopes veiled by swirling flakes. A solemn beauty reigns here, untouched and serene.",
    "The breathless hush of the high mountains holds a quiet awe. Frost clings to every surface, turning the world into a realm of sparkling ice."
  ],

  "Forbidden Temple": [
    "Massive stone pillars loom from the gloom, covered in creeping vines. A faint, ancient hush lingers, as if time itself treads lightly here.",
    "Carvings of forgotten deities stare silently from the walls, their stories etched into mossy stone. A subtle echo of chanting drifts from hidden corridors.",
    "Dim torchlight flickers across the temple’s entrance, revealing alien symbols half-buried in dust. The stale air reeks of old secrets and lost rites.",
    "Broken statues stand guard amid crumbling archways, their eyes blind but ever watchful. A chill runs through you, like a whispered warning.",
    "The temple’s gates yawn open, unveiling a labyrinth of shadowed halls. A faint incense smell mingles with damp stone, conjuring images of past rituals."
  ],

  "Gold Ruins": [
    "Pillars of gleaming gold catch the sun, illuminating a once-majestic hall. Dust motes swirl in the light, hinting at forgotten riches within.",
    "Walls plated with faded gold stretch before you, their ornate carvings worn by time. Each footstep echoes with the promise of hidden treasure.",
    "Vines creep through gilded cracks, blending nature’s touch with the ruins’ opulent past. A strange hush surrounds these silent, sunlit chambers.",
    "Broken statues and glimmering metal fragments lie half-buried in rubble. The air tastes faintly metallic, as though laden with centuries-old envy.",
    "A soft, golden glow shimmers in every corner, lending the ruins an otherworldly aura. Footsteps on the dusty floor ring like distant chimes."
  ]
}
</file>

<file path="assets/ezgif-split/frame_113_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_114_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_115_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_116_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_117_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_118_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_119_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_120_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_121_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_122_delay-0.15s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_123_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_124_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_125_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_126_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_127_delay-0.15s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_128_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_129_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_130_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_131_delay-0.15s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_132_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_133_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_134_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_135_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_136_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_137_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_138_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_139_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_140_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_141_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_142_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_143_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_144_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_145_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_146_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_147_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_148_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_149_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_150_delay-0.15s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_151_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_152_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_153_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_154_delay-0.15s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_155_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_156_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_157_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_158_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_159_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_160_delay-0.15s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_161_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_162_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_163_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_164_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_165_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_166_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_167_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_168_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_169_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_170_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_171_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_172_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_173_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_174_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_175_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_176_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_177_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_178_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_179_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_180_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_181_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_182_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_183_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_184_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_185_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_186_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_187_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_188_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_189_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_190_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_191_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_192_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_193_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_194_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_195_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_196_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_197_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_198_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_199_delay-0.15s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_200_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_201_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_202_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_203_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_204_delay-0.15s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_205_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_206_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_207_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_208_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_209_delay-0.15s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_210_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_211_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_212_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_213_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_214_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_215_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_216_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_217_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_218_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_219_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_220_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_221_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_222_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_223_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_224_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_225_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_226_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_227_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_228_delay-0.15s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_229_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_230_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_231_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_232_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_233_delay-0.15s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_234_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_235_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_236_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_237_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_238_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_239_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_240_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_241_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/ezgif-split/frame_242_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/foregrounds/aridDesertForeground.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://mail.google.com/
HostUrl=https://mail-attachment.googleusercontent.com/attachment/u/0/?ui=2&ik=fb8c278282&attid=0.1&permmsgid=msg-a:r7381500929215737404&th=194e2cd0f317dc58&view=att&disp=safe&realattid=f_m6vev2nq0&zw&saddbat=ANGjdJ9yQxpIqfDed1ftBBbGcxb1NKga-B4SRWcqUMnpj8V9E4kbVNieXk97CFJVvXrskA1d5qssctIhHjT_5C-4X0pBmL9gCKP7ekDDJlp4WfocFulnG-kP29M-lmQUwGlYASnuhTIm4WdaPPVGm7GEh2i9kCpi--01bjcGXVKt26A3nlSJUZHlZkaSTGuT3ysRhmrl-yf43vF2MFykKGoDqtL2yJWICH4R3hWVDqw07jdjUPFv0luOCNebccGQ_4YknAX-7qU5Y5mohHYoOf_npLNPQ0KsW3K8sIfGh8WnbTmlXEm39m_WeGjO6bVxm11j2UsLuDUgZW4pnXyJwIo8AYcPod_ut4O0nrNiP_UWgyawhuoj2vkLYNYbi5Fq-WMYGpBM-QzxtDkmIcmji0Cq4_CHjYZujuJTdIY2tM27lvnsk7DoIo7hGqtcvdsgcS7AMBsUDmn1u05yIwmO9zGbgAQ0oAnRWPDdwcw9hFjl1gll_N3RZ_NlCEyEimSKa1zrelapOJj6AFu878d6G_nSrFcbEB-HkzJPcLSokE-OK6IC7bkZqNZnXd4NlvX1BnXkbzdYOH2mvZM4RMxD_nXhms-DGRfUxtBjyfueHLbQdf0NW6q5Cb6BoG4sQHhSoXEVwDvQqK0VtvptIk00rvNgOeiV99Hm2RVUo9owHOaikeYDZc_PJtrwMaU0EJwhCsXYgk3w1_suzYuL61Yrr-q-f33NIDc0lbdLtE0usCq7cdV3J3tLCJQ8MUkaXdz4RLhua3bah_9EFnqu5-kb0Br_K-nTQf16dmeQQFa2h55vJJVG71RaCRCVlKiJayVmkYjLP2IrtivyGewhY_6MmEAQRX_tRE3RDVMkgEUawkbrZdzRf1mWtkstTiIAjtiBxT-1SkBj1uLVsDAk-zALK2pZTuymkvCi9KvyWtXR9bS0kAFFovrx9RQ6YtkpxqYu-G5z1ywiu9njeG0iFNCGYbB8UTWQZvrcup_tRquWdSXlWCpMs9NXItD_vn8OFv6sAuUpOIWkpPJ9HCK9KwNB_ioPHcWKnZ4Kni-tFiP_vw
</file>

<file path="assets/foregrounds/desolateDesertforeground.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://mail.google.com/
HostUrl=https://mail-attachment.googleusercontent.com/attachment/u/0/?ui=2&ik=fb8c278282&attid=0.1&permmsgid=msg-a:r8874730972816536223&th=194bee48b6b61eb1&view=att&disp=safe&realattid=f_m6lg9y0q0&zw&saddbat=ANGjdJ-G0Fq6Bqjp7ovNsToilyQYN315ZR12N4gMFzjJY77utwpapKfFMkwI9RSpcGgfDvXQdLR9FzPhIYP7jYbhem0bHdWKfyDHXDZPkYXQ4iAoKq1YIZCTcw8wdmJf0csR9sH_YuQke6lPJ-F65Bw95cG3Q8IfnAqnuJHLdU85sbCkipjgDFmR_8QdC4DcZYHJTKAyYCh3o1ZjkVXadlR9xNO8jVBcFf6TB15SdWUY7o4Xw2PfxEjwEz9SQFhCQCATiS4mikdKzJRPGGSar9974IjKF_zuH3_Fqz4kd45bxUFYWaERZji8Y8okHX3-HttqRUNNf5IDMTaGIdljercP15KVAqGAJAehuhtWhjm_XgC3pEgAHUNGmdRTf66p9_qL6kfeYp6y1zUNoU03iSTRfOa4OaEyA2Q8c4QkvKn9Z03T1WgNchBlES2QY3s9uF1T9o9rPGY93_8AQPkcqqjKyFX69VgMdk5VmwiKiTPUW5FQYQeULCBGmM1VQ3Tr9z8op3wopaLRPA_poT5TeLNLQeylJaQpwFByXR91HBHlUcHgdB806M7OM6U4mTu-yPCK17ULttonRpzvex5m9d_n6_-er_mCZYcRdVz559oyIhQElO1IDGThprQpu3ImDPZIacEh39WT_lHltkX_QpJ4m-oCc0Chi1dIbIZmWKBrtzSm_DjkwMcEXUxbatuo7JvXRKGLUFZ0KP7bvd7eGrBzwawEzaRV5G1-6EXLd5Rmfl40pGbW1-uB1mg6hd1SzXRzoRkYdOtmEn6b7UJODxGpAsFl_jZdDzQVcAdk7cThhK4SrMFsEVCHaSyD4i0cxjjt0XfCrepmngUWRO33epDAR1xt0TFFoNRQrnsF5K6NmBzxNLWwHsnrx7jGmMN0qOQnJe6SyFuaTFBAHSQQJFiTM-RO0bFlTwNGDhMLA_UBaIBLxBjdlIAugcJFPQKSRlvBpVfV7q-s2MBX3I5zEm8rZFkP2xP7TGW4X8_PMtUME2adE2jYiEbRx2sKz2k
</file>

<file path="assets/foregrounds/shadyGroveforeground.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://mail.google.com/
HostUrl=https://mail-attachment.googleusercontent.com/attachment/u/0/?ui=2&ik=fb8c278282&attid=0.2&permmsgid=msg-a:r8874730972816536223&th=194bee48b6b61eb1&view=att&disp=safe&realattid=f_m6lg9y0v1&zw&saddbat=ANGjdJ8aS_-YiO6_pVT2VO2VzBFiGOih4oaz8zPKNuG-gzWCuFTgIaNlDAG6Y9MmcTofk0A74NvEGe03JV3T-rVrOKWzSlCjVwtK2M2Rz_65z6motj0Dy5mTFJHfdWpZPhXuEh_p66QStgMG_0MGdRL5FgSDmkZvucoiYfTHWMAVdhOSATzOep2RKezKYJtl68NQq4lg-X4VIcasIV6m7FCTrBTayniuBzezrEQJCkKXukD77b9IW-RL5MCjpfNcrDA-HlcN3TxUypXzOpm6bsoXtlbGUuwv8xdb4hbDMPQ9iPR0IYr-VKlMfBtQbzNP1x-CalKAIf4Ue2fZz2LyH8hLg2FoR8RReXmuaZCJrWxrusUEpVd4I7jPQIKkiAm5n1EIzpr5PE2HgPyvcHxCWsprXq3ANToduS01BqX_JtrAt3a9XD16GVZT1-vISBaVHSqsIkYC1JkP3EGou-5p9xGUbWOl9nL_7fIX6ohGbp8vtwu3FmJMkdzgvdK26yyeUG5RI7Gss4x61_0fv7fMvOeTB-u17C5okCnc6Tww1g7rRg0g1p6n6E0MVBLAiVheYD2_XWv5TQSrVbcI0KAisNoqEm4nelK19-Pidsvp3fs0atA_qWSOr60J1YI9YU6feqNosSUS7cm2PCvoN58Oh2s6RyHDWYSsXM15fmEO5Cl4ZskUz3ceq9aoXvE56KOpcX9oM9tPg7l2jTXjhfBW4OKVNWvq6gZkRZB6JrSliUHRCKhSYXw8ZdgkBNki6f4OU0y29nv6KlcjTliHF5Piv9p_2wKFpH1ozWRGPZOGa4M564ZHTc9od6B7qisqcA9caMqCcx7gqboyVm7BahcJPOZxZolyNtjE7-_oYXrdWFs6t_ZGHEzCNR1MmcDY3NLmFMOXJj1aEegQ3X6fhCPVYmPr3bmKYrZmMrIFzITJYuusM_JMgMI5z6lMuqVTclydFKB4Ky53PeYqH3DYpf2fIlmwqoo9gvyehMl7Yi-lOEnUel40vGWRBVGBL5VLMVk
</file>

<file path="assets/images/bobber.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://pixlr.com/editor/
HostUrl=https://pixlr.com/editor/
</file>

<file path="assets/images/campfire-sheet.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://nogardev.itch.io/campfire-pixel-art-free-asset?download
HostUrl=https://itchio-mirror.cb031a832f44726753d6267436f3b414.r2.cloudflarestorage.com/upload2/game/2955074/11407157?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=3edfcce40115d057d0b5606758e7e9ee%2F20250309%2Fauto%2Fs3%2Faws4_request&X-Amz-Date=20250309T031420Z&X-Amz-Expires=60&X-Amz-SignedHeaders=host&X-Amz-Signature=b4b7ac8389c98a04ceaeb8b50b8dfe85705756b4679141f479647e8d6d319f64
</file>

<file path="assets/images/FishingRod2.webp:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://www.google.com/
HostUrl=https://static.wikia.nocookie.net/minecraft/images/5/55/FishingRod2.png/revision/latest?cb=20190928005320
</file>

<file path="assets/images/floss-idle-with-sail-blue.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://opengameart.org/content/animated-pixel-art-raft-sprite
HostUrl=https://opengameart.org/sites/default/files/floss-idle-with-sail-blue.png
</file>

<file path="assets/images/floss-move-with-sail-blue.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://opengameart.org/content/animated-pixel-art-raft-sprite
HostUrl=https://opengameart.org/sites/default/files/floss-move-with-sail-blue.png
</file>

<file path="assets/images/forestNight.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://www.google.com/
HostUrl=https://pbs.twimg.com/media/FIhow4LVcAEh24n.png
</file>

<file path="assets/images/menu.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://pixlr.com/editor/
HostUrl=https://pixlr.com/editor/
</file>

<file path="assets/images/menugif.gif:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://www.gifntext.com/temp_generations/dO47uW4e.gif
HostUrl=https://www.gifntext.com/temp_generations/dO47uW4e.gif
</file>

<file path="assets/images/Ns5nCS.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://img.itch.zone/aW1nLzUxODkzNTcucG5n/315x250%23c/Ns5nCS.png
HostUrl=https://img.itch.zone/aW1nLzUxODkzNTcucG5n/315x250%23c/Ns5nCS.png
</file>

<file path="assets/images/skillet.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://pixlr.com/editor/
HostUrl=https://pixlr.com/editor/
</file>

<file path="assets/images/tent.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://pixlr.com/editor/
HostUrl=https://pixlr.com/editor/
</file>

<file path="assets/maps/aridDesert.json">
{ "compressionlevel":-1,
 "height":79,
 "infinite":false,
 "layers":[
        {
         "id":2,
         "image":"..\/backgrounds\/aridDesert.png",
         "imageheight":1260,
         "imagewidth":2400,
         "name":"aridDesert",
         "offsetx":1.41609629454808,
         "offsety":1.41609629454803,
         "opacity":1,
         "type":"imagelayer",
         "visible":true,
         "x":0,
         "y":0
        }, 
        {
         "id":3,
         "image":"..\/foregrounds\/aridDesertForeground.png",
         "imageheight":1260,
         "imagewidth":2400,
         "name":"aridDesertforeground",
         "offsetx":9.09090909090912,
         "offsety":6.06060606060601,
         "opacity":1,
         "type":"imagelayer",
         "visible":true,
         "x":0,
         "y":0
        }, 
        {
         "draworder":"topdown",
         "id":6,
         "name":"Object Layer 1",
         "objects":[
                {
                 "height":54,
                 "id":72,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":86,
                 "x":228,
                 "y":214
                }, 
                {
                 "height":30,
                 "id":73,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":136,
                 "x":420,
                 "y":168
                }, 
                {
                 "height":22,
                 "id":74,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":46,
                 "x":320,
                 "y":574
                }, 
                {
                 "height":24,
                 "id":75,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":80,
                 "x":370,
                 "y":616
                }, 
                {
                 "height":28,
                 "id":76,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":130,
                 "x":510,
                 "y":622
                }, 
                {
                 "height":20,
                 "id":77,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":86,
                 "x":646,
                 "y":576
                }, 
                {
                 "height":70,
                 "id":78,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":8,
                 "x":640,
                 "y":582
                }, 
                {
                 "height":68,
                 "id":79,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":12,
                 "x":364,
                 "y":578
                }, 
                {
                 "height":250,
                 "id":80,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":8,
                 "x":316,
                 "y":344
                }, 
                {
                 "height":10,
                 "id":81,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":514,
                 "x":322,
                 "y":342
                }, 
                {
                 "height":180,
                 "id":82,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":12,
                 "x":832,
                 "y":338
                }, 
                {
                 "height":20,
                 "id":83,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":48,
                 "x":744,
                 "y":528
                }, 
                {
                 "height":62,
                 "id":84,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":2,
                 "x":788,
                 "y":478
                }, 
                {
                 "height":24,
                 "id":85,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":34,
                 "x":798,
                 "y":482
                }, 
                {
                 "height":34,
                 "id":86,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":134,
                 "x":758,
                 "y":838
                }, 
                {
                 "height":22,
                 "id":87,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":20,
                 "x":530,
                 "y":968
                }, 
                {
                 "height":24,
                 "id":88,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":18,
                 "x":576,
                 "y":960
                }, 
                {
                 "height":16,
                 "id":89,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":20,
                 "x":514,
                 "y":954
                }, 
                {
                 "height":26,
                 "id":90,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":24,
                 "x":352,
                 "y":964
                }, 
                {
                 "height":18,
                 "id":91,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":22,
                 "x":128,
                 "y":974
                }, 
                {
                 "height":26,
                 "id":92,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":10,
                 "x":436,
                 "y":922
                }, 
                {
                 "height":24,
                 "id":93,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":18,
                 "x":212,
                 "y":634
                }, 
                {
                 "height":20,
                 "id":94,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":24,
                 "x":380,
                 "y":1146
                }, 
                {
                 "height":28,
                 "id":95,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":14,
                 "x":420,
                 "y":1148
                }, 
                {
                 "height":16,
                 "id":96,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":18,
                 "x":394,
                 "y":1166
                }, 
                {
                 "height":22,
                 "id":97,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36,
                 "x":588,
                 "y":1126
                }, 
                {
                 "height":22,
                 "id":98,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":12,
                 "x":716,
                 "y":1124
                }, 
                {
                 "height":14,
                 "id":99,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":20,
                 "x":856,
                 "y":1078
                }, 
                {
                 "height":6,
                 "id":100,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":10,
                 "x":766,
                 "y":1038
                }, 
                {
                 "height":22,
                 "id":101,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":18,
                 "x":722,
                 "y":100
                }, 
                {
                 "height":30,
                 "id":102,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":10,
                 "x":766,
                 "y":92
                }, 
                {
                 "height":12,
                 "id":103,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":16,
                 "x":744,
                 "y":118
                }, 
                {
                 "height":14,
                 "id":104,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":10,
                 "x":706,
                 "y":88
                }, 
                {
                 "height":12,
                 "id":105,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":4,
                 "x":194,
                 "y":1172
                }, 
                {
                 "height":6,
                 "id":106,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30,
                 "x":256,
                 "y":1034
                }, 
                {
                 "height":12,
                 "id":107,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":32,
                 "x":110,
                 "y":742
                }, 
                {
                 "height":20,
                 "id":108,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30,
                 "x":304,
                 "y":688
                }, 
                {
                 "height":26,
                 "id":109,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36,
                 "x":446,
                 "y":824
                }, 
                {
                 "height":36,
                 "id":110,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":18,
                 "x":1546,
                 "y":1106
                }, 
                {
                 "height":16,
                 "id":111,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":8,
                 "x":1576,
                 "y":1106
                }, 
                {
                 "height":22,
                 "id":112,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30,
                 "x":2080,
                 "y":982
                }, 
                {
                 "height":24,
                 "id":113,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36,
                 "x":1648,
                 "y":816
                }, 
                {
                 "height":24,
                 "id":114,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30,
                 "x":1836,
                 "y":1232
                }, 
                {
                 "height":14,
                 "id":115,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":14,
                 "x":1772,
                 "y":1128
                }, 
                {
                 "height":8,
                 "id":116,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":14,
                 "x":1916,
                 "y":1138
                }, 
                {
                 "height":28,
                 "id":117,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":802,
                 "x":1476,
                 "y":616
                }, 
                {
                 "height":580,
                 "id":118,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":16,
                 "x":2268,
                 "y":56
                }, 
                {
                 "height":6,
                 "id":119,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":370,
                 "x":1904,
                 "y":52
                }, 
                {
                 "height":180,
                 "id":120,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":10,
                 "x":1902,
                 "y":58
                }, 
                {
                 "height":8,
                 "id":121,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":52,
                 "x":1846,
                 "y":238
                }, 
                {
                 "height":100,
                 "id":122,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":8,
                 "x":1468,
                 "y":536
                }, 
                {
                 "height":238,
                 "id":123,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":2,
                 "x":1470,
                 "y":234
                }, 
                {
                 "height":6,
                 "id":124,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":42,
                 "x":1472,
                 "y":234
                }, 
                {
                 "height":8,
                 "id":125,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":8,
                 "x":1518,
                 "y":192
                }, 
                {
                 "height":6,
                 "id":126,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":8,
                 "x":1646,
                 "y":184
                }, 
                {
                 "height":18,
                 "id":127,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":118,
                 "x":1628,
                 "y":482
                }, 
                {
                 "height":26,
                 "id":128,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":32,
                 "x":1810,
                 "y":482
                }, 
                {
                 "height":136,
                 "id":129,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":8,
                 "x":1840,
                 "y":366
                }, 
                {
                 "height":86,
                 "id":130,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":8,
                 "x":1842,
                 "y":278
                }, 
                {
                 "height":26,
                 "id":131,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":74,
                 "x":1760,
                 "y":336
                }, 
                {
                 "height":144,
                 "id":132,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":26,
                 "x":1520,
                 "y":248
                }, 
                {
                 "height":100,
                 "id":133,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":78,
                 "x":1528,
                 "y":284
                }, 
                {
                 "height":68,
                 "id":134,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30,
                 "x":1614,
                 "y":286
                }, 
                {
                 "height":30,
                 "id":135,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":48,
                 "x":1654,
                 "y":336
                }, 
                {
                 "height":110,
                 "id":136,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":6,
                 "x":1612,
                 "y":398
                }, 
                {
                 "height":138,
                 "id":137,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":4,
                 "x":1894,
                 "y":286
                }, 
                {
                 "height":14,
                 "id":138,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36,
                 "x":1894,
                 "y":428
                }, 
                {
                 "height":76,
                 "id":139,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":16,
                 "x":1930,
                 "y":442
                }, 
                {
                 "height":14,
                 "id":140,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":90,
                 "x":1946,
                 "y":520
                }, 
                {
                 "height":8,
                 "id":141,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":132,
                 "x":2098,
                 "y":528
                }, 
                {
                 "height":424,
                 "id":142,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":14,
                 "x":2232,
                 "y":98
                }, 
                {
                 "height":26,
                 "id":143,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":296,
                 "x":1940,
                 "y":94
                }, 
                {
                 "height":202,
                 "id":144,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":6,
                 "x":1938,
                 "y":108
                }, 
                {
                 "height":34,
                 "id":145,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":44,
                 "x":1896,
                 "y":282
                }, 
                {
                 "height":182,
                 "id":146,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":16,
                 "x":1962,
                 "y":184
                }, 
                {
                 "height":12,
                 "id":147,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":234,
                 "x":1980,
                 "y":176
                }, 
                {
                 "height":74,
                 "id":148,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":2,
                 "x":2212,
                 "y":188
                }, 
                {
                 "height":10,
                 "id":149,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":32,
                 "x":2180,
                 "y":262
                }, 
                {
                 "height":20,
                 "id":150,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":34,
                 "x":2134,
                 "y":252
                }, 
                {
                 "height":116,
                 "id":151,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":4,
                 "x":2022,
                 "y":296
                }, 
                {
                 "height":2,
                 "id":152,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":16,
                 "x":2002,
                 "y":416
                }, 
                {
                 "height":6,
                 "id":153,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":32,
                 "x":1962,
                 "y":410
                }, 
                {
                 "height":8,
                 "id":154,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36,
                 "x":1924,
                 "y":402
                }, 
                {
                 "height":42,
                 "id":155,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":12,
                 "x":1922,
                 "y":364
                }, 
                {
                 "height":16,
                 "id":156,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":16,
                 "x":2188,
                 "y":356
                }, 
                {
                 "height":8,
                 "id":157,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":18,
                 "x":2068,
                 "y":302
                }, 
                {
                 "height":18,
                 "id":158,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":22,
                 "x":1446,
                 "y":562
                }, 
                {
                 "height":28,
                 "id":159,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30,
                 "x":1644,
                 "y":820
                }, 
                {
                 "height":2,
                 "id":160,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":122,
                 "x":1530,
                 "y":150
                }, 
                {
                 "height":37,
                 "id":161,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":6,
                 "x":1652,
                 "y":152
                }, 
                {
                 "height":28,
                 "id":162,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":9,
                 "x":1517,
                 "y":162
                }, 
                {
                 "height":35,
                 "id":163,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":5,
                 "x":1520,
                 "y":207
                }, 
                {
                 "height":10,
                 "id":164,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":107,
                 "x":1665,
                 "y":193
                }, 
                {
                 "height":15,
                 "id":165,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":68,
                 "x":1776,
                 "y":193
                }, 
                {
                 "height":8,
                 "id":166,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":15,
                 "x":1766,
                 "y":244
                }, 
                {
                 "height":8,
                 "id":167,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":4,
                 "x":1757,
                 "y":246
                }, 
                {
                 "height":6,
                 "id":168,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":21,
                 "x":1769,
                 "y":272
                }, 
                {
                 "height":0,
                 "id":169,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":0,
                 "x":1811,
                 "y":268
                }, 
                {
                 "height":7,
                 "id":170,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":23,
                 "x":1808,
                 "y":265
                }, 
                {
                 "height":21,
                 "id":171,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":23,
                 "x":1635,
                 "y":379
                }],
         "opacity":1,
         "type":"objectgroup",
         "visible":true,
         "x":0,
         "y":0
        }],
 "nextlayerid":7,
 "nextobjectid":172,
 "orientation":"orthogonal",
 "renderorder":"right-down",
 "tiledversion":"1.11.1",
 "tileheight":16,
 "tilesets":[],
 "tilewidth":16,
 "type":"map",
 "version":"1.10",
 "width":150
}
</file>

<file path="assets/maps/aridDesert.json:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\maps.zip
</file>

<file path="assets/maps/campsite.json">
{ "compressionlevel":-1,
 "height":18,
 "infinite":false,
 "layers":[
        {
         "id":2,
         "image":"..\/..\/Downloads\/FIhow4LVcAEh24n.png",
         "imageheight":576,
         "imagewidth":576,
         "name":"campsite",
         "opacity":1,
         "type":"imagelayer",
         "visible":true,
         "x":0,
         "y":0
        }, 
        {
         "draworder":"topdown",
         "id":4,
         "name":"campfire",
         "objects":[
                {
                 "height":87.8954433062522,
                 "id":3,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":122.077004592017,
                 "x":231.132462027552,
                 "y":434.59413634758
                }],
         "opacity":1,
         "type":"objectgroup",
         "visible":true,
         "x":0,
         "y":0
        }, 
        {
         "draworder":"topdown",
         "id":5,
         "name":"site_torch",
         "objects":[
                {
                 "height":40.6923348640056,
                 "id":5,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":48.0169551395267,
                 "x":139.167785234899,
                 "y":367.858707170611
                }],
         "opacity":1,
         "type":"objectgroup",
         "visible":true,
         "x":0,
         "y":0
        }],
 "nextlayerid":6,
 "nextobjectid":6,
 "orientation":"orthogonal",
 "renderorder":"right-down",
 "tiledversion":"1.11.1",
 "tileheight":32,
 "tilesets":[],
 "tilewidth":32,
 "type":"map",
 "version":"1.10",
 "width":18
}
</file>

<file path="assets/maps/fishing_lake.json">
{
 "compressionlevel":-1,
 "height":62,
 "infinite":false,
 "layers":[
        {
         "id":2,
         "image":"\/\/wsl.localhost\/Ubuntu-20.04\/home\/redbeard\/fishing\/assets\/images\/lake.png",
         "imageheight":1981,
         "imagewidth":2000,
         "name":"lake",
         "opacity":1,
         "type":"imagelayer",
         "visible":true,
         "x":0,
         "y":0
        }, 
        {
         "draworder":"topdown",
         "id":4,
         "name":"collisions",
         "objects":[
                {
                 "height":1145.45454545455,
                 "id":79,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":false,
                 "width":1269.69696969697,
                 "x":257.575757575758,
                 "y":466.666666666667
                }, 
                {
                 "height":915.151515151515,
                 "id":80,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":false,
                 "width":124.242424242424,
                 "x":1533.33333333333,
                 "y":575.757575757576
                }, 
                {
                 "height":242.424242424242,
                 "id":81,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":false,
                 "width":87.8787878787878,
                 "x":1672.72727272727,
                 "y":854.545454545455
                }, 
                {
                 "height":130.30303030303,
                 "id":82,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":false,
                 "width":763.636363636364,
                 "x":745.454545454545,
                 "y":330.30303030303
                }, 
                {
                 "height":409.090909090909,
                 "id":83,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":false,
                 "width":142.424242424242,
                 "x":100,
                 "y":1118.18181818182
                }, 
                {
                 "height":115.151515151515,
                 "id":84,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":false,
                 "width":127.272727272727,
                 "x":118.181818181818,
                 "y":600
                }, 
                {
                 "height":133.333333333333,
                 "id":85,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":false,
                 "width":369.69696969697,
                 "x":348.484848484848,
                 "y":1615.15151515152
                }, 
                {
                 "height":39.3939393939395,
                 "id":86,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":false,
                 "width":45.4545454545454,
                 "x":203.030303030303,
                 "y":1533.33333333333
                }, 
                {
                 "height":87.8787878787879,
                 "id":87,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":false,
                 "width":33.3333333333333,
                 "x":221.212121212121,
                 "y":509.090909090909
                }, 
                {
                 "height":127.272727272727,
                 "id":88,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":false,
                 "width":524.242424242424,
                 "x":224.242424242424,
                 "y":463.636363636364
                }, 
                {
                 "height":384.848484848485,
                 "id":89,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":false,
                 "width":112.121212121212,
                 "x":215.151515151515,
                 "y":721.212121212121
                }, 
                {
                 "height":87.878787878788,
                 "id":90,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":false,
                 "width":800,
                 "x":727.272727272727,
                 "y":1533.33333333333
                }, 
                {
                 "height":124.242424242424,
                 "id":91,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":false,
                 "width":42.4242424242425,
                 "x":1496.9696969697,
                 "y":457.575757575758
                }, 
                {
                 "height":90.9090909090908,
                 "id":92,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":false,
                 "width":112.121212121212,
                 "x":230.30303030303,
                 "y":1539.39393939394
                }],
         "opacity":1,
         "type":"objectgroup",
         "visible":true,
         "x":0,
         "y":0
        }, 
        {
         "id":5,
         "image":"\/\/wsl.localhost\/Ubuntu-20.04\/home\/redbeard\/fishing\/assets\/images\/lake_foreground.png",
         "imageheight":1981,
         "imagewidth":2000,
         "name":"lake_foreground",
         "opacity":1,
         "type":"imagelayer",
         "visible":true,
         "x":0,
         "y":0
        }],
 "nextlayerid":7,
 "nextobjectid":93,
 "orientation":"orthogonal",
 "renderorder":"right-down",
 "tiledversion":"1.11.1",
 "tileheight":32,
 "tilesets":[],
 "tilewidth":32,
 "type":"map",
 "version":"1.10",
 "width":62
}
</file>

<file path="assets/maps/outerGrasslands.json">
{ "compressionlevel":-1,
 "height":150,
 "infinite":false,
 "layers":[
        {
         "id":4,
         "image":"..\/backgrounds\/outerGrasslands.png",
         "imageheight":2400,
         "imagewidth":2400,
         "name":"outergrasslands",
         "opacity":1,
         "type":"imagelayer",
         "visible":true,
         "x":0,
         "y":0
        }, 
        {
         "draworder":"topdown",
         "id":3,
         "name":"Object Layer 1",
         "objects":[
                {
                 "height":25.8181818181818,
                 "id":90,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":90.9090909090909,
                 "x":51.5151515151515,
                 "y":56
                }, 
                {
                 "height":24.2424242424242,
                 "id":91,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":100,
                 "x":227.272727272727,
                 "y":78.7878787878788
                }, 
                {
                 "height":30.3030303030303,
                 "id":92,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":51.5151515151515,
                 "x":417.121212121212,
                 "y":67.5757575757576
                }, 
                {
                 "height":46.4848484848484,
                 "id":94,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":50.9090909090909,
                 "x":264.30303030303,
                 "y":278.121212121212
                }, 
                {
                 "height":8.1818181818182,
                 "id":96,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":374.878787878788,
                 "x":121.181818181818,
                 "y":525.090909090909
                }, 
                {
                 "height":75.7575757575758,
                 "id":97,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":24.2424242424242,
                 "x":236.363636363636,
                 "y":724.242424242424
                }, 
                {
                 "height":230.30303030303,
                 "id":98,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":33.3333333333333,
                 "x":227.272727272727,
                 "y":887.878787878788
                }, 
                {
                 "height":109.090909090909,
                 "id":99,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":69.6969696969697,
                 "x":242.424242424242,
                 "y":1018.18181818182
                }, 
                {
                 "height":93.939393939394,
                 "id":100,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":69.6969696969697,
                 "x":396.969696969697,
                 "y":1024.24242424242
                }, 
                {
                 "height":378.787878787879,
                 "id":101,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":21.2121212121212,
                 "x":460.606060606061,
                 "y":736.363636363636
                }, 
                {
                 "height":18.1818181818182,
                 "id":102,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":57.5757575757576,
                 "x":260.606060606061,
                 "y":718.181818181818
                }, 
                {
                 "height":24.2424242424242,
                 "id":103,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":72.7272727272727,
                 "x":403.030303030303,
                 "y":718.181818181818
                }, 
                {
                 "height":151.515151515152,
                 "id":105,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":221.212121212121,
                 "x":657.575757575758,
                 "y":1266.66666666667
                }, 
                {
                 "height":75.7575757575758,
                 "id":106,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":72.7272727272727,
                 "x":878.787878787879,
                 "y":1254.54545454545
                }, 
                {
                 "height":72.7272727272727,
                 "id":107,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":15.1515151515152,
                 "x":942.424242424242,
                 "y":1206.06060606061
                }, 
                {
                 "height":78.787878787879,
                 "id":108,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":27.2727272727273,
                 "x":936.363636363636,
                 "y":1036.36363636364
                }, 
                {
                 "height":33.3333333333334,
                 "id":109,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":160.606060606061,
                 "x":945.454545454545,
                 "y":1009.09090909091
                }, 
                {
                 "height":66.6666666666665,
                 "id":110,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":127.272727272727,
                 "x":972.727272727273,
                 "y":1042.42424242424
                }, 
                {
                 "height":345.454545454545,
                 "id":111,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":18.181818181818,
                 "x":1090.90909090909,
                 "y":736.363636363636
                }, 
                {
                 "height":30.3030303030303,
                 "id":112,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":75.7575757575758,
                 "x":1033.33333333333,
                 "y":709.090909090909
                }, 
                {
                 "height":90.9090909090909,
                 "id":113,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":63.6363636363636,
                 "x":960.606060606061,
                 "y":624.242424242424
                }, 
                {
                 "height":245.454545454545,
                 "id":114,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":154.545454545455,
                 "x":648.484848484848,
                 "y":627.272727272727
                }, 
                {
                 "height":96.969696969697,
                 "id":115,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":75.7575757575758,
                 "x":800,
                 "y":627.272727272727
                }, 
                {
                 "height":290.909090909091,
                 "id":116,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":24.2424242424242,
                 "x":636.363636363636,
                 "y":333.333333333333
                }, 
                {
                 "height":11.2727272727273,
                 "id":117,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":384.848484848485,
                 "x":648.484848484848,
                 "y":325.090909090909
                }, 
                {
                 "height":315.151515151515,
                 "id":118,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30.3030303030304,
                 "x":1015.15151515152,
                 "y":336.363636363636
                }, 
                {
                 "height":51.5151515151516,
                 "id":120,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":53.7575757575758,
                 "x":912,
                 "y":372.727272727272
                }, 
                {
                 "height":39.3939393939393,
                 "id":121,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":215.151515151515,
                 "x":1045.45454545455,
                 "y":554.545454545455
                }, 
                {
                 "height":18.1818181818181,
                 "id":129,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":424.242424242424,
                 "x":1136.36363636364,
                 "y":957.575757575758
                }, 
                {
                 "height":360.606060606061,
                 "id":130,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":24.2424242424242,
                 "x":1654.54545454545,
                 "y":975.757575757576
                }, 
                {
                 "height":87.8787878787878,
                 "id":131,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":133.333333333333,
                 "x":1527.27272727273,
                 "y":1266.66666666667
                }, 
                {
                 "height":190.909090909091,
                 "id":132,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":24.2424242424242,
                 "x":1515.15151515152,
                 "y":1103.0303030303
                }, 
                {
                 "height":84.8484848484848,
                 "id":133,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":236.363636363636,
                 "x":1281.81818181818,
                 "y":1103.0303030303
                }, 
                {
                 "height":90.909090909091,
                 "id":134,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30.3030303030303,
                 "x":1257.57575757576,
                 "y":1100
                }, 
                {
                 "height":157.575757575758,
                 "id":135,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30.3030303030303,
                 "x":1248.48484848485,
                 "y":1351.51515151515
                }, 
                {
                 "height":96.969696969697,
                 "id":136,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":381.818181818182,
                 "x":875.757575757576,
                 "y":1418.18181818182
                }, 
                {
                 "height":460.606060606061,
                 "id":137,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":21.2121212121212,
                 "x":636.363636363636,
                 "y":966.666666666667
                }, 
                {
                 "height":21.2121212121212,
                 "id":138,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":166.666666666667,
                 "x":639.393939393939,
                 "y":954.545454545455
                }, 
                {
                 "height":224.242424242424,
                 "id":139,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":15.1515151515151,
                 "x":803.030303030303,
                 "y":736.363636363636
                }, 
                {
                 "height":24.2424242424245,
                 "id":142,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":41.818181818182,
                 "x":1260.36363636364,
                 "y":1612.12121212121
                }, 
                {
                 "height":30.3030303030303,
                 "id":144,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":393.939393939394,
                 "x":1730.30303030303,
                 "y":1433.33333333333
                }, 
                {
                 "height":36.3636363636363,
                 "id":145,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":321.212121212121,
                 "x":1796.9696969697,
                 "y":1396.9696969697
                }, 
                {
                 "height":451.515151515152,
                 "id":146,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":893.939393939394,
                 "x":675.757575757576,
                 "y":1960.60606060606
                }, 
                {
                 "height":212.121212121212,
                 "id":147,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":1278.78787878788,
                 "x":1572.72727272727,
                 "y":2193.93939393939
                }, 
                {
                 "height":42,
                 "id":148,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":65,
                 "x":1807,
                 "y":1217
                }, 
                {
                 "height":29,
                 "id":149,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":61,
                 "x":1999,
                 "y":1231
                }, 
                {
                 "height":34,
                 "id":150,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":38,
                 "x":2211,
                 "y":1142
                }, 
                {
                 "height":416,
                 "id":151,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":64,
                 "x":2168,
                 "y":1352
                }, 
                {
                 "height":62,
                 "id":152,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":64,
                 "x":1932,
                 "y":1718
                }, 
                {
                 "height":332,
                 "id":153,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":52,
                 "x":1684,
                 "y":1600
                }, 
                {
                 "height":40,
                 "id":164,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":40,
                 "x":956,
                 "y":1236
                }, 
                {
                 "height":36,
                 "id":165,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36,
                 "x":1280,
                 "y":1400
                }, 
                {
                 "height":24,
                 "id":166,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36,
                 "x":184,
                 "y":928
                }, 
                {
                 "height":20,
                 "id":168,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":344,
                 "x":1776,
                 "y":1460
                }, 
                {
                 "height":24,
                 "id":172,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":438,
                 "x":1756,
                 "y":1996
                }, 
                {
                 "height":24.2424,
                 "id":173,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":41.8182,
                 "x":1118.42423333333,
                 "y":1594.54546666667
                }, 
                {
                 "height":24.2424,
                 "id":174,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":41.8182,
                 "x":858.424233333333,
                 "y":1628.54546666667
                }, 
                {
                 "height":46.2424,
                 "id":175,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":41.8182,
                 "x":508.424233333333,
                 "y":1492.54546666667
                }, 
                {
                 "height":46.4848,
                 "id":176,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":66.9091,
                 "x":494.212116666667,
                 "y":278.090933333333
                }, 
                {
                 "height":46.2424,
                 "id":177,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":41.8182,
                 "x":2197.0909,
                 "y":879.8788
                }, 
                {
                 "height":46.2424,
                 "id":178,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":41.8182,
                 "x":2201.0909,
                 "y":407.8788
                }, 
                {
                 "height":46.2424,
                 "id":179,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":41.8182,
                 "x":1969.0909,
                 "y":373.8788
                }, 
                {
                 "height":46.2424,
                 "id":180,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":41.8182,
                 "x":2085.0909,
                 "y":204.8788
                }, 
                {
                 "height":46.2424,
                 "id":181,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":41.8182,
                 "x":1961.0909,
                 "y":144.8788
                }, 
                {
                 "height":46.2424,
                 "id":182,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":41.8182,
                 "x":1807.0909,
                 "y":81.8788
                }, 
                {
                 "height":46.2424,
                 "id":183,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":41.8182,
                 "x":2168.0909,
                 "y":106.8788
                }, 
                {
                 "height":24.2424,
                 "id":184,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":41.8182,
                 "x":1589.0909,
                 "y":1459.8788
                }, 
                {
                 "height":24.2424,
                 "id":185,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":41.8182,
                 "x":1578.0909,
                 "y":966.8788
                }],
         "opacity":1,
         "type":"objectgroup",
         "visible":true,
         "x":0,
         "y":0
        }, 
        {
         "id":5,
         "image":"..\/foregrounds\/outerGrasslandsForeground.png",
         "imageheight":2400,
         "imagewidth":2400,
         "name":"outerGrasslandsForeground",
         "opacity":1,
         "type":"imagelayer",
         "visible":true,
         "x":0,
         "y":0
        }],
 "nextlayerid":6,
 "nextobjectid":186,
 "orientation":"orthogonal",
 "renderorder":"right-down",
 "tiledversion":"1.11.1",
 "tileheight":16,
 "tilesets":[],
 "tilewidth":16,
 "type":"map",
 "version":"1.10",
 "width":150
}
</file>

<file path="assets/maps/outerGrasslands.json:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\maps.zip
</file>

<file path="assets/maps/shadyGrove.json">
{ "compressionlevel":-1,
 "height":160,
 "infinite":false,
 "layers":[
        {
         "id":7,
         "image":"..\/backgrounds\/shadyGrove.png",
         "imageheight":2561,
         "imagewidth":4160,
         "name":"shadyGrovebackground",
         "opacity":1,
         "type":"imagelayer",
         "visible":true,
         "x":0,
         "y":0
        }, 
        {
         "draworder":"topdown",
         "id":3,
         "name":"Object Layer 1",
         "objects":[
                {
                 "height":75.7575757575758,
                 "id":1,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":587.878787878788,
                 "x":739.393939393939,
                 "y":1845.45454545455
                }, 
                {
                 "height":378.787878787879,
                 "id":2,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":57.5757575757575,
                 "x":736.363636363636,
                 "y":1533.33333333333
                }, 
                {
                 "height":218.181818181818,
                 "id":6,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":224.242424242424,
                 "x":569.69696969697,
                 "y":1539.39393939394
                }, 
                {
                 "height":206.060606060606,
                 "id":7,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":93.939393939394,
                 "x":463.636363636364,
                 "y":1624.24242424242
                }, 
                {
                 "height":81.8181818181818,
                 "id":8,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":242.424242424242,
                 "x":336.363636363636,
                 "y":1603.0303030303
                }, 
                {
                 "height":215.151515151515,
                 "id":9,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":218.181818181818,
                 "x":172.727272727273,
                 "y":1303.0303030303
                }, 
                {
                 "height":57.5757575757575,
                 "id":10,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":154.545454545455,
                 "x":384.848484848485,
                 "y":1303.0303030303
                }, 
                {
                 "height":84.8484848484848,
                 "id":11,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":63.6363636363636,
                 "x":330.30303030303,
                 "y":1521.21212121212
                }, 
                {
                 "height":127.272727272727,
                 "id":12,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":96.969696969697,
                 "x":93.9393939393939,
                 "y":1384.84848484848
                }, 
                {
                 "height":206.060606060606,
                 "id":13,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":142.424242424242,
                 "x":9.09090909090909,
                 "y":1545.45454545455
                }, 
                {
                 "height":42.4242424242425,
                 "id":14,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":54.5454545454545,
                 "x":93.9393939393939,
                 "y":1506.06060606061
                }, 
                {
                 "height":60.6060606060605,
                 "id":15,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":72.7272727272727,
                 "x":157.575757575758,
                 "y":1693.93939393939
                }, 
                {
                 "height":154.545454545455,
                 "id":16,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":151.515151515152,
                 "x":163.636363636364,
                 "y":1763.63636363636
                }, 
                {
                 "height":63.6363636363637,
                 "id":17,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":63.6363636363637,
                 "x":309.090909090909,
                 "y":1854.54545454545
                }, 
                {
                 "height":457.575757575758,
                 "id":18,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":72.7272727272727,
                 "x":3.03030303030303,
                 "y":1857.57575757576
                }, 
                {
                 "height":66.6666666666665,
                 "id":19,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":242.424242424242,
                 "x":72.7272727272727,
                 "y":2248.48484848485
                }, 
                {
                 "height":63.6363636363635,
                 "id":20,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":172.727272727273,
                 "x":172.727272727273,
                 "y":2181.81818181818
                }, 
                {
                 "height":154.545454545455,
                 "id":21,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":66.6666666666667,
                 "x":245.454545454545,
                 "y":2312.12121212121
                }, 
                {
                 "height":124.242424242424,
                 "id":22,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":139.393939393939,
                 "x":12.1212121212121,
                 "y":2427.27272727273
                }, 
                {
                 "height":78.7878787878789,
                 "id":23,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":48.4848484848485,
                 "x":296.969696969697,
                 "y":1048.48484848485
                }, 
                {
                 "height":0,
                 "id":27,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":27.2727272727273,
                 "x":509.090909090909,
                 "y":1142.42424242424
                }, 
                {
                 "height":66.6666666666667,
                 "id":28,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":48.4848484848485,
                 "x":536.363636363636,
                 "y":1075.75757575758
                }, 
                {
                 "height":54.5454545454545,
                 "id":29,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":106.060606060606,
                 "x":509.090909090909,
                 "y":1090.90909090909
                }, 
                {
                 "height":36.3636363636363,
                 "id":30,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":84.8484848484848,
                 "x":1069.69696969697,
                 "y":1339.39393939394
                }, 
                {
                 "height":39.3939393939395,
                 "id":31,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30.3030303030303,
                 "x":1106.06060606061,
                 "y":1306.06060606061
                }, 
                {
                 "height":54.5454545454543,
                 "id":34,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":206.060606060606,
                 "x":75.7575757575758,
                 "y":2015.15151515152
                }, 
                {
                 "height":193.939393939394,
                 "id":35,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":66.6666666666667,
                 "x":566.666666666667,
                 "y":1866.66666666667
                }, 
                {
                 "height":130.30303030303,
                 "id":36,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":127.272727272727,
                 "x":496.969696969697,
                 "y":2175.75757575758
                }, 
                {
                 "height":369.69696969697,
                 "id":38,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":72.7272727272726,
                 "x":721.212121212121,
                 "y":2024.24242424242
                }, 
                {
                 "height":57.5757575757575,
                 "id":39,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":384.848484848485,
                 "x":727.272727272727,
                 "y":2336.36363636364
                }, 
                {
                 "height":187.878787878788,
                 "id":40,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":63.6363636363635,
                 "x":1048.48484848485,
                 "y":2178.78787878788
                }, 
                {
                 "height":63.636363636364,
                 "id":41,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":209.090909090909,
                 "x":1057.57575757576,
                 "y":2166.66666666667
                }, 
                {
                 "height":75.7575757575755,
                 "id":42,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":63.6363636363635,
                 "x":1200,
                 "y":2227.27272727273
                }, 
                {
                 "height":124.242424242424,
                 "id":43,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":127.272727272727,
                 "x":1136.36363636364,
                 "y":2430.30303030303
                }, 
                {
                 "height":42.4242424242425,
                 "id":44,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":48.4848484848485,
                 "x":900,
                 "y":2515.15151515152
                }, 
                {
                 "height":45.4545454545455,
                 "id":45,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":118.181818181818,
                 "x":581.818181818182,
                 "y":2509.09090909091
                }, 
                {
                 "height":60.6060606060605,
                 "id":46,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":512.121212121212,
                 "x":796.969696969697,
                 "y":2012.12121212121
                }, 
                {
                 "height":69.6969696969697,
                 "id":47,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":48.4848484848485,
                 "x":587.878787878788,
                 "y":1463.63636363636
                }, 
                {
                 "height":93.9393939393938,
                 "id":48,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":48.4848484848485,
                 "x":766.666666666667,
                 "y":1339.39393939394
                }, 
                {
                 "height":24.2424242424242,
                 "id":50,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":48.4848484848485,
                 "x":57.5757575757576,
                 "y":163.636363636364
                }, 
                {
                 "height":409.090909090909,
                 "id":54,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":12.1212121212121,
                 "x":142.424242424242,
                 "y":278.787878787879
                }, 
                {
                 "height":18.1818181818181,
                 "id":55,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":96.969696969697,
                 "x":136.363636363636,
                 "y":687.878787878788
                }, 
                {
                 "height":21.2121212121212,
                 "id":56,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":63.6363636363636,
                 "x":236.363636363636,
                 "y":724.242424242424
                }, 
                {
                 "height":42.4242424242424,
                 "id":57,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":21.2121212121212,
                 "x":224.242424242424,
                 "y":696.969696969697
                }, 
                {
                 "height":72.7272727272727,
                 "id":58,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":109.090909090909,
                 "x":296.969696969697,
                 "y":730.30303030303
                }, 
                {
                 "height":27.2727272727273,
                 "id":65,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":9.09090909090907,
                 "x":406.060606060606,
                 "y":809.090909090909
                }, 
                {
                 "height":15.1515151515151,
                 "id":66,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":45.4545454545455,
                 "x":421.212121212121,
                 "y":827.272727272727
                }, 
                {
                 "height":15.1515151515151,
                 "id":67,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":21.2121212121212,
                 "x":469.69696969697,
                 "y":836.363636363636
                }, 
                {
                 "height":12.1212121212121,
                 "id":68,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":39.3939393939394,
                 "x":490.909090909091,
                 "y":851.515151515152
                }, 
                {
                 "height":15.1515151515151,
                 "id":69,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":78.7878787878788,
                 "x":539.393939393939,
                 "y":863.636363636364
                }, 
                {
                 "height":21.2121212121211,
                 "id":70,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":175.757575757576,
                 "x":609.090909090909,
                 "y":845.454545454545
                }, 
                {
                 "height":24.2424242424242,
                 "id":71,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":160.606060606061,
                 "x":787.878787878788,
                 "y":845.454545454545
                }, 
                {
                 "height":39.3939393939395,
                 "id":72,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":24.2424242424242,
                 "x":945.454545454545,
                 "y":818.181818181818
                }, 
                {
                 "height":27.2727272727273,
                 "id":73,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":60.6060606060606,
                 "x":966.666666666667,
                 "y":812.121212121212
                }, 
                {
                 "height":42.4242424242424,
                 "id":74,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":27.2727272727273,
                 "x":1027.27272727273,
                 "y":775.757575757576
                }, 
                {
                 "height":15.1515151515152,
                 "id":75,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":63.6363636363637,
                 "x":1054.54545454545,
                 "y":781.818181818182
                }, 
                {
                 "height":42.4242424242425,
                 "id":76,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":21.2121212121212,
                 "x":1106.06060606061,
                 "y":742.424242424242
                }, 
                {
                 "height":15.1515151515151,
                 "id":77,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":75.7575757575758,
                 "x":1121.21212121212,
                 "y":736.363636363636
                }, 
                {
                 "height":42.4242424242425,
                 "id":78,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":21.2121212121212,
                 "x":1184.84848484848,
                 "y":706.060606060606
                }, 
                {
                 "height":30.3030303030303,
                 "id":79,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":54.5454545454545,
                 "x":1203.0303030303,
                 "y":684.848484848485
                }, 
                {
                 "height":39.3939393939394,
                 "id":80,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30.3030303030303,
                 "x":1254.54545454545,
                 "y":663.636363636364
                }, 
                {
                 "height":48.4848484848485,
                 "id":81,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":18.1818181818182,
                 "x":1281.81818181818,
                 "y":618.181818181818
                }, 
                {
                 "height":60.6060606060606,
                 "id":82,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":21.2121212121212,
                 "x":1263.63636363636,
                 "y":566.666666666667
                }, 
                {
                 "height":51.5151515151515,
                 "id":83,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":15.1515151515152,
                 "x":1284.84848484848,
                 "y":521.212121212121
                }, 
                {
                 "height":60.6060606060606,
                 "id":84,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":18.181818181818,
                 "x":1269.69696969697,
                 "y":472.727272727273
                }, 
                {
                 "height":51.5151515151515,
                 "id":85,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":15.1515151515152,
                 "x":1281.81818181818,
                 "y":439.393939393939
                }, 
                {
                 "height":63.6363636363636,
                 "id":86,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":27.2727272727273,
                 "x":1272.72727272727,
                 "y":372.727272727273
                }, 
                {
                 "height":81.8181818181819,
                 "id":87,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":27.2727272727273,
                 "x":1278.78787878788,
                 "y":303.030303030303
                }, 
                {
                 "height":30.3030303030303,
                 "id":88,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":33.3333333333335,
                 "x":1257.57575757576,
                 "y":260.606060606061
                }, 
                {
                 "height":24.2424242424242,
                 "id":89,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":72.7272727272725,
                 "x":1190.90909090909,
                 "y":230.30303030303
                }, 
                {
                 "height":21.2121212121212,
                 "id":90,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":115.151515151515,
                 "x":939.393939393939,
                 "y":121.212121212121
                }, 
                {
                 "height":30.3030303030303,
                 "id":91,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":21.2121212121212,
                 "x":1054.54545454545,
                 "y":136.363636363636
                }, 
                {
                 "height":24.2424242424242,
                 "id":94,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":60.6060606060605,
                 "x":1072.72727272727,
                 "y":148.484848484848
                }, 
                {
                 "height":33.3333333333333,
                 "id":95,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":27.2727272727273,
                 "x":1124.24242424242,
                 "y":160.606060606061
                }, 
                {
                 "height":30.3030303030303,
                 "id":96,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":48.4848484848485,
                 "x":1133.33333333333,
                 "y":200
                }, 
                {
                 "height":18.1818181818182,
                 "id":97,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36.3636363636364,
                 "x":151.515151515152,
                 "y":266.666666666667
                }, 
                {
                 "height":48.4848484848485,
                 "id":98,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":18.1818181818182,
                 "x":178.787878787879,
                 "y":233.333333333333
                }, 
                {
                 "height":21.2121212121212,
                 "id":99,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":21.2121212121212,
                 "x":190.909090909091,
                 "y":209.090909090909
                }, 
                {
                 "height":24.2424242424242,
                 "id":100,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":27.2727272727273,
                 "x":215.151515151515,
                 "y":181.818181818182
                }, 
                {
                 "height":15.1515151515152,
                 "id":101,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":54.5454545454546,
                 "x":251.515151515152,
                 "y":172.727272727273
                }, 
                {
                 "height":21.2121212121212,
                 "id":102,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":27.2727272727273,
                 "x":324.242424242424,
                 "y":166.666666666667
                }, 
                {
                 "height":30.3030303030303,
                 "id":103,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":21.2121212121212,
                 "x":312.121212121212,
                 "y":166.666666666667
                }, 
                {
                 "height":69.6969696969697,
                 "id":104,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":136.363636363636,
                 "x":200,
                 "y":187.878787878788
                }, 
                {
                 "height":48.4848484848485,
                 "id":106,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":33.3333333333333,
                 "x":336.363636363636,
                 "y":206.060606060606
                }, 
                {
                 "height":24.2424242424242,
                 "id":107,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":172.727272727273,
                 "x":206.060606060606,
                 "y":260.606060606061
                }, 
                {
                 "height":36.3636363636363,
                 "id":108,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":48.4848484848484,
                 "x":481.818181818182,
                 "y":272.727272727273
                }, 
                {
                 "height":24.2424242424242,
                 "id":109,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36.3636363636364,
                 "x":496.969696969697,
                 "y":242.424242424242
                }, 
                {
                 "height":24.2424242424242,
                 "id":110,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":57.5757575757575,
                 "x":533.333333333333,
                 "y":218.181818181818
                }, 
                {
                 "height":30.3030303030303,
                 "id":111,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":51.5151515151515,
                 "x":587.878787878788,
                 "y":203.030303030303
                }, 
                {
                 "height":30.3030303030303,
                 "id":112,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36.3636363636364,
                 "x":639.393939393939,
                 "y":218.181818181818
                }, 
                {
                 "height":72.7272727272727,
                 "id":113,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36.3636363636364,
                 "x":663.636363636364,
                 "y":233.333333333333
                }, 
                {
                 "height":51.5151515151515,
                 "id":114,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":163.636363636364,
                 "x":515.151515151515,
                 "y":236.363636363636
                }, 
                {
                 "height":42.4242424242424,
                 "id":117,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":63.6363636363636,
                 "x":318.181818181818,
                 "y":454.545454545455
                }, 
                {
                 "height":39.3939393939394,
                 "id":118,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":90.9090909090909,
                 "x":321.212121212121,
                 "y":493.939393939394
                }, 
                {
                 "height":36.3636363636364,
                 "id":119,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":142.424242424242,
                 "x":293.939393939394,
                 "y":518.181818181818
                }, 
                {
                 "height":27.2727272727273,
                 "id":120,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":60.6060606060606,
                 "x":354.545454545455,
                 "y":148.484848484848
                }, 
                {
                 "height":24.2424242424242,
                 "id":121,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":84.8484848484848,
                 "x":406.060606060606,
                 "y":121.212121212121
                }, 
                {
                 "height":21.2121212121212,
                 "id":126,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":484.848484848485,
                 "x":493.939393939394,
                 "y":121.212121212121
                }, 
                {
                 "height":48.4848484848485,
                 "id":128,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":27.2727272727273,
                 "x":903.030303030303,
                 "y":133.333333333333
                }, 
                {
                 "height":21.2121212121212,
                 "id":129,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":87.8787878787879,
                 "x":827.272727272727,
                 "y":190.909090909091
                }, 
                {
                 "height":42.4242424242424,
                 "id":130,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":363.636363636364,
                 "x":818.181818181818,
                 "y":218.181818181818
                }, 
                {
                 "height":51.5151515151515,
                 "id":131,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":212.121212121212,
                 "x":912.121212121212,
                 "y":166.666666666667
                }, 
                {
                 "height":27.2727272727273,
                 "id":132,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":196.969696969697,
                 "x":933.333333333333,
                 "y":393.939393939394
                }, 
                {
                 "height":24.2424242424242,
                 "id":133,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":172.727272727273,
                 "x":951.515151515152,
                 "y":369.69696969697
                }, 
                {
                 "height":27.2727272727273,
                 "id":134,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":136.363636363636,
                 "x":978.787878787879,
                 "y":348.484848484848
                }, 
                {
                 "height":24.2424242424242,
                 "id":135,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":372.727272727273,
                 "x":572.727272727273,
                 "y":624.242424242424
                }, 
                {
                 "height":57.5757575757576,
                 "id":136,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":339.393939393939,
                 "x":590.909090909091,
                 "y":578.787878787879
                }, 
                {
                 "height":30.3030303030303,
                 "id":137,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":218.181818181818,
                 "x":657.575757575758,
                 "y":551.515151515152
                }, 
                {
                 "height":30.3030303030303,
                 "id":138,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":118.181818181818,
                 "x":700,
                 "y":524.242424242424
                }, 
                {
                 "height":48.4848484848485,
                 "id":141,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":115.151515151515,
                 "x":800,
                 "y":1545.45454545455
                }, 
                {
                 "height":51.5151515151515,
                 "id":142,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":57.5757575757576,
                 "x":893.939393939394,
                 "y":1690.90909090909
                }, 
                {
                 "height":109.090909090909,
                 "id":143,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36.3636363636363,
                 "x":1190.90909090909,
                 "y":1672.72727272727
                }, 
                {
                 "height":90.909090909091,
                 "id":144,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":15.1515151515152,
                 "x":1230.30303030303,
                 "y":1709.09090909091
                }, 
                {
                 "height":21.2121212121212,
                 "id":146,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":96.969696969697,
                 "x":1081.81818181818,
                 "y":1596.9696969697
                }, 
                {
                 "height":12.1212121212122,
                 "id":148,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30.3030303030303,
                 "x":1100,
                 "y":1681.81818181818
                }, 
                {
                 "height":39.3939393939394,
                 "id":149,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":45.4545454545455,
                 "x":1460.60606060606,
                 "y":218.181818181818
                }, 
                {
                 "height":33.3333333333333,
                 "id":154,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30.3030303030303,
                 "x":1833.33333333333,
                 "y":166.666666666667
                }, 
                {
                 "height":466.666666666667,
                 "id":155,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":27.2727272727273,
                 "x":1418.18181818182,
                 "y":618.181818181818
                }, 
                {
                 "height":30.3030303030303,
                 "id":156,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":60.6060606060605,
                 "x":1442.42424242424,
                 "y":1081.81818181818
                }, 
                {
                 "height":48.4848484848485,
                 "id":157,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":87.878787878788,
                 "x":1506.06060606061,
                 "y":1109.09090909091
                }, 
                {
                 "height":48.4848484848485,
                 "id":158,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":78.7878787878788,
                 "x":1593.93939393939,
                 "y":1157.57575757576
                }, 
                {
                 "height":42.4242424242425,
                 "id":159,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":72.7272727272727,
                 "x":1675.75757575758,
                 "y":1203.0303030303
                }, 
                {
                 "height":30.3030303030303,
                 "id":160,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":136.363636363636,
                 "x":1757.57575757576,
                 "y":1245.45454545455
                }, 
                {
                 "height":21.2121212121212,
                 "id":161,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":166.666666666667,
                 "x":1906.06060606061,
                 "y":1263.63636363636
                }, 
                {
                 "height":21.2121212121212,
                 "id":162,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":139.393939393939,
                 "x":2078.78787878788,
                 "y":1251.51515151515
                }, 
                {
                 "height":30.3030303030303,
                 "id":163,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":145.454545454545,
                 "x":2245.45454545455,
                 "y":1245.45454545455
                }, 
                {
                 "height":27.2727272727273,
                 "id":164,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":72.7272727272725,
                 "x":2396.9696969697,
                 "y":1218.18181818182
                }, 
                {
                 "height":24.2424242424242,
                 "id":165,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":78.787878787879,
                 "x":2466.66666666667,
                 "y":1187.87878787879
                }, 
                {
                 "height":24.2424242424242,
                 "id":166,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":18.181818181818,
                 "x":2542.42424242424,
                 "y":1160.60606060606
                }, 
                {
                 "height":18.181818181818,
                 "id":167,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":72.7272727272725,
                 "x":2548.48484848485,
                 "y":1145.45454545455
                }, 
                {
                 "height":27.2727272727273,
                 "id":168,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":12.121212121212,
                 "x":2615.15151515152,
                 "y":1118.18181818182
                }, 
                {
                 "height":21.2121212121212,
                 "id":169,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":96.969696969697,
                 "x":2615.15151515152,
                 "y":1096.9696969697
                }, 
                {
                 "height":472.727272727273,
                 "id":170,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":21.2121212121215,
                 "x":2721.21212121212,
                 "y":600
                }, 
                {
                 "height":30.3030303030303,
                 "id":171,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":21.212121212121,
                 "x":2706.06060606061,
                 "y":1072.72727272727
                }, 
                {
                 "height":266.666666666667,
                 "id":172,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":15.151515151515,
                 "x":2648.48484848485,
                 "y":548.484848484848
                }, 
                {
                 "height":57.5757575757576,
                 "id":173,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":133.333333333333,
                 "x":2436.36363636364,
                 "y":890.909090909091
                }, 
                {
                 "height":42.4242424242424,
                 "id":174,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":24.2424242424245,
                 "x":2575.75757575758,
                 "y":924.242424242424
                }, 
                {
                 "height":54.5454545454546,
                 "id":175,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30.3030303030305,
                 "x":2403.0303030303,
                 "y":915.151515151515
                }, 
                {
                 "height":51.5151515151516,
                 "id":176,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36.3636363636365,
                 "x":2066.66666666667,
                 "y":993.939393939394
                }, 
                {
                 "height":75.7575757575758,
                 "id":177,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":145.454545454545,
                 "x":2093.93939393939,
                 "y":969.69696969697
                }, 
                {
                 "height":33.3333333333334,
                 "id":178,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":45.454545454545,
                 "x":2227.27272727273,
                 "y":1009.09090909091
                }, 
                {
                 "height":39.3939393939394,
                 "id":179,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":51.5151515151515,
                 "x":1548.48484848485,
                 "y":912.121212121212
                }, 
                {
                 "height":309.090909090909,
                 "id":180,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":18.1818181818182,
                 "x":1500,
                 "y":527.272727272727
                }, 
                {
                 "height":42.4242424242424,
                 "id":181,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":57.5757575757577,
                 "x":1581.81818181818,
                 "y":884.848484848485
                }, 
                {
                 "height":60.6060606060606,
                 "id":182,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":100,
                 "x":1642.42424242424,
                 "y":872.727272727273
                }, 
                {
                 "height":36.3636363636364,
                 "id":183,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36.3636363636363,
                 "x":1724.24242424242,
                 "y":918.181818181818
                }, 
                {
                 "height":36.3636363636364,
                 "id":184,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":136.363636363636,
                 "x":1590.90909090909,
                 "y":918.181818181818
                }, 
                {
                 "height":18.1818181818182,
                 "id":185,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36.3636363636365,
                 "x":1412.12121212121,
                 "y":593.939393939394
                }, 
                {
                 "height":12.1212121212121,
                 "id":186,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":48.4848484848485,
                 "x":1463.63636363636,
                 "y":560.606060606061
                }, 
                {
                 "height":36.3636363636364,
                 "id":187,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":15.151515151515,
                 "x":1442.42424242424,
                 "y":563.636363636364
                }, 
                {
                 "height":60.6060606060606,
                 "id":188,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":24.242424242424,
                 "x":2296.9696969697,
                 "y":751.515151515152
                }, 
                {
                 "height":42.4242424242425,
                 "id":189,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":136.363636363636,
                 "x":2333.33333333333,
                 "y":727.272727272727
                }, 
                {
                 "height":39.3939393939394,
                 "id":190,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":42.4242424242425,
                 "x":2457.57575757576,
                 "y":763.636363636364
                }, 
                {
                 "height":30.3030303030303,
                 "id":191,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":160.606060606061,
                 "x":2315.15151515152,
                 "y":760.606060606061
                }, 
                {
                 "height":18.1818181818181,
                 "id":192,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":27.2727272727273,
                 "x":1506.06060606061,
                 "y":500
                }, 
                {
                 "height":21.2121212121212,
                 "id":193,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":42.4242424242425,
                 "x":1533.33333333333,
                 "y":478.787878787879
                }, 
                {
                 "height":181.818181818182,
                 "id":194,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":24.2424242424242,
                 "x":1569.69696969697,
                 "y":490.909090909091
                }, 
                {
                 "height":51.5151515151515,
                 "id":195,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":339.393939393939,
                 "x":1712.12121212121,
                 "y":418.181818181818
                }, 
                {
                 "height":69.6969696969697,
                 "id":196,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36.3636363636363,
                 "x":1766.66666666667,
                 "y":348.484848484848
                }, 
                {
                 "height":69.6969696969697,
                 "id":197,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":51.5151515151515,
                 "x":1921.21212121212,
                 "y":348.484848484848
                }, 
                {
                 "height":21.2121212121212,
                 "id":198,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":45.4545454545455,
                 "x":1975.75757575758,
                 "y":393.939393939394
                }, 
                {
                 "height":12.1212121212121,
                 "id":199,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":48.4848484848485,
                 "x":1745.45454545455,
                 "y":403.030303030303
                }, 
                {
                 "height":93.9393939393939,
                 "id":200,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":157.575757575758,
                 "x":1793.93939393939,
                 "y":312.121212121212
                }, 
                {
                 "height":18.1818181818182,
                 "id":201,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":63.6363636363637,
                 "x":1854.54545454545,
                 "y":303.030303030303
                }, 
                {
                 "height":36.3636363636363,
                 "id":202,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":193.939393939394,
                 "x":1951.51515151515,
                 "y":260.606060606061
                }, 
                {
                 "height":51.5151515151515,
                 "id":203,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":306.060606060606,
                 "x":2190.90909090909,
                 "y":324.242424242424
                }, 
                {
                 "height":72.7272727272727,
                 "id":204,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":42.4242424242425,
                 "x":2490.90909090909,
                 "y":342.424242424242
                }, 
                {
                 "height":24.2424242424242,
                 "id":206,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":81.8181818181815,
                 "x":2139.39393939394,
                 "y":230.30303030303
                }, 
                {
                 "height":18.1818181818182,
                 "id":207,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":27.2727272727275,
                 "x":2221.21212121212,
                 "y":257.575757575758
                }, 
                {
                 "height":15.1515151515151,
                 "id":208,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":54.5454545454545,
                 "x":2248.48484848485,
                 "y":278.787878787879
                }, 
                {
                 "height":18.1818181818182,
                 "id":209,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":21.212121212121,
                 "x":2530.30303030303,
                 "y":409.090909090909
                }, 
                {
                 "height":42.4242424242424,
                 "id":210,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":15.151515151515,
                 "x":2548.48484848485,
                 "y":418.181818181818
                }, 
                {
                 "height":21.2121212121212,
                 "id":211,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36.3636363636365,
                 "x":2554.54545454545,
                 "y":460.606060606061
                }, 
                {
                 "height":15.1515151515151,
                 "id":212,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":42.4242424242425,
                 "x":2593.93939393939,
                 "y":481.818181818182
                }, 
                {
                 "height":27.2727272727273,
                 "id":213,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":33.3333333333335,
                 "x":2618.18181818182,
                 "y":496.969696969697
                }, 
                {
                 "height":21.2121212121211,
                 "id":214,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":24.242424242424,
                 "x":2636.36363636364,
                 "y":521.212121212121
                }, 
                {
                 "height":45.4545454545454,
                 "id":215,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":15.151515151515,
                 "x":1572.72727272727,
                 "y":430.30303030303
                }, 
                {
                 "height":18.1818181818182,
                 "id":216,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":57.5757575757577,
                 "x":1584.84848484848,
                 "y":412.121212121212
                }, 
                {
                 "height":12.1212121212121,
                 "id":217,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":60.6060606060605,
                 "x":1621.21212121212,
                 "y":396.969696969697
                }, 
                {
                 "height":33.3333333333333,
                 "id":218,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":12.1212121212122,
                 "x":1678.78787878788,
                 "y":369.69696969697
                }, 
                {
                 "height":21.2121212121212,
                 "id":219,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":78.787878787879,
                 "x":1687.87878787879,
                 "y":348.484848484848
                }, 
                {
                 "height":36.3636363636364,
                 "id":220,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":24.2424242424242,
                 "x":1881.81818181818,
                 "y":275.757575757576
                }, 
                {
                 "height":15.1515151515152,
                 "id":221,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":60.6060606060605,
                 "x":1896.9696969697,
                 "y":263.636363636364
                }, 
                {
                 "height":57.5757575757577,
                 "id":226,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":118.181818181818,
                 "x":1663.63636363636,
                 "y":1960.60606060606
                }, 
                {
                 "height":30.3030303030305,
                 "id":227,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":81.818181818182,
                 "x":1884.84848484848,
                 "y":2090.90909090909
                }, 
                {
                 "height":54.5454545454545,
                 "id":228,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":109.090909090909,
                 "x":2151.51515151515,
                 "y":2369.69696969697
                }, 
                {
                 "height":12.1212121212125,
                 "id":237,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30.3030303030305,
                 "x":2112.12121212121,
                 "y":2269.69696969697
                }, 
                {
                 "height":27.272727272727,
                 "id":238,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":21.212121212121,
                 "x":2142.42424242424,
                 "y":2278.78787878788
                }, 
                {
                 "height":63.6363636363635,
                 "id":243,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":78.787878787879,
                 "x":2215.15151515152,
                 "y":1681.81818181818
                }, 
                {
                 "height":57.5757575757577,
                 "id":248,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":96.969696969697,
                 "x":2190.90909090909,
                 "y":1536.36363636364
                }, 
                {
                 "height":63.6363636363637,
                 "id":250,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":90.9090909090908,
                 "x":1490.90909090909,
                 "y":1863.63636363636
                }, 
                {
                 "height":57.5757575757577,
                 "id":253,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":75.7575757575758,
                 "x":1600,
                 "y":1381.81818181818
                }, 
                {
                 "height":48.4848484848485,
                 "id":259,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":172.727272727273,
                 "x":1745.45454545455,
                 "y":1669.69696969697
                }, 
                {
                 "height":57.5757575757575,
                 "id":260,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30.3030303030303,
                 "x":1918.18181818182,
                 "y":1621.21212121212
                }, 
                {
                 "height":48.4848484848485,
                 "id":264,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":18.1818181818185,
                 "x":2069.69696969697,
                 "y":1790.90909090909
                }, 
                {
                 "height":93.9393939393938,
                 "id":266,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":66.6666666666667,
                 "x":1693.93939393939,
                 "y":1978.78787878788
                }, 
                {
                 "height":130.30303030303,
                 "id":267,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":39.3939393939395,
                 "x":1484.84848484848,
                 "y":2306.06060606061
                }, 
                {
                 "height":33.333333333333,
                 "id":271,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":24.2424242424242,
                 "x":1536.36363636364,
                 "y":2330.30303030303
                }, 
                {
                 "height":21.2121212121215,
                 "id":272,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":51.5151515151515,
                 "x":1557.57575757576,
                 "y":2318.18181818182
                }, 
                {
                 "height":39.3939393939395,
                 "id":277,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":106.060606060606,
                 "x":1066.66666666667,
                 "y":1351.51515151515
                }, 
                {
                 "height":30.3030303030303,
                 "id":282,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":51.515151515152,
                 "x":2518.18181818182,
                 "y":263.636363636364
                }, 
                {
                 "height":69.6969696969697,
                 "id":285,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":57.5757575757575,
                 "x":3096.9696969697,
                 "y":1033.33333333333
                }, 
                {
                 "height":257.575757575758,
                 "id":291,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":63.636363636364,
                 "x":3269.69696969697,
                 "y":1090.90909090909
                }, 
                {
                 "height":63.6363636363635,
                 "id":293,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":130.30303030303,
                 "x":3318.18181818182,
                 "y":996.969696969697
                }, 
                {
                 "height":266.666666666667,
                 "id":294,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":393.939393939394,
                 "x":3321.21212121212,
                 "y":1115.15151515152
                }, 
                {
                 "height":93.939393939394,
                 "id":296,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":318.181818181818,
                 "x":3578.78787878788,
                 "y":1060.60606060606
                }, 
                {
                 "height":251.515151515152,
                 "id":297,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":381.818181818182,
                 "x":3706.06060606061,
                 "y":1151.51515151515
                }, 
                {
                 "height":321.212121212121,
                 "id":303,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":75.757575757576,
                 "x":4084.84848484848,
                 "y":1169.69696969697
                }, 
                {
                 "height":124.242424242424,
                 "id":304,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":190.909090909091,
                 "x":3872.72727272727,
                 "y":1363.63636363636
                }, 
                {
                 "height":115.151515151515,
                 "id":305,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":157.575757575758,
                 "x":4000,
                 "y":1451.51515151515
                }, 
                {
                 "height":327.272727272727,
                 "id":307,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":181.818181818181,
                 "x":3969.69696969697,
                 "y":424.242424242424
                }, 
                {
                 "height":63.6363636363637,
                 "id":308,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":157.575757575758,
                 "x":4009.09090909091,
                 "y":396.969696969697
                }, 
                {
                 "height":24.2424242424242,
                 "id":313,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":127.272727272727,
                 "x":3642.42424242424,
                 "y":466.666666666667
                }, 
                {
                 "height":42.4242424242424,
                 "id":314,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":136.363636363636,
                 "x":3566.66666666667,
                 "y":309.090909090909
                }, 
                {
                 "height":45.4545454545454,
                 "id":315,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":296.969696969697,
                 "x":3487.87878787879,
                 "y":345.454545454545
                }, 
                {
                 "height":0,
                 "id":316,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":0,
                 "x":3751.51515151515,
                 "y":369.69696969697
                }, 
                {
                 "height":87.8787878787879,
                 "id":318,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":287.878787878788,
                 "x":3466.66666666667,
                 "y":372.727272727273
                }, 
                {
                 "height":54.5454545454546,
                 "id":319,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":187.878787878788,
                 "x":3327.27272727273,
                 "y":493.939393939394
                }, 
                {
                 "height":27.2727272727273,
                 "id":320,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":103.030303030303,
                 "x":3357.57575757576,
                 "y":472.727272727273
                }, 
                {
                 "height":0,
                 "id":322,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":12.1212121212125,
                 "x":3866.66666666667,
                 "y":651.515151515152
                }, 
                {
                 "height":15.1515151515151,
                 "id":324,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":100,
                 "x":3848.48484848485,
                 "y":466.666666666667
                }, 
                {
                 "height":421.212121212121,
                 "id":325,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":278.787878787879,
                 "x":3524.24242424242,
                 "y":354.545454545455
                }, 
                {
                 "height":33.3333333333333,
                 "id":326,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":154.545454545455,
                 "x":4042.42424242424,
                 "y":748.484848484848
                }, 
                {
                 "height":96.969696969697,
                 "id":327,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":227.272727272727,
                 "x":3306.06060606061,
                 "y":681.818181818182
                }, 
                {
                 "height":51.5151515151515,
                 "id":329,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":112.121212121212,
                 "x":3203.0303030303,
                 "y":633.333333333333
                }, 
                {
                 "height":42.4242424242424,
                 "id":330,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":96.969696969697,
                 "x":3112.12121212121,
                 "y":596.969696969697
                }, 
                {
                 "height":33.3333333333334,
                 "id":331,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":81.8181818181815,
                 "x":3045.45454545455,
                 "y":566.666666666667
                }, 
                {
                 "height":42.4242424242425,
                 "id":332,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":93.939393939394,
                 "x":2969.69696969697,
                 "y":527.272727272727
                }, 
                {
                 "height":30.3030303030303,
                 "id":333,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":81.8181818181815,
                 "x":2893.93939393939,
                 "y":500
                }, 
                {
                 "height":33.3333333333333,
                 "id":334,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":81.8181818181815,
                 "x":2839.39393939394,
                 "y":469.69696969697
                }, 
                {
                 "height":48.4848484848485,
                 "id":335,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":63.6363636363635,
                 "x":2790.90909090909,
                 "y":424.242424242424
                }, 
                {
                 "height":206.060606060606,
                 "id":336,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":27.2727272727275,
                 "x":2775.75757575758,
                 "y":248.484848484848
                }, 
                {
                 "height":130.30303030303,
                 "id":337,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":24.2424242424245,
                 "x":3121.21212121212,
                 "y":-3.03030303030303
                }, 
                {
                 "height":27.2727272727273,
                 "id":338,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":190.909090909091,
                 "x":3127.27272727273,
                 "y":293.939393939394
                }, 
                {
                 "height":36.3636363636364,
                 "id":342,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":33.3333333333335,
                 "x":3345.45454545455,
                 "y":339.393939393939
                }, 
                {
                 "height":54.5454545454546,
                 "id":343,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":39.3939393939395,
                 "x":3360.60606060606,
                 "y":351.515151515152
                }, 
                {
                 "height":42.4242424242424,
                 "id":344,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":90.909090909091,
                 "x":3375.75757575758,
                 "y":387.878787878788
                }, 
                {
                 "height":93.939393939394,
                 "id":347,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":45.454545454545,
                 "x":2978.78787878788,
                 "y":1327.27272727273
                }, 
                {
                 "height":33.3333333333333,
                 "id":348,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":75.757575757576,
                 "x":2906.06060606061,
                 "y":1293.93939393939
                }, 
                {
                 "height":424.242424242424,
                 "id":351,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":24.242424242424,
                 "x":2696.9696969697,
                 "y":1881.81818181818
                }, 
                {
                 "height":21.212121212121,
                 "id":352,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":66.666666666667,
                 "x":2712.12121212121,
                 "y":2303.0303030303
                }, 
                {
                 "height":39.3939393939395,
                 "id":353,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":81.8181818181815,
                 "x":2781.81818181818,
                 "y":2321.21212121212
                }, 
                {
                 "height":48.4848484848485,
                 "id":354,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":57.5757575757575,
                 "x":2854.54545454545,
                 "y":2339.39393939394
                }, 
                {
                 "height":30.3030303030305,
                 "id":355,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":60.6060606060605,
                 "x":2896.9696969697,
                 "y":2369.69696969697
                }, 
                {
                 "height":39.3939393939395,
                 "id":356,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":84.848484848485,
                 "x":2954.54545454545,
                 "y":2400
                }, 
                {
                 "height":27.2727272727275,
                 "id":357,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":633.333333333333,
                 "x":3033.33333333333,
                 "y":2454.54545454545
                }, 
                {
                 "height":30.30303030303,
                 "id":358,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36.3636363636365,
                 "x":3660.60606060606,
                 "y":2439.39393939394
                }, 
                {
                 "height":21.2121212121212,
                 "id":359,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":45.4545454545455,
                 "x":2724.24242424242,
                 "y":1854.54545454545
                }, 
                {
                 "height":15.1515151515152,
                 "id":360,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":45.4545454545455,
                 "x":2766.66666666667,
                 "y":1833.33333333333
                }, 
                {
                 "height":15.1515151515152,
                 "id":361,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":39.3939393939395,
                 "x":2812.12121212121,
                 "y":1812.12121212121
                }, 
                {
                 "height":21.2121212121212,
                 "id":362,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":63.6363636363635,
                 "x":2845.45454545455,
                 "y":1793.93939393939
                }, 
                {
                 "height":115.151515151515,
                 "id":363,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":39.3939393939395,
                 "x":2896.9696969697,
                 "y":1684.84848484848
                }, 
                {
                 "height":24.2424242424242,
                 "id":364,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":21.2121212121215,
                 "x":2915.15151515152,
                 "y":1654.54545454545
                }, 
                {
                 "height":21.2121212121212,
                 "id":365,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":236.363636363636,
                 "x":2945.45454545455,
                 "y":1630.30303030303
                }, 
                {
                 "height":15.151515151515,
                 "id":366,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36.3636363636365,
                 "x":2969.69696969697,
                 "y":1621.21212121212
                }, 
                {
                 "height":24.2424242424242,
                 "id":367,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":27.2727272727275,
                 "x":3024.24242424242,
                 "y":1596.9696969697
                }, 
                {
                 "height":21.2121212121212,
                 "id":368,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":90.909090909091,
                 "x":3157.57575757576,
                 "y":1627.27272727273
                }, 
                {
                 "height":30.3030303030303,
                 "id":369,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":45.4545454545455,
                 "x":3142.42424242424,
                 "y":1606.06060606061
                }, 
                {
                 "height":30.3030303030303,
                 "id":375,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":12.1212121212125,
                 "x":3472.72727272727,
                 "y":1603.0303030303
                }, 
                {
                 "height":21.2121212121212,
                 "id":376,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":251.515151515152,
                 "x":3296.9696969697,
                 "y":1624.24242424242
                },
            
                {
                 "height":27.2727272727273,
                 "id":377,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":36.3636363636365,
                 "x":3548.48484848485,
                 "y":1645.45454545455
                }, 
                {
                 "height":27.2727272727273,
                 "id":378,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":51.5151515151515,
                 "x":3590.90909090909,
                 "y":1672.72727272727
                }, 
                {
                 "height":75.7575757575758,
                 "id":379,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":51.5151515151515,
                 "x":3642.42424242424,
                 "y":1693.93939393939
                }, 
                {
                 "height":33.3333333333333,
                 "id":380,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":163.636363636364,
                 "x":3681.81818181818,
                 "y":1766.66666666667
                }, 
                {
                 "height":30.3030303030305,
                 "id":381,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":93.9393939393935,
                 "x":3681.81818181818,
                 "y":2403.0303030303
                }, 
                {
                 "height":33.333333333333,
                 "id":382,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":90.909090909091,
                 "x":3763.63636363636,
                 "y":2372.72727272727
                }, 
                {
                 "height":533.333333333333,
                 "id":383,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":33.3333333333335,
                 "x":3890.90909090909,
                 "y":1818.18181818182
                }, 
                {
                 "height":84.848484848485,
                 "id":384,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":378.787878787879,
                 "x":2772.72727272727,
                 "y":2312.12121212121
                }, 
                {
                 "height":90.9090909090905,
                 "id":385,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":296.969696969697,
                 "x":2884.84848484848,
                 "y":2381.81818181818
                }, 
                {
                 "height":15.151515151515,
                 "id":386,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":745.454545454545,
                 "x":3109.09090909091,
                 "y":2460.60606060606
                }, 
                {
                 "height":33.3333,
                 "id":387,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":39.3935151515157,
                 "x":3853.03051515151,
                 "y":1801.51516818182
                }, 
                {
                 "height":33.3333,
                 "id":388,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":90.9091,
                 "x":3821.21211666667,
                 "y":2340.90910757576
                }, 
                {
                 "height":115.151909090909,
                 "id":389,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":27.2727,
                 "x":2783.3333469697,
                 "y":3.03010606060606
                }, 
                {
                 "height":130.303,
                 "id":390,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":24.2424,
                 "x":3127.27273939394,
                 "y":250.000015151515
                }, 
                {
                 "height":42.4242,
                 "id":391,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":287.878793939394,
                 "x":2822.72726969697,
                 "y":81.818203030303
                }, 
                {
                 "height":42.4242,
                 "id":392,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":287.879,
                 "x":2825.75746969697,
                 "y":233.333354545455
                }, 
                {
                 "height":63.6364,
                 "id":393,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":78.7879,
                 "x":2796.96968636364,
                 "y":1525.75755757576
                }],
         "opacity":1,
         "type":"objectgroup",
         "visible":true,
         "x":0,
         "y":0
        }, 
        {
         "id":8,
         "image":"..\/foregrounds\/shadyGroveforeground.png",
         "imageheight":2561,
         "imagewidth":4160,
         "name":"shadyGroveforeground",
         "opacity":1,
         "type":"imagelayer",
         "visible":true,
         "x":0,
         "y":0
        }],
 "nextlayerid":9,
 "nextobjectid":394,
 "orientation":"orthogonal",
 "renderorder":"right-down",
 "tiledversion":"1.11.2",
 "tileheight":16,
 "tilesets":[],
 "tilewidth":16,
 "type":"map",
 "version":"1.10",
 "width":260
}
</file>

<file path="assets/maps/shadyGrove.json:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\maps.zip
</file>

<file path="assets/maps/villageCommons.tmj">
{ "compressionlevel":-1,
 "height":40,
 "infinite":false,
 "layers":[
        {
         "id":2,
         "image":"..\/backgrounds\/villageCommons.png",
         "imageheight":1297,
         "imagewidth":1920,
         "name":"villageCommonsbackground",
         "opacity":1,
         "type":"imagelayer",
         "visible":true,
         "x":0,
         "y":0
        }, 
        {
         "draworder":"topdown",
         "id":3,
         "name":"Object Layer 1",
         "objects":[
                {
                 "height":125.973470261018,
                 "id":1,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":479.246897732135,
                 "x":353.273427471117,
                 "y":432.691484809585
                }, 
                {
                 "height":76.6795036371416,
                 "id":2,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":13.6927685066324,
                 "x":588.789045785195,
                 "y":679.161317928969
                }, 
                {
                 "height":73.9409499358151,
                 "id":3,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":27.3855370132649,
                 "x":561.40350877193,
                 "y":690.115532734275
                }, 
                {
                 "height":62.9867351305091,
                 "id":4,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":27.3855370132649,
                 "x":539.495079161318,
                 "y":706.546854942234
                }, 
                {
                 "height":73.9409499358151,
                 "id":5,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":13.6927685066324,
                 "x":616.174582798459,
                 "y":690.115532734275
                }, 
                {
                 "height":76.6795036371417,
                 "id":6,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":5.47710740265302,
                 "x":640.821566110398,
                 "y":695.592640136928
                }, 
                {
                 "height":27.3855370132649,
                 "id":7,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":73.9409499358151,
                 "x":566.880616174583,
                 "y":772.272143774069
                }, 
                {
                 "height":243.731279418057,
                 "id":8,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":375.181857081729,
                 "x":1070.77449721866,
                 "y":564.142062473256
                }, 
                {
                 "height":68.4638425331622,
                 "id":9,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":68.4638425331621,
                 "x":1185.79375267437,
                 "y":531.279418057338
                }, 
                {
                 "height":84.8951647411211,
                 "id":10,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":57.5096277278562,
                 "x":1243.30338040223,
                 "y":495.678219940094
                }, 
                {
                 "height":68.4638425331622,
                 "id":11,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":65.7252888318358,
                 "x":1311.76722293539,
                 "y":512.109542148053
                }, 
                {
                 "height":41.0783055198973,
                 "id":12,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":35.6011981172442,
                 "x":1385.7081728712,
                 "y":542.233632862644
                }, 
                {
                 "height":153.359007274283,
                 "id":13,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":24.6469833119384,
                 "x":1451.43346170304,
                 "y":577.834830979889
                }, 
                {
                 "height":32.8626444159179,
                 "id":14,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":32.8626444159179,
                 "x":1150.19255455712,
                 "y":544.972186563971
                }, 
                {
                 "height":84.8951647411211,
                 "id":15,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":405.30594779632,
                 "x":963.970902866923,
                 "y":62.9867351305092
                }, 
                {
                 "height":76.6795036371416,
                 "id":16,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":147.88189987163,
                 "x":1098.16003423192,
                 "y":-5.47710740265297
                }, 
                {
                 "height":43.8168592212238,
                 "id":17,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30.1240907145914,
                 "x":1246.04193410355,
                 "y":16.4313222079589
                }, 
                {
                 "height":35.6011981172443,
                 "id":18,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":27.3855370132649,
                 "x":1278.90457851947,
                 "y":24.6469833119384
                }, 
                {
                 "height":35.6011981172443,
                 "id":19,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30.1240907145914,
                 "x":1306.29011553273,
                 "y":32.8626444159178
                }, 
                {
                 "height":43.8168592212238,
                 "id":20,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":46.5554129225502,
                 "x":1068.03594351733,
                 "y":16.4313222079589
                }, 
                {
                 "height":46.5554129225503,
                 "id":21,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":41.0783055198974,
                 "x":1035.17329910141,
                 "y":19.1698759092854
                }, 
                {
                 "height":32.8626444159178,
                 "id":22,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":49.2939666238767,
                 "x":1010.52631578947,
                 "y":38.3397518185708
                }, 
                {
                 "height":24.6469833119384,
                 "id":23,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":38.3397518185709,
                 "x":988.617886178862,
                 "y":46.5554129225503
                }, 
                {
                 "height":60.2481814291827,
                 "id":24,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":35.6011981172443,
                 "x":966.70945656825,
                 "y":156.09756097561
                }, 
                {
                 "height":41.0783055198973,
                 "id":25,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":35.6011981172444,
                 "x":1010.52631578947,
                 "y":158.836114676936
                }, 
                {
                 "height":27.3855370132649,
                 "id":26,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":21.9084296106121,
                 "x":1062.55883611468,
                 "y":153.359007274283
                }, 
                {
                 "height":52.0325203252033,
                 "id":27,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":71.2023962344888,
                 "x":1256.99614890886,
                 "y":136.927685066324
                }, 
                {
                 "height":82.1566110397946,
                 "id":28,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":30.1240907145914,
                 "x":1333.675652546,
                 "y":156.09756097561
                }, 
                {
                 "height":104.065040650407,
                 "id":29,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":19.1698759092855,
                 "x":996.833547282841,
                 "y":227.299957210098
                }, 
                {
                 "height":104.065040650406,
                 "id":30,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":35.6011981172444,
                 "x":1306.29011553273,
                 "y":224.561403508772
                }, 
                {
                 "height":375.181857081729,
                 "id":31,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":167.051775780916,
                 "x":1555.49850235344,
                 "y":68.4638425331622
                }, 
                {
                 "height":68.4638425331622,
                 "id":32,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":95.849379546427,
                 "x":262.901155327343,
                 "y":84.8951647411211
                }, 
                {
                 "height":76.6795036371416,
                 "id":33,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":65.7252888318357,
                 "x":673.684210526316,
                 "y":167.051775780916
                }, 
                {
                 "height":79.4180573384681,
                 "id":34,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":109.542148053059,
                 "x":1054.3431750107,
                 "y":821.566110397946
                }, 
                {
                 "height":43.8168592212237,
                 "id":35,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":43.8168592212238,
                 "x":57.5096277278562,
                 "y":1136.49978605049
                }, 
                {
                 "height":54.7710740265297,
                 "id":36,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":68.4638425331623,
                 "x":1758.1514762516,
                 "y":514.84809584938
                }, 
                {
                 "height":90.3722721437741,
                 "id":37,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":120.496362858366,
                 "x":1728.02738553701,
                 "y":487.462558836115
                }, 
                {
                 "height":49.2939666238768,
                 "id":38,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":82.1566110397946,
                 "x":1350.10697475396,
                 "y":345.057766367137
                }, 
                {
                 "height":68.4638425331622,
                 "id":39,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":112.280701754386,
                 "x":1336.41420624733,
                 "y":331.364997860505
                }],
         "opacity":1,
         "type":"objectgroup",
         "visible":true,
         "x":0,
         "y":0
        }, 
        {
         "draworder":"topdown",
         "id":4,
         "name":"interactions",
         "objects":[
                {
                 "height":68.4638425331621,
                 "id":40,
                 "name":"trading_post",
                 "properties":[
                        {
                         "name":"interaction = \"true\"",
                         "type":"string",
                         "value":""
                        }],
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":71.2023962344887,
                 "x":690.115532734275,
                 "y":238.254172015404
                }, 
                {
                 "height":84.8951647411211,
                 "id":41,
                 "name":"crafting_workshop",
                 "properties":[
                        {
                         "name":"interaction = \"true\"",
                         "type":"string",
                         "value":""
                        }],
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":136.927685066324,
                 "x":1106.3756953359,
                 "y":271.116816431322
                }, 
                {
                 "height":84.8951647411211,
                 "id":42,
                 "name":"liquidity_bank",
                 "properties":[
                        {
                         "name":"interaction = \"true\"",
                         "type":"string",
                         "value":""
                        }],
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":169.790329482242,
                 "x":1199.486521181,
                 "y":807.873341891314
                }, 
                {
                 "height":104.065040650407,
                 "id":43,
                 "name":"merchant_quarter",
                 "properties":[
                        {
                         "name":"interaction = \"true\"",
                         "type":"string",
                         "value":""
                        }],
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":131.450577663671,
                 "x":254.685494223363,
                 "y":93.1108258451005
                }, 
                {
                 "height":95.849379546427,
                 "id":44,
                 "name":"royal_market",
                 "properties":[
                        {
                         "name":"interaction = \"true\"",
                         "type":"string",
                         "value":""
                        }],
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":238.254172015404,
                 "x":481.985451433462,
                 "y":514.84809584938
                }, 
                {
                 "height":112.280701754386,
                 "id":45,
                 "name":"tinkerers_lab",
                 "properties":[
                        {
                         "name":"interaction = \"true\"",
                         "type":"string",
                         "value":""
                        }],
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":125.973470261018,
                 "x":1577.40693196406,
                 "y":424.475823705605
                }],
         "opacity":1,
         "type":"objectgroup",
         "visible":true,
         "x":0,
         "y":0
        }],
 "nextlayerid":5,
 "nextobjectid":47,
 "orientation":"orthogonal",
 "renderorder":"right-down",
 "tiledversion":"1.11.1",
 "tileheight":32,
 "tilesets":[],
 "tilewidth":32,
 "type":"map",
 "version":"1.10",
 "width":60
}
</file>

<file path="assets/maps/villageCommonsMap.json">
{ "compressionlevel":-1,
 "editorsettings":
    {
     "export":
        {
         "format":"json",
         "target":"C:\/Users\/reggi\/OneDrive\/Desktop\/villageCommonsMap.json"
        }
    },
 "height":40,
 "infinite":false,
 "layers":[
        {
         "id":2,
         "image":"..\/backgrounds\/villageCommons.png",
         "imageheight":1297,
         "imagewidth":1920,
         "name":"villageCommonsbackground",
         "opacity":1,
         "type":"imagelayer",
         "visible":true,
         "x":0,
         "y":0
        }, 
        {
         "draworder":"topdown",
         "id":3,
         "name":"Object Layer 1",
         "objects":[
                {
                 "height":51.4056,
                 "id":75,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":432.889,
                 "x":-459.94540502008,
                 "y":1078.16691726908
                }, 
                {
                 "height":213.739,
                 "id":76,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":13.5278,
                 "x":165.03959497992,
                 "y":645.277717269076
                }, 
                {
                 "height":216.445,
                 "id":77,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":45.9945,
                 "x":446.41959497992,
                 "y":612.811017269076
                }, 
                {
                 "height":35.1723,
                 "id":78,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":238.089,
                 "x":202.91959497992,
                 "y":753.499917269076
                }, 
                {
                 "height":89.2834,
                 "id":79,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":362.545,
                 "x":137.98359497992,
                 "y":615.516517269076
                }, 
                {
                 "height":289.495,
                 "id":80,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":137.984,
                 "x":722.37959497992,
                 "y":680.449917269076
                }, 
                {
                 "height":219.15,
                 "id":81,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":367.956,
                 "x":240.78959497992,
                 "y":1145.80591726908
                }, 
                {
                 "height":89.2834,
                 "id":82,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":73.0501,
                 "x":-284.08440502008,
                 "y":1270.26191726908
                }, 
                {
                 "height":86.5779,
                 "id":83,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":459.945,
                 "x":-481.59040502008,
                 "y":999.705917269076
                }, 
                {
                 "height":64.9334,
                 "id":84,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":105.517,
                 "x":489.70959497992,
                 "y":896.894917269076
                }, 
                {
                 "height":59.5223,
                 "id":85,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":102.811,
                 "x":890.12959497992,
                 "y":1061.93391726908
                }, 
                {
                 "height":67.639,
                 "id":86,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":110.928,
                 "x":202.91959497992,
                 "y":1392.01191726908
                }, 
                {
                 "height":56.8167,
                 "id":87,
                 "name":"",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":45.9945,
                 "x":-787.31810502008,
                 "y":1695.03091726908
                }],
         "offsetx":841.42887338829,
         "offsety":-557.345170154302,
         "opacity":1,
         "type":"objectgroup",
         "visible":true,
         "x":0,
         "y":0
        }, 
        {
         "draworder":"topdown",
         "id":4,
         "name":"interactions",
         "objects":[
                {
                 "height":68.46,
                 "id":40,
                 "name":"trading_post",
                 "properties":[
                        {
                         "name":"interaction",
                         "type":"bool",
                         "value":true
                        }],
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":71.2,
                 "x":690.11,
                 "y":238.25
                }, 
                {
                 "height":84.89,
                 "id":41,
                 "name":"crafting_workshop",
                 "properties":[
                        {
                         "name":"interaction",
                         "type":"bool",
                         "value":true
                        }],
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":136.92,
                 "x":1106.37,
                 "y":271.11
                }, 
                {
                 "height":84.89,
                 "id":42,
                 "name":"liquidity_bank",
                 "properties":[
                        {
                         "name":"interaction",
                         "type":"bool",
                         "value":true
                        }],
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":169.79,
                 "x":1199.48,
                 "y":807.87
                }, 
                {
                 "height":104.06,
                 "id":43,
                 "name":"merchant_quarter",
                 "properties":[
                        {
                         "name":"interaction",
                         "type":"bool",
                         "value":true
                        }],
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":131.45,
                 "x":254.68,
                 "y":93.11
                }, 
                {
                 "height":95.84,
                 "id":44,
                 "name":"royal_market",
                 "properties":[
                        {
                         "name":"interaction",
                         "type":"bool",
                         "value":true
                        }],
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":238.25,
                 "x":481.98,
                 "y":514.84
                }, 
                {
                 "height":112.28,
                 "id":45,
                 "name":"tinkerers_lab",
                 "properties":[
                        {
                         "name":"interaction",
                         "type":"bool",
                         "value":true
                        }],
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":125.97,
                 "x":1577.4,
                 "y":424.47
                }, 
                {
                 "height":167.744662861974,
                 "id":60,
                 "name":"scavenger_mode",
                 "rotation":0,
                 "type":"",
                 "visible":true,
                 "width":254.32255337138,
                 "x":830.606637074614,
                 "y":1149.86260832805
                }],
         "opacity":1,
         "type":"objectgroup",
         "visible":true,
         "x":0,
         "y":0
        }],
 "nextlayerid":5,
 "nextobjectid":88,
 "orientation":"orthogonal",
 "renderorder":"right-down",
 "tiledversion":"1.11.1",
 "tileheight":32,
 "tilesets":[],
 "tilewidth":32,
 "type":"map",
 "version":"1.10",
 "width":60
}
</file>

<file path="assets/menu/frame_000_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_001_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_002_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_003_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_004_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_005_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_006_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_007_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_008_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_009_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_010_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_011_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_012_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_013_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_014_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_015_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_016_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_017_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_018_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_019_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_020_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_021_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_022_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_023_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_024_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_025_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_026_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_027_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_028_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_029_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_030_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_031_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_032_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_033_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_034_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_035_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_036_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_037_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_038_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_039_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_040_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_041_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_042_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_043_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_044_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_045_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_046_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_047_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_048_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_049_delay-0.15s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_050_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_051_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_052_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_053_delay-0.15s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_054_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_055_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_056_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_057_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_058_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_059_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_060_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_061_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_062_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_063_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_064_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_065_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_066_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_067_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_068_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_069_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_070_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_071_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_072_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_073_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_074_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_075_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_076_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_077_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_078_delay-0.15s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_079_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_080_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_081_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_082_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_083_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_084_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_085_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_086_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_087_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_088_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_089_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_090_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_091_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_092_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_093_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_094_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_095_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_096_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_097_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_098_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_099_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_100_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_101_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_102_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_103_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_104_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_105_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_106_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_107_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_108_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_109_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_110_delay-0.05s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_111_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/menu/frame_112_delay-0.1s.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\ezgif-split.zip
</file>

<file path="assets/sprites/crate.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://pixlr.com/editor/
HostUrl=https://pixlr.com/editor/
</file>

<file path="assets/sprites/exclamation.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://pixlr.com/editor/
HostUrl=https://pixlr.com/editor/
</file>

<file path="assets/sprites/Hickory_Attack.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\Minifantasy_Forest_Dwellers_v1.0.zip
</file>

<file path="assets/sprites/Hickory_Die.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\Minifantasy_Forest_Dwellers_v1.0.zip
</file>

<file path="assets/sprites/Hickory_Dmg.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\Minifantasy_Forest_Dwellers_v1.0.zip
</file>

<file path="assets/sprites/Hickory_Idle.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\Minifantasy_Forest_Dwellers_v1.0.zip
</file>

<file path="assets/sprites/Hickory_Walk.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=C:\Users\reggi\Downloads\Minifantasy_Forest_Dwellers_v1.0.zip
</file>

<file path="assets/tilesets/outer_grasslands_tiles.png.tsx">
<?xml version="1.0" encoding="UTF-8"?>
<tileset version="1.10" tiledversion="1.11.1" name="outer_grasslands_tiles.png" tilewidth="32" tileheight="32" tilecount="85" columns="17">
 <image source="Minifantasy_ForgottenPlainsTiles.png" width="552" height="184"/>
</tileset>
</file>

<file path="scripts/blockchain.js">
// blockchain.js
let walletPublicKey = null;

export async function connectWallet() {
  console.log("Simulated wallet connection successful.");
  walletPublicKey = "SIMULATED_WALLET";
  return Promise.resolve(walletPublicKey);
}

export async function initOnChain(scene) {
  console.log("Simulated on-chain initialization (skipped).");
  return Promise.resolve();
}

export async function depositOnChain(scene) {
  console.log("Simulated deposit on-chain.");
  alert("Deposit simulated successfully.");
  return Promise.resolve();
}

export { walletPublicKey };
</file>

<file path="scripts/contractCalls.js">
// contractCalls.js
import { addToInventory, removeFromInventory, getRandomLootForZone } from './utils.js';

export async function simulateCallMerchantListItem(scene, itemIndex, price, listing_nonce) {
  console.log("Simulated merchant_list_item call:", { itemIndex, price, listing_nonce });
  const item = scene.localInventory[itemIndex];
  scene.listedItems.push({ id: itemIndex, item: item.name, quantity: 1, price, nonce: listing_nonce });
  removeFromInventory(scene, item.name, 1);
  alert("Merchant listing created successfully (simulated).");
  return Promise.resolve();
}

// Include all other contract calls (e.g., simulateCallMerchantBuyItem, simulateCallLiquidityDeposit, etc.)
// For brevity, only one is shown; the rest follow your original logic exactly.
</file>

<file path="scripts/MainScene.js">
class MainScene extends Phaser.Scene {
  constructor() {
    super('MainScene');
  }

  preload() {
    const zoneKeys = zoneList.map(z => z.mapKey);
    zoneKeys.forEach(key => this.load.json(key, `assets/maps/${key}.json`));

    const backgroundKeys = zoneList.map(z => z.backgroundKey);
    backgroundKeys.forEach(key => this.load.image(key, `assets/backgrounds/${key}.png`));

    const foregroundKeys = zoneList.filter(z => z.foregroundKey).map(z => z.foregroundKey);
    foregroundKeys.forEach(key => this.load.image(key, `assets/foregrounds/${key}.png`));

    this.load.spritesheet("player", "assets/sprites/player.png", {
      frameWidth: 32,
      frameHeight: 32
    });

    this.load.image("exclamation", "assets/sprites/exclamation.png");

    this.load.json("narrativePrologues", "assets/data/narrativePrologues.json");
    this.load.json("narrativePrompts", "assets/data/narrativeprompt.json");
    this.load.json("lootTable", "assets/data/lootTable.json");
  }

  create() {
    const zoneData = this.scene.settings.data?.zone || zoneList.find(z => z.name === "Village");
    this.currentZone = zoneData.name;

    const existingOromozi = this.playerStats ? this.playerStats.oromozi : 1000;
    this.playerStats = this.playerStats || Utils.createInitialStats(this.currentZone, existingOromozi);
    this.localInventory = this.scene.settings.data?.inventory || [];
    this.promptCount = this.scene.settings.data?.promptCount || 0;
    this.deposits = this.deposits || [];
    this.listedItems = this.listedItems || [];
    this.tradeListings = this.tradeListings || [];
    Utils.initEquippedData(this);

    if (this.currentZone !== "Village" && !this.initialScavengerInventory) {
      this.initialScavengerInventory = JSON.parse(JSON.stringify(this.localInventory));
      console.log("Initial Scavenger Mode inventory set:", this.initialScavengerInventory);
    }

    this.background = this.add.image(0, 0, zoneData.backgroundKey).setOrigin(0, 0).setScale(SCALES.bgScale);
    this.physics.world.setBounds(0, 0, this.background.displayWidth, this.background.displayHeight);
    this.cameras.main.setBounds(0, 0, this.background.displayWidth, this.background.displayHeight);

    this.obstacles = this.physics.add.staticGroup();
    const mapData = this.cache.json.get(zoneData.mapKey);
    if (mapData && mapData.layers) {
      mapData.layers.forEach(layer => {
        if (layer.type === "objectgroup" && layer.name === "Object Layer 1") {
          layer.objects.forEach(obj => {
            const rect = this.add.rectangle(
              obj.x * SCALES.bgScale,
              obj.y * SCALES.bgScale,
              obj.width * SCALES.bgScale,
              obj.height * SCALES.bgScale,
              0xff0000,
              0
            );
            rect.setOrigin(0, 0);
            this.physics.add.existing(rect, true);
            this.obstacles.add(rect);
          });
        }
      });
    }

    this.player = this.physics.add.sprite(100 * SCALES.bgScale, 100 * SCALES.bgScale, "player");
    this.player.setScale(SCALES.playerScale * 0.5);
    this.player.setCollideWorldBounds(true);
    this.player.setDepth(2000);
    this.physics.add.collider(this.player, this.obstacles);

    this.anims.create({
      key: "walk-down",
      frames: this.anims.generateFrameNumbers("player", { start: 0, end: 5 }),
      frameRate: 10,
      repeat: -1
    });
    this.anims.create({
      key: "walk-up",
      frames: this.anims.generateFrameNumbers("player", { start: 6, end: 11 }),
      frameRate: 10,
      repeat: -1
    });
    this.anims.create({
      key: "walk-right",
      frames: this.anims.generateFrameNumbers("player", { start: 12, end: 17 }),
      frameRate: 10,
      repeat: -1
    });
    this.anims.create({
      key: "walk-left",
      frames: this.anims.generateFrameNumbers("player", { start: 18, end: 23 }),
      frameRate: 10,
      repeat: -1
    });

    this.cameras.main.startFollow(this.player);
    this.cameras.main.setZoom(2);

    // HUD and remaining code unchanged for brevity, assuming Utils is defined elsewhere
    // Add Utils.js if needed
  }

  update() {
    // Simplified update for demonstration; integrate full logic as needed
    const speed = 80;
    this.player.setVelocity(0);
    if (this.keys.left.isDown) {
      this.player.setVelocityX(-speed);
      this.player.anims.play("walk-left", true);
    } else if (this.keys.right.isDown) {
      this.player.setVelocityX(speed);
      this.player.anims.play("walk-right", true);
    } else if (this.keys.up.isDown) {
      this.player.setVelocityY(-speed);
      this.player.anims.play("walk-up", true);
    } else if (this.keys.down.isDown) {
      this.player.setVelocityY(speed);
      this.player.anims.play("walk-down", true);
    } else {
      this.player.anims.stop();
    }
  }
}
</file>

<file path="scripts/uiModules.js">
// uiModules.js
import { SCREEN_STATES } from './constants.js';
import { clearButtons, createScrollableMenu, hideDialog, showDialog, showModalOverlay, hideModalOverlay } from './narrative.js';
import { simulateCallMerchantListItem } from './contractCalls.js';

export function showMerchantQuarterOptions(scene) {
  scene.narrativeScreen = SCREEN_STATES.MERCHANT;
  showModalOverlay(scene);
  const options = [
    { label: "List Item for Sale", callback: () => { clearButtons(scene); showListItemScreen(scene); } },
    { label: "Browse Marketplace", callback: () => { clearButtons(scene); showBrowseMarketplaceScreen(scene); } },
    { label: "View My Listed Items", callback: () => { clearButtons(scene); showMyListingsScreen(scene); } },
    { label: "Back", callback: () => { clearButtons(scene); hideDialog(scene); hideModalOverlay(scene); scene.narrativeScreen = SCREEN_STATES.NONE; } }
  ];
  createScrollableMenu(scene, "Merchant Quarter Options:\nSelect an option:", options);
}

function showListItemScreen(scene) {
  const resources = scene.localInventory;
  if (!resources || resources.length === 0) {
    alert("No items available to list.");
    showMerchantQuarterOptions(scene);
    return;
  }
  clearButtons(scene);
  const options = resources.map((item, index) => ({
    label: `${item.name} x${item.quantity}`,
    callback: () => { clearButtons(scene); promptListItemDetails(scene, item, index); }
  }));
  options.push({ label: "Back", callback: () => { clearButtons(scene); showMerchantQuarterOptions(scene); } });
  createScrollableMenu(scene, "Select an item to list for sale:", options);
}

function promptListItemDetails(scene, item, index) {
  clearButtons(scene);
  hideDialog(scene);
  let priceStr = prompt(`Enter sale price for ${item.name}:`, "1000");
  let price = parseInt(priceStr, 10);
  if (isNaN(price)) {
    alert("Invalid price. Returning to item selection.");
    showListItemScreen(scene);
    return;
  }
  let nonce = Date.now() + Math.floor(Math.random() * 1000);
  showDialog(scene, `List ${item.name} for sale at ${price} OROMOZI?\nConfirm listing?`);
  const options = [
    { label: "Yes", callback: async () => { await simulateCallMerchantListItem(scene, index, price, nonce); clearButtons(scene); showMerchantQuarterOptions(scene); } },
    { label: "No", callback: () => { clearButtons(scene); showListItemScreen(scene); } }
  ];
  createButtons(scene, options);
}

// Include all other UI functions (e.g., showLiquidityPoolOptions, showRoyalMarketOptions, etc.)
</file>

<file path="fishingScene.js">
class FishingScene extends Phaser.Scene {
  constructor() {
    super('FishingScene');
    this.player = null;
    this.boat = null;
    this.lake = null;
    this.boardingBox = null;
    this.poleAttachmentBox = null;
    this.cursors = null;
    this.isInBoat = false;
    this.fishCount = { 
      boot: 0, trash: 0, cod: 0, bass: 0, catfish: 0, tuna: 0, 
      ruby: 0, diamonds: 0, gold: 0, 'crystal skull': 0
    };
    this.lastDirection = 'down';
    this.camera = null;
    this.poleSprite = null;
    this.bobberSprite = null;
    this.collisions = null;
    this.map = null;
    this.scaleFactor = 0.61;
    this.poleOffsets = {
      up: { x: -20, y: 20 },
      down: { x: -5, y: -25 },
      left: { x: -20, y: 0 },
      right: { x: -30, y: 0 }
    };
    this.poleAngles = {
      up: -45,
      down: 0,
      left: 0,
      right: 0
    };
    this.isFishing = false;
    this.currentLoot = null;
    this.narrationText = null;
    this.narrationBox = null;
    this.lastVelocityX = 0;
    this.lastVelocityY = 0;
    this.lastDirectionTime = 0;
    this.tugMeter = null;
    this.tensionMeter = null;
    this.tugValue = 50;
    this.tensionValue = 0;
    this.menuIcon = null;
    this.menuBox = null;
    this.menuHeader = null;
    this.menuOptions = null;
    this.menuVisible = false;
    this.selectedMenuIndex = 0;
    this.fishingRods = [
      { name: 'Basic Rod', difficultyReduction: 0 },
      { name: 'Good Rod', difficultyReduction: 1 },
      { name: 'Best Rod', difficultyReduction: 2 }
    ];
    this.selectedRodIndex = 0;
  }

  preload() {
    this.load.tilemapTiledJSON('fishing_map', 'assets/maps/fishing_lake.json');
    this.load.image('lake', 'assets/images/lake.png');
    this.load.image('lake_foreground', 'assets/images/lake_foreground.png');
    this.load.spritesheet('player', 'assets/images/player.png', { frameWidth: 48, frameHeight: 48, margin: 0, spacing: 0 });
    this.load.spritesheet('boat_idle', 'assets/images/boat_idle.png', { frameWidth: 163, frameHeight: 224, margin: 0, spacing: 0 });
    this.load.spritesheet('boat_moving', 'assets/images/boat_moving.png', { frameWidth: 163, frameHeight: 224, margin: 0, spacing: 0 });
    this.load.image('fishing_pole', 'assets/images/fishing_pole.png');
    this.load.image('bobber', 'assets/images/bobber.png');
    this.load.image('menu_icon', 'assets/images/menu.png');
  }

  create() {
    this.map = this.make.tilemap({ key: 'fishing_map' });

    const lakeImageLayer = this.map.images.find(layer => layer.name === 'lake');
    this.lake = this.add.image(0, 0, 'lake')
      .setOrigin(0, 0)
      .setScale(this.scaleFactor)
      .setDepth(0);

    const fgImageLayer = this.map.images.find(layer => layer.name === 'lake_foreground');
    this.add.image(0, 0, 'lake_foreground')
      .setOrigin(0, 0)
      .setScale(this.scaleFactor)
      .setDepth(3);

    this.collisions = this.physics.add.staticGroup();

    const collisionLayer = this.map.getObjectLayer('collisions');
    if (collisionLayer && collisionLayer.objects) {
      collisionLayer.objects.forEach(obj => {
        const x = obj.x * this.scaleFactor;
        const y = obj.y * this.scaleFactor;
        const width = obj.width * this.scaleFactor;
        const height = obj.height * this.scaleFactor;
        console.log(`Collision (Lake): x=${x}, y=${y}, w=${width}, h=${height}`);
        const body = this.collisions.create(x, y, null);
        body.setSize(width, height, false);
        body.setOrigin(0, 0);
        body.setVisible(false);
      });
    } else {
      console.warn("Collisions layer not found in tilemap");
    }

    this.player = this.physics.add.sprite(30, 30, 'player').setScale(2).setDepth(2);
    this.player.body.setSize(24, 24).setOffset(12, 20);
    this.anims.create({ key: 'idleDown', frames: this.anims.generateFrameNumbers('player', { start: 0, end: 5 }), frameRate: 10, repeat: -1 });
    this.anims.create({ key: 'moveRight', frames: this.anims.generateFrameNumbers('player', { start: 6, end: 11 }), frameRate: 10, repeat: -1 });
    this.anims.create({ key: 'idleUp', frames: this.anims.generateFrameNumbers('player', { start: 12, end: 17 }), frameRate: 10, repeat: -1 });
    this.anims.create({ key: 'moveDown', frames: this.anims.generateFrameNumbers('player', { start: 18, end: 23 }), frameRate: 10, repeat: -1 });
    this.anims.create({ key: 'moveLeft', frames: this.anims.generateFrameNumbers('player', { start: 24, end: 29 }), frameRate: 10, repeat: -1 });
    this.anims.create({ key: 'moveUp', frames: this.anims.generateFrameNumbers('player', { start: 30, end: 35 }), frameRate: 10, repeat: -1 });
    this.player.play('idleDown');

    const mainLake = collisionLayer.objects.find(obj => obj.id === 79);
    const lakeX = mainLake.x * this.scaleFactor;
    const lakeY = mainLake.y * this.scaleFactor;
    const lakeWidth = mainLake.width * this.scaleFactor;
    const boatStartX = lakeX + lakeWidth;
    const boatHeight = 224 * 1.0;
    const boatStartY = lakeY + boatHeight / 2;
    this.boat = this.physics.add.sprite(boatStartX, boatStartY, 'boat_idle').setScale(1.0).setOrigin(0.5, 0.5).setDepth(1);
    this.boat.body.setSize(100, 120).setOffset(31.5, 52);
    this.anims.create({ key: 'boatIdleDown', frames: this.anims.generateFrameNumbers('boat_idle', { start: 0, end: 3 }), frameRate: 5, repeat: -1 });
    this.anims.create({ key: 'boatIdleRight', frames: this.anims.generateFrameNumbers('boat_idle', { start: 4, end: 7 }), frameRate: 5, repeat: -1 });
    this.anims.create({ key: 'boatIdleLeft', frames: this.anims.generateFrameNumbers('boat_idle', { start: 8, end: 11 }), frameRate: 5, repeat: -1 });
    this.anims.create({ key: 'boatIdleUp', frames: this.anims.generateFrameNumbers('boat_idle', { start: 12, end: 15 }), frameRate: 5, repeat: -1 });
    this.anims.create({ key: 'boatMoveDown', frames: this.anims.generateFrameNumbers('boat_moving', { start: 0, end: 3 }), frameRate: 10, repeat: -1 });
    this.anims.create({ key: 'boatMoveRight', frames: this.anims.generateFrameNumbers('boat_moving', { start: 4, end: 7 }), frameRate: 10, repeat: -1 });
    this.anims.create({ key: 'boatMoveLeft', frames: this.anims.generateFrameNumbers('boat_moving', { start: 8, end: 11 }), frameRate: 10, repeat: -1 });
    this.anims.create({ key: 'boatMoveUp', frames: this.anims.generateFrameNumbers('boat_moving', { start: 12, end: 15 }), frameRate: 10, repeat: -1 });
    this.boat.play('boatIdleDown');

    const mapWidth = lakeImageLayer.imagewidth * this.scaleFactor;
    const mapHeight = lakeImageLayer.imageheight * this.scaleFactor;
    this.physics.world.setBounds(0, 0, mapWidth, mapHeight);
    this.cameras.main.setBounds(0, 0, mapWidth, mapHeight);

    this.boardingBox = this.add.rectangle(this.boat.x, this.boat.y - 70, 20, 20, 0x00ff00, 0.5).setDepth(1).setOrigin(0.5, 0.5).setScrollFactor(0);
    this.poleAttachmentBox = this.add.rectangle(this.player.x + 30, this.player.y - 10, 10, 10, 0x000000, 0).setDepth(2).setOrigin(0.5, 0.5).setScrollFactor(1);
    this.poleSprite = this.add.sprite(this.poleAttachmentBox.x + this.poleOffsets.right.x, this.poleAttachmentBox.y + this.poleOffsets.right.y, 'fishing_pole')
      .setScale(0.36).setDepth(2).setOrigin(0, 0.5);
    this.bobberSprite = this.add.sprite(0, 0, 'bobber').setScale(0.5).setDepth(2).setVisible(false);

    this.camera = this.cameras.main;
    this.camera.startFollow(this.player, true).setDeadzone(100, 100);

    this.narrationBox = this.add.rectangle(400, 50, 500, 100, 0x000000, 0.7).setOrigin(0.5).setScrollFactor(0).setDepth(4).setVisible(false);
    this.narrationText = this.add.text(400, 50, '', { fontSize: '20px', color: '#ffffff', align: 'center', wordWrap: { width: 480 } })
      .setOrigin(0.5).setScrollFactor(0).setDepth(5).setVisible(false);

    this.tugMeter = this.add.rectangle(400, 150, 200, 20, 0x00ff00).setOrigin(0.5).setScrollFactor(0).setDepth(4).setVisible(false);
    this.tensionMeter = this.add.rectangle(400, 180, 200, 20, 0xff0000).setOrigin(0.5).setScrollFactor(0).setDepth(4).setVisible(false);

    this.menuIcon = this.add.image(780, 20, 'menu_icon')
      .setOrigin(1, 0)
      .setScrollFactor(0)
      .setDepth(5)
      .setInteractive()
      .on('pointerdown', () => this.toggleMenu());

    this.menuBox = this.add.rectangle(400, 300, 300, 230, 0x000000, 0.8)
      .setOrigin(0.5)
      .setScrollFactor(0)
      .setDepth(6)
      .setVisible(false);

    this.menuHeader = this.add.text(400, 210, 'Menu (M)', { fontSize: '24px', color: '#ffffff' })
      .setOrigin(0.5)
      .setScrollFactor(0)
      .setDepth(7)
      .setVisible(false);

    this.menuOptions = [
      this.add.text(400, 240, 'Cast (Space)', { fontSize: '20px', color: '#ffffff' }).setOrigin(0.5).setScrollFactor(0).setDepth(7).setVisible(false),
      this.add.text(400, 270, 'Cancel Cast (X)', { fontSize: '20px', color: '#ffffff' }).setOrigin(0.5).setScrollFactor(0).setDepth(7).setVisible(false),
      this.add.text(400, 300, 'Enter/Exit Boat (E)', { fontSize: '20px', color: '#ffffff' }).setOrigin(0.5).setScrollFactor(0).setDepth(7).setVisible(false),
      this.add.text(400, 330, 'Choose Rod (R)', { fontSize: '20px', color: '#ffffff' }).setOrigin(0.5).setScrollFactor(0).setDepth(7).setVisible(false),
      this.add.text(400, 360, 'View Inventory (I)', { fontSize: '20px', color: '#ffffff' }).setOrigin(0.5).setScrollFactor(0).setDepth(7).setVisible(false)
    ];
    this.menuOptions[this.selectedMenuIndex].setColor('#ffff00');

    this.cursors = this.input.keyboard.addKeys({
      up: Phaser.Input.Keyboard.KeyCodes.W,
      down: Phaser.Input.Keyboard.KeyCodes.S,
      left: Phaser.Input.Keyboard.KeyCodes.A,
      right: Phaser.Input.Keyboard.KeyCodes.D,
      enterBoat: Phaser.Input.Keyboard.KeyCodes.E,
      chooseRod: Phaser.Input.Keyboard.KeyCodes.R,
      viewInventory: Phaser.Input.Keyboard.KeyCodes.I,
      cancelCast: Phaser.Input.Keyboard.KeyCodes.X,
      menu: Phaser.Input.Keyboard.KeyCodes.M,
      select: Phaser.Input.Keyboard.KeyCodes.ENTER
    });

    // Keyboard event handlers
    this.input.keyboard.on('keydown-SPACE', () => {
      if (!this.menuVisible && !this.isFishing) {
        if (this.isInBoat) {
          this.startFishingSequence(true);
        } else {
          let closestDistance = Infinity;
          this.collisions.getChildren().forEach(body => {
            const rectX = body.x;
            const rectY = body.y;
            const rectWidth = body.width;
            const rectHeight = body.height;
            const closestX = Math.max(rectX, Math.min(this.player.x, rectX + rectWidth));
            const closestY = Math.max(rectY, Math.min(this.player.y, rectY + rectHeight));
            const dx = this.player.x - closestX;
            const dy = this.player.y - closestY;
            const distance = Math.sqrt(dx * dx + dy * dy);
            if (distance < closestDistance) {
              closestDistance = distance;
            }
          });
          if (closestDistance <= 200) {
            this.startFishingSequence(false);
          } else {
            this.narrationBox.setVisible(true);
            this.narrationText.setVisible(true);
            this.narrationText.setText('Too far from the lake to cast!\nGet within 200 pixels of the water.');
            this.time.delayedCall(2000, () => {
              this.narrationText.setText('');
              this.narrationBox.setVisible(false);
              this.narrationText.setVisible(false);
            });
          }
        }
      } else if (!this.menuVisible && this.isFishing === 'tug') {
        this.isFishing = 'reeling';
        this.tugValue = 50;
        this.tensionValue = 0;
        this.narrationBox.setVisible(true);
        this.narrationText.setVisible(true);
        this.narrationText.setText('Reel it in!');
        this.tugMeter.setVisible(true);
        this.tensionMeter.setVisible(true);
        this.startReelingNarration();
      }
    });

    this.input.keyboard.on('keydown-E', () => {
      if (!this.menuVisible && !this.isFishing) {
        if (!this.isInBoat) {
          const distanceToBoat = Phaser.Math.Distance.Between(this.player.x, this.player.y, this.boat.x, this.boat.y);
          if (distanceToBoat < 200) {
            this.isInBoat = true;
            this.boat.x -= 100;
            this.player.setPosition(this.boardingBox.x, this.boardingBox.y);
            this.player.body.enable = false;
            this.player.setDepth(2);
            this.player.anims.play('idleDown', true);
            console.log(`Boat warped to x=${this.boat.x}, y=${this.boat.y}`);
          } else {
            this.narrationBox.setVisible(true);
            this.narrationText.setVisible(true);
            this.narrationText.setText('Too far from the boat!\nGet within 200 pixels to enter.');
            this.time.delayedCall(2000, () => {
              this.narrationText.setText('');
              this.narrationBox.setVisible(false);
              this.narrationText.setVisible(false);
            });
          }
        } else {
          this.isInBoat = false;
          this.player.setPosition(this.boat.x + 150, this.boat.y);
          this.player.body.enable = true;
          this.player.anims.play('idleDown', true);
          console.log(`Exited boat at x=${this.player.x}, y=${this.player.y}`);
        }
      }
    });

    this.input.keyboard.on('keydown-R', () => {
      if (!this.menuVisible && !this.isFishing) {
        this.selectedRodIndex = (this.selectedRodIndex + 1) % this.fishingRods.length;
        const rod = this.fishingRods[this.selectedRodIndex];
        this.narrationBox.setVisible(true);
        this.narrationText.setVisible(true);
        this.narrationText.setText(`Equipped ${rod.name} (Difficulty Reduction: ${rod.difficultyReduction})`);
        this.time.delayedCall(2000, () => {
          this.narrationText.setText('');
          this.narrationBox.setVisible(false);
          this.narrationText.setVisible(false);
        });
      }
    });

    this.input.keyboard.on('keydown-I', () => {
      if (!this.menuVisible && !this.isFishing) {
        let inventoryText = 'Inventory:\n';
        for (const [item, count] of Object.entries(this.fishCount)) {
          if (count > 0) {
            inventoryText += `${item.charAt(0).toUpperCase() + item.slice(1)}: ${count}\n`;
          }
        }
        this.narrationBox.setVisible(true);
        this.narrationText.setVisible(true);
        this.narrationText.setText(inventoryText.trim());
        this.time.delayedCall(3000, () => {
          this.narrationText.setText('');
          this.narrationBox.setVisible(false);
          this.narrationText.setVisible(false);
        });
      }
    });

    this.input.keyboard.on('keydown-X', () => {
      if (!this.menuVisible && this.isFishing && this.isFishing !== 'reeling') {
        this.cancelFishing();
      }
    });

    this.input.keyboard.on('keydown-M', () => {
      this.toggleMenu();
    });

    this.input.keyboard.on('keydown-UP', () => {
      if (this.menuVisible) {
        this.menuOptions[this.selectedMenuIndex].setColor('#ffffff');
        this.selectedMenuIndex = (this.selectedMenuIndex - 1 + this.menuOptions.length) % this.menuOptions.length;
        this.menuOptions[this.selectedMenuIndex].setColor('#ffff00');
      }
    });

    this.input.keyboard.on('keydown-DOWN', () => {
      if (this.menuVisible) {
        this.menuOptions[this.selectedMenuIndex].setColor('#ffffff');
        this.selectedMenuIndex = (this.selectedMenuIndex + 1) % this.menuOptions.length;
        this.menuOptions[this.selectedMenuIndex].setColor('#ffff00');
      }
    });

    this.input.keyboard.on('keydown-ENTER', () => {
      if (this.menuVisible) {
        this.selectMenuOption();
      }
    });

    this.input.keyboard.on('keydown-ESC', () => {
      console.log("ESC pressed, returning to MainGameScene");
      this.returnToMainScene();
    });

    this.physics.add.collider(this.player, this.collisions);
    this.physics.add.collider(this.boat, this.collisions, () => {
      console.log(`Boat collision at x=${this.boat.x}, y=${this.boat.y}`);
    });
  }

  startFishingSequence(fromBoat) {
    this.isFishing = 'casting';
    const castMessage = fromBoat ? 'Casting from the boat...' : 'Casting into the lake...';
    this.narrationBox.setVisible(true);
    this.narrationText.setVisible(true);
    this.narrationText.setText(castMessage);

    this.poleSprite.setAngle(this.poleAngles[this.lastDirection] + 30);

    console.log('Casting with lastDirection:', this.lastDirection);

    const distance = Phaser.Math.Between(100, 300);
    let bobberX = fromBoat ? this.boat.x : this.player.x;
    let bobberY = fromBoat ? this.boat.y : this.player.y;
    const startX = bobberX;
    const startY = bobberY;
    switch (this.lastDirection) {
      case 'right':
        bobberX += distance;
        break;
      case 'left':
        bobberX -= distance;
        break;
      case 'up':
        bobberY -= (distance + (fromBoat ? 112 : 0));
        break;
      case 'down':
        bobberY += distance;
        break;
    }

    const mainLake = this.map.getObjectLayer('collisions').objects.find(obj => obj.id === 79);
    const lakeX = mainLake.x * this.scaleFactor;
    const lakeY = mainLake.y * this.scaleFactor;
    const lakeWidth = mainLake.width * this.scaleFactor;
    const lakeHeight = mainLake.height * this.scaleFactor;

    bobberX = Phaser.Math.Clamp(bobberX, lakeX, lakeX + lakeWidth);
    bobberY = Phaser.Math.Clamp(bobberY, lakeY, lakeY + lakeHeight);

    if (this.lastDirection === 'up' && bobberY > startY - 100) {
      bobberY = startY - 100;
    } else if (this.lastDirection === 'down' && bobberY < startY + 100) {
      bobberY = startY + 100;
    } else if (this.lastDirection === 'left' && bobberX > startX - 100) {
      bobberX = startX - 100;
    } else if (this.lastDirection === 'right' && bobberX < startX + 100) {
      bobberX = startX + 100;
    }

    console.log(`Casting from (${fromBoat ? 'boat' : 'player'}): x=${startX}, y=${startY}, Bobber: x=${bobberX}, y=${bobberY}, Distance: ${Math.abs(this.lastDirection === 'up' || this.lastDirection === 'down' ? bobberY - startY : bobberX - startX)}`);

    this.bobberSprite.setPosition(bobberX, bobberY).setVisible(true);
    this.tweens.add({
      targets: this.bobberSprite,
      y: '+=10',
      duration: 1000,
      yoyo: true,
      repeat: -1,
      ease: 'Sine.easeInOut'
    });

    const waitTime = Phaser.Math.Between(6000, 8000);
    this.time.delayedCall(waitTime, () => {
      if (this.isFishing === 'casting') {
        this.isFishing = 'waiting';
        this.narrationBox.setVisible(true);
        this.narrationText.setVisible(true);
        this.narrationText.setText('The bobber floats quietly...');
        this.time.delayedCall(2000, () => {
          if (this.isFishing === 'waiting') {
            this.narrationText.setText('A soft ripple spreads...');
            this.time.delayedCall(2000, () => {
              if (this.isFishing === 'waiting') {
                this.narrationText.setText('Something stirs below...');
                this.time.delayedCall(2000, () => {
                  if (this.isFishing === 'waiting') {
                    this.narrationText.setText('The bobber dips slightly...');
                    this.time.delayedCall(2000, () => {
                      if (this.isFishing === 'waiting') {
                        this.isFishing = 'tug';
                        this.currentLoot = this.getRandomLoot();
                        this.narrationText.setText('Something tugs!\nPress SPACE to reel!');
                        this.bobberSprite.setTint(0xff0000);
                        this.time.delayedCall(500, () => this.bobberSprite.clearTint());
                      }
                    });
                  }
                });
              }
            });
          }
        });
      }
    });
  }

  cancelFishing() {
    this.isFishing = false;
    this.bobberSprite.setVisible(false);
    this.tweens.killTweensOf(this.bobberSprite);
    this.narrationBox.setVisible(true);
    this.narrationText.setVisible(true);
    this.narrationText.setText('Cast cancelled.');
    this.poleSprite.setAngle(this.poleAngles[this.lastDirection]);
    this.currentLoot = null;
    this.time.delayedCall(1000, () => {
      this.narrationText.setText('');
      this.narrationBox.setVisible(false);
      this.narrationText.setVisible(false);
    });
  }

  toggleMenu() {
    this.menuVisible = !this.menuVisible;
    this.menuBox.setVisible(this.menuVisible);
    this.menuHeader.setVisible(this.menuVisible);
    this.menuOptions.forEach(option => option.setVisible(this.menuVisible));
    if (this.menuVisible) {
      this.menuOptions[this.selectedMenuIndex].setColor('#ffff00');
    } else {
      this.menuOptions[this.selectedMenuIndex].setColor('#ffffff');
    }
  }

  selectMenuOption() {
    switch (this.selectedMenuIndex) {
      case 0: // Cast
        if (!this.isFishing) {
          if (this.isInBoat) {
            this.startFishingSequence(true);
          } else {
            let closestDistance = Infinity;
            this.collisions.getChildren().forEach(body => {
              const rectX = body.x;
              const rectY = body.y;
              const rectWidth = body.width;
              const rectHeight = body.height;
              const closestX = Math.max(rectX, Math.min(this.player.x, rectX + rectWidth));
              const closestY = Math.max(rectY, Math.min(this.player.y, rectY + rectHeight));
              const dx = this.player.x - closestX;
              const dy = this.player.y - closestY;
              const distance = Math.sqrt(dx * dx + dy * dy);
              if (distance < closestDistance) {
                closestDistance = distance;
              }
            });
            if (closestDistance <= 200) {
              this.startFishingSequence(false);
            } else {
              this.narrationBox.setVisible(true);
              this.narrationText.setVisible(true);
              this.narrationText.setText('Too far from the lake to cast!\nGet within 200 pixels of the water.');
              this.time.delayedCall(2000, () => {
                this.narrationText.setText('');
                this.narrationBox.setVisible(false);
                this.narrationText.setVisible(false);
              });
            }
          }
        }
        break;
      case 1: // Cancel Cast
        if (this.isFishing && this.isFishing !== 'reeling') {
          this.cancelFishing();
        }
        break;
      case 2: // Enter/Exit Boat
        if (!this.isFishing) {
          if (!this.isInBoat) {
            const distanceToBoat = Phaser.Math.Distance.Between(this.player.x, this.player.y, this.boat.x, this.boat.y);
            if (distanceToBoat < 200) {
              this.isInBoat = true;
              this.boat.x -= 100;
              this.player.setPosition(this.boardingBox.x, this.boardingBox.y);
              this.player.body.enable = false;
              this.player.setDepth(2);
              this.player.anims.play('idleDown', true);
              console.log(`Boat warped to x=${this.boat.x}, y=${this.boat.y}`);
            } else {
              this.narrationBox.setVisible(true);
              this.narrationText.setVisible(true);
              this.narrationText.setText('Too far from the boat!\nGet within 200 pixels to enter.');
              this.time.delayedCall(2000, () => {
                this.narrationText.setText('');
                this.narrationBox.setVisible(false);
                this.narrationText.setVisible(false);
              });
            }
          } else {
            this.isInBoat = false;
            this.player.setPosition(this.boat.x + 150, this.boat.y);
            this.player.body.enable = true;
            this.player.anims.play('idleDown', true);
            console.log(`Exited boat at x=${this.player.x}, y=${this.player.y}`);
          }
        }
        break;
      case 3: // Choose Rod
        if (!this.isFishing) {
          this.selectedRodIndex = (this.selectedRodIndex + 1) % this.fishingRods.length;
          const rod = this.fishingRods[this.selectedRodIndex];
          this.narrationBox.setVisible(true);
          this.narrationText.setVisible(true);
          this.narrationText.setText(`Equipped ${rod.name} (Difficulty Reduction: ${rod.difficultyReduction})`);
          this.time.delayedCall(2000, () => {
            this.narrationText.setText('');
            this.narrationBox.setVisible(false);
            this.narrationText.setVisible(false);
          });
        }
        break;
      case 4: // View Inventory
        if (!this.isFishing) {
          let inventoryText = 'Inventory:\n';
          for (const [item, count] of Object.entries(this.fishCount)) {
            if (count > 0) {
              inventoryText += `${item.charAt(0).toUpperCase() + item.slice(1)}: ${count}\n`;
            }
          }
          this.narrationBox.setVisible(true);
          this.narrationText.setVisible(true);
          this.narrationText.setText(inventoryText.trim());
          this.time.delayedCall(3000, () => {
            this.narrationText.setText('');
            this.narrationBox.setVisible(false);
            this.narrationText.setVisible(false);
          });
        }
        break;
    }
    this.toggleMenu();
  }

  getRandomLoot() {
    const lootTypes = [
      { name: 'Nothing', chance: 0.40, difficulty: 1 },
      { name: 'Boot', chance: 0.15, difficulty: 3 },
      { name: 'Trash', chance: 0.15, difficulty: 3 },
      { name: 'Cod', chance: 0.15, difficulty: 5 },
      { name: 'Bass', chance: 0.08, difficulty: 6 },
      { name: 'Catfish', chance: 0.05, difficulty: 7 },
      { name: 'Tuna', chance: 0.025, difficulty: 8 },
      { name: 'Ruby', chance: 0.001, difficulty: 10 },
      { name: 'Diamonds', chance: 0.001, difficulty: 10 },
      { name: 'Gold', chance: 0.001, difficulty: 10 },
      { name: 'Crystal Skull', chance: 0.001, difficulty: 12 }
    ];
    const roll = Math.random();
    let cumulative = 0;
    for (const loot of lootTypes) {
      cumulative += loot.chance;
      if (roll <= cumulative) return loot;
    }
    return lootTypes[0];
  }

  startReelingNarration() {
    this.time.delayedCall(1500, () => {
      if (this.isFishing === 'reeling') {
        this.narrationBox.setVisible(true);
        this.narrationText.setVisible(true);
        this.narrationText.setText('It’s pulling back!\nKeep reeling!');
        this.time.delayedCall(2000, () => {
          if (this.isFishing === 'reeling') {
            this.narrationText.setText('Almost there—steady now!');
          }
        });
      }
    });
  }

  update() {
    if (!this.isFishing || this.isFishing === 'casting' || this.isFishing === 'waiting' || this.isFishing === 'tug') {
      switch (this.lastDirection) {
        case 'right':
          this.poleAttachmentBox.setPosition(this.player.x + 30, this.player.y - 10);
          this.poleSprite.setFlipX(false).setAngle(this.poleAngles.right);
          break;
        case 'left':
          this.poleAttachmentBox.setPosition(this.player.x - 30, this.player.y - 10);
          this.poleSprite.setFlipX(true).setAngle(this.poleAngles.left);
          break;
        case 'up':
          this.poleAttachmentBox.setPosition(this.player.x, this.player.y - 40);
          this.poleSprite.setFlipX(false).setAngle(this.poleAngles.up);
          break;
        case 'down':
        default:
          this.poleAttachmentBox.setPosition(this.player.x, this.player.y + 20);
          this.poleSprite.setFlipX(false).setAngle(this.poleAngles.down);
          break;
      }
      if (this.isFishing) {
        this.poleSprite.setAngle(this.poleAngles[this.lastDirection] + 30);
      }
    }
    this.poleSprite.setPosition(this.poleAttachmentBox.x + this.poleOffsets[this.lastDirection].x, this.poleAttachmentBox.y + this.poleOffsets[this.lastDirection].y);

    if (!this.isInBoat) {
      if (!this.isFishing && !this.menuVisible) {
        this.player.setVelocity(0);
        if (this.cursors.left.isDown) {
          this.player.setVelocityX(-100).anims.play('moveLeft', true);
          this.lastDirection = 'left';
        } else if (this.cursors.right.isDown) {
          this.player.setVelocityX(100).anims.play('moveRight', true);
          this.lastDirection = 'right';
        } else if (this.cursors.up.isDown) {
          this.player.setVelocityY(-100).anims.play('moveUp', true);
          this.lastDirection = 'up';
        } else if (this.cursors.down.isDown) {
          this.player.setVelocityY(100).anims.play('moveDown', true);
          this.lastDirection = 'down';
        } else {
          switch (this.lastDirection) {
            case 'right': this.player.anims.play('moveRight'); this.player.setFrame(6); break;
            case 'left': this.player.anims.play('moveLeft'); this.player.setFrame(24); break;
            case 'up': this.player.anims.play('idleUp', true); break;
            case 'down': this.player.anims.play('idleDown', true); break;
          }
        }
      } else {
        switch (this.lastDirection) {
          case 'right': this.player.anims.play('moveRight'); this.player.setFrame(6); break;
          case 'left': this.player.anims.play('moveLeft'); this.player.setFrame(24); break;
          case 'up': this.player.anims.play('idleUp', true); break;
          case 'down': this.player.anims.play('idleDown', true); break;
        }
      }
    } else {
      let speed = 150;
      if (!this.isFishing && !this.menuVisible) {
        let velocityX = 0;
        let velocityY = 0;
        const currentTime = this.time.now;

        if (this.cursors.left.isDown) {
          velocityX -= speed;
          this.lastDirection = 'left';
        } else if (this.cursors.right.isDown) {
          velocityX += speed;
          this.lastDirection = 'right';
        } else if (this.cursors.up.isDown) {
          velocityY -= speed;
          this.lastDirection = 'up';
        } else if (this.cursors.down.isDown) {
          velocityY += speed;
          this.lastDirection = 'down';
        }

        if (velocityX < 0 && velocityY === 0) {
          this.boat.anims.play('boatMoveLeft', true);
          this.player.setFrame(24);
        } else if (velocityX > 0 && velocityY === 0) {
          this.boat.anims.play('boatMoveRight', true);
          this.player.setFrame(6);
        } else if (velocityY < 0 && velocityX === 0) {
          this.boat.anims.play('boatMoveUp', true);
          this.player.setFrame(12);
        } else if (velocityY > 0 && velocityX === 0) {
          this.boat.anims.play('boatMoveDown', true);
          this.player.setFrame(0);
        } else if (velocityX < 0 && velocityY < 0) {
          this.boat.anims.play('boatMoveLeft', true);
          this.player.setFrame(24);
        } else if (velocityX > 0 && velocityY < 0) {
          this.boat.anims.play('boatMoveRight', true);
          this.player.setFrame(6);
        } else if (velocityX < 0 && velocityY > 0) {
          this.boat.anims.play('boatMoveLeft', true);
          this.player.setFrame(24);
        } else if (velocityX > 0 && velocityY > 0) {
          this.boat.anims.play('boatMoveRight', true);
          this.player.setFrame(6);
        }

        if (velocityX !== 0 || velocityY !== 0) {
          this.lastVelocityX = velocityX;
          this.lastVelocityY = velocityY;
          this.lastDirectionTime = currentTime;
        }

        if ((currentTime - this.lastDirectionTime) < 250 && (velocityX === 0 && velocityY === 0)) {
          velocityX = this.lastVelocityX;
          velocityY = this.lastVelocityY;
        }

        if (velocityX === 0 && velocityY === 0) {
          this.boat.setVelocity(0);
          switch (this.lastDirection) {
            case 'left': this.boat.anims.play('boatIdleLeft', true); this.player.setFrame(24); break;
            case 'right': this.boat.anims.play('boatIdleRight', true); this.player.setFrame(6); break;
            case 'up': this.boat.anims.play('boatIdleUp', true); this.player.setFrame(12); break;
            case 'down': this.boat.anims.play('boatIdleDown', true); this.player.setFrame(0); break;
          }
        } else {
          this.boat.setVelocity(velocityX, velocityY);
        }
      } else {
        switch (this.lastDirection) {
          case 'left': this.boat.anims.play('boatIdleLeft', true); this.player.setFrame(24); break;
          case 'right': this.boat.anims.play('boatIdleRight', true); this.player.setFrame(6); break;
          case 'up': this.boat.anims.play('boatIdleUp', true); this.player.setFrame(12); break;
          case 'down': this.boat.anims.play('boatIdleDown', true); this.player.setFrame(0); break;
        }
      }
      let yOffset = this.lastDirection === 'up' ? -30 : this.lastDirection === 'down' ? 10 : 20;
      this.boardingBox.setPosition(this.boat.x, this.boat.y + yOffset);
      this.player.setPosition(this.boardingBox.x, this.boardingBox.y);
    }

    if (this.isFishing === 'reeling') {
      if (this.cursors.left.isDown && !this.wasLeftDown) {
        this.tugValue += 5;
        this.tensionValue += 10;
        this.wasLeftDown = true;
      } else if (!this.cursors.left.isDown) {
        this.wasLeftDown = false;
      }
      if (this.cursors.right.isDown && !this.wasRightDown) {
        this.tugValue += 5;
        this.tensionValue += 10;
        this.wasRightDown = true;
      } else if (!this.cursors.right.isDown) {
        this.wasRightDown = false;
      }

      const effectiveDifficulty = Math.max(0, this.currentLoot.difficulty - this.fishingRods[this.selectedRodIndex].difficultyReduction);
      this.tugValue -= effectiveDifficulty * 0.1;
      if (!this.cursors.left.isDown && !this.cursors.right.isDown) {
        this.tensionValue -= 2;
      }

      this.tugValue = Phaser.Math.Clamp(this.tugValue, 0, 100);
      this.tensionValue = Phaser.Math.Clamp(this.tensionValue, 0, 100);

      this.tugMeter.displayWidth = this.tugValue * 2;
      this.tensionMeter.displayWidth = this.tensionValue * 2;

      if (this.tugValue >= 100) {
        this.isFishing = false;
        if (this.currentLoot.name !== 'Nothing') {
          this.fishCount[this.currentLoot.name.toLowerCase()]++;
        }
        const message = this.currentLoot.name === 'Nothing' 
          ? 'Nothing but water on the line...' 
          : `Caught a ${this.currentLoot.name}!`;
        this.narrationText.setText(message);
        this.bobberSprite.setVisible(false);
        this.tugMeter.setVisible(false);
        this.tensionMeter.setVisible(false);
        this.time.delayedCall(3000, () => {
          this.narrationText.setText('');
          this.narrationBox.setVisible(false);
          this.narrationText.setVisible(false);
          this.poleSprite.setAngle(this.poleAngles[this.lastDirection]);
          this.currentLoot = null;
        });
      } else if (this.tensionValue >= 100) {
        this.isFishing = false;
        this.narrationText.setText('The line snapped!');
        this.bobberSprite.setVisible(false);
        this.tugMeter.setVisible(false);
        this.tensionMeter.setVisible(false);
        this.time.delayedCall(3000, () => {
          this.narrationText.setText('');
          this.narrationBox.setVisible(false);
          this.narrationText.setVisible(false);
          this.poleSprite.setAngle(this.poleAngles[this.lastDirection]);
          this.currentLoot = null;
        });
      } else if (this.tugValue <= 0) {
        this.isFishing = false;
        this.narrationText.setText('It got away!');
        this.bobberSprite.setVisible(false);
        this.tugMeter.setVisible(false);
        this.tensionMeter.setVisible(false);
        this.time.delayedCall(3000, () => {
          this.narrationText.setText('');
          this.narrationBox.setVisible(false);
          this.narrationText.setVisible(false);
          this.poleSprite.setAngle(this.poleAngles[this.lastDirection]);
          this.currentLoot = null;
        });
      }
    }
  }

  returnToMainScene() {
    console.log("Returning to MainGameScene");
    const mainScene = this.scene.get('MainGameScene');
    for (let [item, count] of Object.entries(this.fishCount)) {
      if (count > 0) {
        mainScene.localInventory.push({ name: item.charAt(0).toUpperCase() + item.slice(1), quantity: count });
      }
    }
    this.scene.start('MainGameScene', { 
      zone: zoneList.find(z => z.name === "Village"),
      inventory: mainScene.localInventory,
      promptCount: mainScene.promptCount
    });
  }
}
</file>

<file path="MenuScene.js">
"use strict";

class MenuScene extends Phaser.Scene {
  constructor() {
    super('MenuScene');
  }

  preload() {
    for (let i = 1; i <= 113; i++) {
      this.load.image(`frame_${i}`, `assets/menu/frame (${i}).png`);
    }
  }

  create() {
    let frames = [];
    for (let i = 1; i <= 113; i++) {
      frames.push({ key: `frame_${i}` });
    }

    this.anims.create({
      key: 'menuAnimation',
      frames: frames,
      frameRate: 24, // Adjust if needed
      repeat: -1
    });

    let gifSprite = this.add.sprite(
      this.game.config.width / 2,
      this.game.config.height / 2,
      'frame_1'
    );
    gifSprite.setOrigin(0.5);
    gifSprite.play('menuAnimation');

    const text = this.add.text(
      this.game.config.width / 2,
      this.game.config.height * 0.9,
      'Press Enter',
      { font: '32px Arial', fill: '#ffffff' }
    ).setOrigin(0.5);

    this.input.keyboard.on('keydown-ENTER', () => {
      this.scene.start('MainGameScene');
    });
  }
}
</file>

<file path="scavengerMode.js">
"use strict";

// Constants for Scavenger Mode zones
const SCAVENGER_ZONES = [
  { 
    name: "Outer Grasslands", 
    mapKey: "OuterGrasslandsMap", 
    backgroundKey: "outerGrasslands", 
    foregroundKey: "outerGrasslandsForeground" 
  },
  { 
    name: "Shady Grove", 
    mapKey: "ShadyGroveMap", 
    backgroundKey: "shadyGrove", 
    foregroundKey: "shadyGroveForeground" 
  },
  { 
    name: "Arid Desert", 
    mapKey: "AridDesertMap", 
    backgroundKey: "aridDesert", 
    foregroundKey: "aridDesertForeground" 
  }
];
const BG_SCALE = 0.3;
const PLAYER_SCALE = 2.5;

// Helper functions
function createInitialStats(zoneName, existingOromozi = 1000) {
  return { 
    health: 100, 
    thirst: 100, 
    hunger: 100, 
    stamina: 100, 
    oromozi: existingOromozi, 
    currentZone: zoneName 
  };
}

function updateHUD(scene) {
  if (!scene.hudText || !scene.playerStats) return;
  const s = scene.playerStats;
  const gameTime = scene.registry.get("gameTime") || 0;
  const totalMinutes = Math.floor(gameTime / 1000);
  const hours = Math.floor(totalMinutes / 60) % 24;
  const minutes = totalMinutes % 60;
  const period = hours >= 12 ? "PM" : "AM";
  const displayHours = hours % 12 || 12;
  scene.hudText.setText(
    `OROMOZI: ${s.oromozi} | Health: ${s.health} | Time: ${displayHours}:${minutes < 10 ? "0" : ""}${minutes} ${period}`
  );
}

function showDialog(scene, text) {
  const boxW = 220, boxH = 150;
  const boxX = (scene.game.config.width - boxW) / 2;
  const boxY = (scene.game.config.height - boxH) / 2;
  scene.dialogBg.clear();
  scene.dialogBg.fillStyle(0x000000, 0.8);
  scene.dialogBg.fillRect(boxX, boxY, boxW, boxH);
  scene.dialogText.setPosition(boxX + 10, boxY + 10);
  scene.dialogText.setText(text);
  scene.dialogBg.setVisible(true);
  scene.dialogText.setVisible(true);
  scene.dialogBg.setScrollFactor(0);
  scene.dialogText.setScrollFactor(0);
}

function hideDialog(scene) {
  scene.dialogBg.clear();
  scene.dialogBg.setVisible(false);
  scene.dialogText.setVisible(false);
  updateHUD(scene);
}

// Preload function
function preloadScavengerMode() {
  SCAVENGER_ZONES.forEach(zone => {
    this.load.json(zone.mapKey, `assets/maps/${zone.mapKey}.json`);
    this.load.image(zone.backgroundKey, `assets/backgrounds/${zone.backgroundKey}.png`);
    if (zone.foregroundKey) 
      this.load.image(zone.foregroundKey, `assets/foregrounds/${zone.foregroundKey}.png`);
  });
  this.load.spritesheet("player", "assets/sprites/player.png", { frameWidth: 48, frameHeight: 48 });
}

// Create function
function createScavengerMode(data) {
  const zoneData = data.zone || SCAVENGER_ZONES[0];
  this.playerStats = data.playerStats || createInitialStats(zoneData.name);
  this.localInventory = data.inventory || [{ name: "Bread", quantity: 1 }];

  // Background setup
  this.background = this.add.image(0, 0, zoneData.backgroundKey)
    .setOrigin(0, 0)
    .setScale(BG_SCALE);
  this.physics.world.setBounds(0, 0, this.background.displayWidth, this.background.displayHeight);
  this.cameras.main.setBounds(0, 0, this.background.displayWidth, this.background.displayHeight);

  // Foreground layer
  const mapData = this.cache.json.get(zoneData.mapKey);
  if (mapData?.layers) {
    mapData.layers.forEach(layer => {
      if (layer.type === "imagelayer" && layer.name.toLowerCase() === zoneData.foregroundKey.toLowerCase()) {
        this.add.image(0, 0, zoneData.foregroundKey)
          .setOrigin(0, 0)
          .setScale(BG_SCALE);
      }
    });
  }

  // Player setup
  this.player = this.physics.add.sprite(100 * BG_SCALE, 100 * BG_SCALE, "player")
    .setScale(PLAYER_SCALE * 0.5);
  this.player.setCollideWorldBounds(true);
  this.cameras.main.startFollow(this.player);
  this.cameras.main.setZoom(2);

  // HUD and dialog setup
  this.hudText = this.add.text(10, this.game.config.height - 20, "", { 
    font: "16px Arial", 
    fill: "#ffffff" 
  }).setScrollFactor(0);
  this.dialogBg = this.add.graphics().setVisible(false);
  this.dialogText = this.add.text(0, 0, "", { 
    font: "12px Arial", 
    fill: "#ffffff", 
    wordWrap: { width: 200 } 
  }).setVisible(false);

  // Keyboard controls
  this.cursors = this.input.keyboard.createCursorKeys();

  updateHUD(this);
}

// Update function
function updateScavengerMode(time, delta) {
  // Update game time
  let gameTime = this.registry.get("gameTime") || 0;
  gameTime += delta;
  this.registry.set("gameTime", gameTime);

  // Player movement
  const speed = 100;
  this.player.setVelocity(0);
  if (this.cursors.left.isDown) this.player.setVelocityX(-speed);
  else if (this.cursors.right.isDown) this.player.setVelocityX(speed);
  if (this.cursors.up.isDown) this.player.setVelocityY(-speed);
  else if (this.cursors.down.isDown) this.player.setVelocityY(speed);

  // Zone switching and scene transition
  const keys = this.input.keyboard.addKeys({ z: "Z", space: "SPACE" });
  if (Phaser.Input.Keyboard.JustDown(keys.z)) {
    const currentZoneIndex = SCAVENGER_ZONES.findIndex(z => z.name === this.playerStats.currentZone);
    const newZoneIndex = (currentZoneIndex + 1) % SCAVENGER_ZONES.length;
    this.playerStats.currentZone = SCAVENGER_ZONES[newZoneIndex].name;
    this.scene.restart({ 
      zone: SCAVENGER_ZONES[newZoneIndex], 
      inventory: this.localInventory, 
      playerStats: this.playerStats 
    });
  }
  if (Phaser.Input.Keyboard.JustDown(keys.space)) {
    showDialog(this, "Return to Village?\n(Press SPACE again to confirm)");
    this.input.keyboard.once("keydown-SPACE", () => {
      this.scene.start("VillageCommonsScene", {
        zone: { 
          name: "Village", 
          mapKey: "villageCommonsMap", 
          backgroundKey: "villageCommons", 
          foregroundKey: "" 
        },
        inventory: this.localInventory,
        playerStats: createInitialStats("Village", this.playerStats.oromozi)
      });
    });
  }

  updateHUD(this);
}
</file>

<file path="villageCommons.js">
"use strict";

/* =======================================================
   GLOBAL CONSTANTS
======================================================= */
const ZONE_LIST = [
  { name: "Outer Grasslands", mapKey: "OuterGrasslandsMap", backgroundKey: "outerGrasslands", foregroundKey: "outerGrasslandsForeground" },
  { name: "Shady Grove", mapKey: "ShadyGroveMap", backgroundKey: "shadyGrove", foregroundKey: "shadyGroveForeground" },
  { name: "Arid Desert", mapKey: "AridDesertMap", backgroundKey: "aridDesert", foregroundKey: "aridDesertForeground" },
  { name: "Village", mapKey: "villageCommonsMap", backgroundKey: "villageCommons", foregroundKey: "" }
];

// Narrative screen states
const SCREEN_NONE = 0;
const SCREEN_LIQUIDITY = 7;
const SCREEN_MERCHANT = 8;
const SCREEN_ROYAL = 9;
const SCREEN_TINKER = 10;
const SCREEN_CRAFT = 11;
const SCREEN_TRADING = 12;
const SCREEN_BATTLE = 13;

const BG_SCALE = 0.3;
const PLAYER_SCALE = 2.5;

/* =======================================================
   GAME CONFIGURATION
======================================================= */
const GAME_CONFIG = {
  type: Phaser.AUTO,
  width: 800,
  height: 600,
  parent: "phaser-game",
  physics: {
    default: "arcade",
    arcade: { gravity: { y: 0 }, debug: false }
  },
  scene: [MainGameScene] // Only this scene for simplicity
};

/* =======================================================
   HELPER FUNCTIONS
======================================================= */
function createInitialStats(zoneName, existingOromozi = 1000) {
  return { 
    health: 100, 
    thirst: 100, 
    hunger: 100, 
    stamina: 100, 
    oromozi: existingOromozi, 
    currentZone: zoneName || "" 
  };
}

function updateHUD(scene) {
  if (!scene.hudText || !scene.playerStats) return;
  const s = scene.playerStats;
  scene.hudText.setText(`OROMOZI: ${s.oromozi}`);
}

function showDialog(scene, text) {
  const boxW = 220, boxH = 150;
  const boxX = (scene.game.config.width - boxW) / 2;
  const boxY = (scene.game.config.height - boxH) / 2;
  scene.dialogBg.clear();
  scene.dialogBg.fillStyle(0x000000, 0.8);
  scene.dialogBg.fillRect(boxX, boxY, boxW, boxH);
  scene.dialogText.setPosition(boxX + 10, boxY + 10);
  scene.dialogText.setText(text);
  scene.dialogBg.setVisible(true);
  scene.dialogText.setVisible(true);
  scene.dialogBg.setScrollFactor(0);
  scene.dialogText.setScrollFactor(0);
  scene.dialogBg.setDepth(1600);
  scene.dialogText.setDepth(1601);
}

function hideDialog(scene) {
  scene.dialogBg.clear();
  scene.dialogBg.setVisible(false);
  scene.dialogText.setVisible(false);
  updateHUD(scene);
}

function createButtons(scene, lines) {
  clearButtons(scene);
  const boxW = 220, boxH = 150;
  const boxX = (scene.game.config.width - boxW) / 2;
  const boxY = (scene.game.config.height - boxH) / 2;
  let startX = boxX + 10;
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    const txt = scene.add.text(startX, boxY + 80 + i * 20, line.label, { font: "12px Arial", fill: "#ffff00" });
    txt.setDepth(1601);
    txt.setInteractive({ useHandCursor: true });
    txt.on("pointerdown", () => line.callback());
    scene.buttons.push(txt);
    txt.setScrollFactor(0);
  }
}

function clearButtons(scene) {
  scene.buttons.forEach(btn => btn.destroy());
  scene.buttons = [];
}

function showModalOverlay(scene) {
  hideModalOverlay(scene);
  const modal = scene.add.rectangle(
    scene.cameras.main.worldView.x,
    scene.cameras.main.worldView.y,
    scene.cameras.main.width,
    scene.cameras.main.height,
    0x000000,
    0.4
  );
  modal.setOrigin(0, 0);
  modal.setScrollFactor(0);
  modal.setDepth(800);
  scene.liquidityOverlay = modal;
}

function hideModalOverlay(scene) {
  if (scene.liquidityOverlay) {
    scene.liquidityOverlay.destroy();
    scene.liquidityOverlay = null;
  }
}

function createScrollableMenu(scene, title, options) {
  const boxW = 220, boxH = 150;
  const boxX = (scene.game.config.width - boxW) / 2;
  const boxY = (scene.game.config.height - boxH) / 2;
  const maxVisible = 6;
  let scrollIndex = 0;

  showDialog(scene, `${title}\n(Use UP/DOWN to scroll, SPACE to select)`);
  scene.dialogBg.fillStyle(0x000000, 0.8);
  scene.dialogBg.fillRect(boxX, boxY, boxW, boxH);

  const updateMenu = () => {
    clearButtons(scene);
    const visibleOptions = options.slice(scrollIndex, scrollIndex + maxVisible);
    visibleOptions.forEach((option, i) => {
      const txt = scene.add.text(boxX + 10, boxY + 80 + i * 20, option.label, { font: "12px Arial", fill: "#ffff00" });
      txt.setDepth(1601);
      txt.setInteractive({ useHandCursor: true });
      txt.on("pointerdown", () => {
        scene.input.keyboard.off("keydown-UP");
        scene.input.keyboard.off("keydown-DOWN");
        scene.input.keyboard.off("keydown-SPACE");
        option.callback();
      });
      scene.buttons.push(txt);
      txt.setScrollFactor(0);
    });
  };

  updateMenu();

  scene.input.keyboard.on("keydown-UP", () => {
    if (scrollIndex > 0) {
      scrollIndex--;
      updateMenu();
    }
  });

  scene.input.keyboard.on("keydown-DOWN", () => {
    if (scrollIndex + maxVisible < options.length) {
      scrollIndex++;
      updateMenu();
    }
  });

  scene.input.keyboard.once("keydown-SPACE", () => {
    scene.input.keyboard.off("keydown-UP");
    scene.input.keyboard.off("keydown-DOWN");
    const selectedIndex = scrollIndex;
    if (options[selectedIndex]) options[selectedIndex].callback();
  });
}

function addToInventory(scene, itemName, quantity = 1) {
  const existing = scene.localInventory.find(i => i.name === itemName);
  if (existing) {
    existing.quantity += quantity;
  } else {
    scene.localInventory.push({ name: itemName, quantity });
  }
}

function removeFromInventory(scene, itemName, quantity = 1) {
  const item = scene.localInventory.find(i => i.name === itemName);
  if (!item) return;
  item.quantity -= quantity;
  if (item.quantity <= 0) {
    const index = scene.localInventory.indexOf(item);
    scene.localInventory.splice(index, 1);
  }
}

/* =======================================================
   LIQUIDITY POOL FUNCTIONS
======================================================= */
function showDepositResourceScreen(scene) {
  const resources = scene.localInventory.filter(item => item.quantity > 0);
  if (!resources.length) {
    alert("No resources available to deposit.");
    showLiquidityPoolOptions(scene);
    return;
  }
  const options = resources.map((resource, index) => ({
    label: `${resource.name} x${resource.quantity}`,
    callback: () => promptDepositDetails(scene, resource.name, index)
  }));
  options.push({ label: "Back", callback: () => showLiquidityPoolOptions(scene) });
  createScrollableMenu(scene, "Select a resource to deposit:", options);
}

function promptDepositDetails(scene, resource, index) {
  clearButtons(scene);
  hideDialog(scene);
  let amount = parseInt(prompt(`Enter deposit amount for ${resource} (units):`, "10"), 10);
  let duration = parseInt(prompt("Enter lockup duration (seconds):", "604800"), 10);
  if (isNaN(amount) || isNaN(duration)) {
    alert("Invalid input.");
    showDepositResourceScreen(scene);
    return;
  }
  let estimatedYield = Math.floor(amount * (duration / 86400) * 50);
  showConfirmDeposit(scene, resource, amount, duration, estimatedYield, index);
}

function showConfirmDeposit(scene, resource, amount, duration, estimatedYield, index) {
  showDialog(scene, `Deposit ${amount} ${resource} for ${duration}s?\nYield: ${estimatedYield} units.\nConfirm?`);
  const options = [
    {
      label: "Yes",
      callback: () => {
        removeFromInventory(scene, resource, amount);
        scene.deposits.push({ amount, duration, startTime: Date.now() });
        alert("Deposit successful (simulated).");
        hideDialog(scene);
        hideModalOverlay(scene);
        scene.narrativeScreen = SCREEN_NONE;
      }
    },
    { label: "No", callback: () => showDepositResourceScreen(scene) }
  ];
  createButtons(scene, options);
}

function showLiquidityPoolOptions(scene) {
  scene.narrativeScreen = SCREEN_LIQUIDITY;
  showModalOverlay(scene);
  const options = [
    { label: "Deposit Resource", callback: () => showDepositResourceScreen(scene) },
    {
      label: "View Deposits & Yield",
      callback: () => {
        const deposits = scene.deposits.map((d, i) => `${i}: ${d.amount} units, ${Math.floor((Date.now() - d.startTime) / 1000)}s`).join("\n");
        alert(`Deposits:\n${deposits || "None"}`);
        showLiquidityPoolOptions(scene);
      }
    },
    { label: "Withdraw Resources", callback: () => showWithdrawResourceScreen(scene) },
    {
      label: "Back",
      callback: () => {
        hideDialog(scene);
        hideModalOverlay(scene);
        scene.narrativeScreen = SCREEN_NONE;
      }
    }
  ];
  createScrollableMenu(scene, "Liquidity Pool Options:", options);
}

function showWithdrawResourceScreen(scene) {
  if (!scene.deposits.length) {
    alert("No deposits to withdraw.");
    showLiquidityPoolOptions(scene);
    return;
  }
  const options = scene.deposits.map((deposit, index) => ({
    label: `${deposit.amount} units (${Math.floor((Date.now() - deposit.startTime) / 1000)}s)`,
    callback: () => {
      const elapsed = (Date.now() - deposit.startTime) / 1000;
      const yieldAmt = Math.floor(deposit.amount * (elapsed / 86400) * 50);
      scene.playerStats.oromozi += deposit.amount + yieldAmt;
      scene.deposits.splice(index, 1);
      alert(`Withdrawn ${deposit.amount} units + ${yieldAmt} yield (simulated).`);
      updateHUD(scene);
      showLiquidityPoolOptions(scene);
    }
  }));
  options.push({ label: "Back", callback: () => showLiquidityPoolOptions(scene) });
  createScrollableMenu(scene, "Select a deposit to withdraw:", options);
}

/* =======================================================
   MERCHANT QUARTER FUNCTIONS
======================================================= */
function showMerchantQuarterOptions(scene) {
  scene.narrativeScreen = SCREEN_MERCHANT;
  showModalOverlay(scene);
  const options = [
    { label: "List Item for Sale", callback: () => showListItemScreen(scene) },
    { label: "Browse Marketplace", callback: () => showBrowseMarketplaceScreen(scene) },
    { label: "View My Listed Items", callback: () => showMyListingsScreen(scene) },
    {
      label: "Back",
      callback: () => {
        hideDialog(scene);
        hideModalOverlay(scene);
        scene.narrativeScreen = SCREEN_NONE;
      }
    }
  ];
  createScrollableMenu(scene, "Merchant Quarter Options:", options);
}

function showListItemScreen(scene) {
  if (!scene.localInventory.length) {
    alert("No items to list.");
    showMerchantQuarterOptions(scene);
    return;
  }
  const options = scene.localInventory.map((item, index) => ({
    label: `${item.name} x${item.quantity}`,
    callback: () => promptListItemDetails(scene, item, index)
  }));
  options.push({ label: "Back", callback: () => showMerchantQuarterOptions(scene) });
  createScrollableMenu(scene, "Select an item to list:", options);
}

function promptListItemDetails(scene, item, index) {
  hideDialog(scene);
  let price = parseInt(prompt(`Enter sale price for ${item.name}:`, "1000"), 10);
  if (isNaN(price)) {
    alert("Invalid price.");
    showListItemScreen(scene);
    return;
  }
  showDialog(scene, `List ${item.name} for ${price} OROMOZI?\nConfirm?`);
  const options = [
    {
      label: "Yes",
      callback: () => {
        scene.listedItems.push({ id: index, item: item.name, quantity: 1, price, nonce: Date.now() });
        removeFromInventory(scene, item.name, 1);
        alert("Listing created (simulated).");
        showMerchantQuarterOptions(scene);
      }
    },
    { label: "No", callback: () => showListItemScreen(scene) }
  ];
  createButtons(scene, options);
}

function showBrowseMarketplaceScreen(scene) {
  const marketItems = [
    { item: "Iron Sword", price: 500 },
    { item: "Wooden Armor", price: 300 },
    { item: "Healing Potion", price: 100 }
  ];
  const options = marketItems.map(item => ({
    label: `${item.item} - ${item.price} OROMOZI`,
    callback: () => {
      if (scene.playerStats.oromozi >= item.price) {
        scene.playerStats.oromozi -= item.price;
        addToInventory(scene, item.item);
        alert(`Purchased ${item.item} (simulated).`);
      } else {
        alert("Insufficient OROMOZI!");
      }
      updateHUD(scene);
      showMerchantQuarterOptions(scene);
    }
  }));
  options.push({ label: "Back", callback: () => showMerchantQuarterOptions(scene) });
  createScrollableMenu(scene, "Browse Marketplace:", options);
}

function showMyListingsScreen(scene) {
  if (!scene.listedItems.length) {
    alert("No listed items.");
    showMerchantQuarterOptions(scene);
    return;
  }
  const options = scene.listedItems.map((listing, index) => ({
    label: `${listing.item} x${listing.quantity} - ${listing.price} OROMOZI`,
    callback: () => showManageListingScreen(scene, listing, index)
  }));
  options.push({ label: "Back", callback: () => showMerchantQuarterOptions(scene) });
  createScrollableMenu(scene, "Your Listings:", options);
}

function showManageListingScreen(scene, listing, index) {
  const options = [
    { label: "Edit Price", callback: () => promptEditPrice(scene, listing, index) },
    {
      label: "Cancel Listing",
      callback: () => {
        addToInventory(scene, listing.item, listing.quantity);
        scene.listedItems.splice(index, 1);
        alert(`Listing cancelled (simulated).`);
        showMerchantQuarterOptions(scene);
      }
    },
    { label: "Back", callback: () => showMyListingsScreen(scene) }
  ];
  createScrollableMenu(scene, `Manage ${listing.item} (${listing.price} OROMOZI):`, options);
}

function promptEditPrice(scene, listing, index) {
  hideDialog(scene);
  let newPrice = parseInt(prompt(`Enter new price for ${listing.item} (current: ${listing.price}):`, listing.price), 10);
  if (isNaN(newPrice)) {
    alert("Invalid price.");
    showManageListingScreen(scene, listing, index);
    return;
  }
  showDialog(scene, `Update to ${newPrice} OROMOZI?\nConfirm?`);
  const options = [
    {
      label: "Yes",
      callback: () => {
        scene.listedItems[index].price = newPrice;
        alert(`Price updated (simulated).`);
        showMerchantQuarterOptions(scene);
      }
    },
    { label: "No", callback: () => showManageListingScreen(scene, listing, index) }
  ];
  createButtons(scene, options);
}

/* =======================================================
   VILLAGE INTERACTION HANDLER
======================================================= */
function handleVillageContractInteraction(scene, obj) {
  switch (obj.name.toLowerCase()) {
    case "liquidity_bank":
      showLiquidityPoolOptions(scene);
      break;
    case "merchant_quarter":
      showMerchantQuarterOptions(scene);
      break;
    case "scavenger_mode":
      showDialog(scene, "Enter Scavenger Mode?\n(Press SPACE to confirm)");
      scene.input.keyboard.once("keydown-SPACE", () => {
        const targetZone = ZONE_LIST.find(z => z.name === "Outer Grasslands");
        scene.playerStats = createInitialStats(targetZone.name, scene.playerStats.oromozi);
        scene.scene.restart({ zone: targetZone, inventory: scene.localInventory, promptCount: 0 });
      });
      break;
    default:
      console.log("Unknown interaction:", obj.name);
  }
}

/* =======================================================
   PHASER SCENE FUNCTIONS
======================================================= */
function preload() {
  this.load.json("villageCommonsMap", "assets/maps/villageCommonsMap.json");
  this.load.image("villageCommons", "assets/backgrounds/villageCommons.png");
  this.load.spritesheet("player", "assets/sprites/player.png", { frameWidth: 48, frameHeight: 48 });
}

function createScene() {
  const zoneData = ZONE_LIST.find(z => z.name === "Village");
  this.playerStats = createInitialStats(zoneData.name, this.playerStats?.oromozi || 1000);
  this.localInventory = this.scene.settings.data?.inventory || [
    { name: "Bread", quantity: 1 },
    { name: "Iron Sword", quantity: 1 }
  ];
  this.deposits = [];
  this.listedItems = [];

  this.background = this.add.image(0, 0, zoneData.backgroundKey).setOrigin(0, 0).setScale(BG_SCALE);
  this.physics.world.setBounds(0, 0, this.background.displayWidth, this.background.displayHeight);
  this.cameras.main.setBounds(0, 0, this.background.displayWidth, this.background.displayHeight);

  this.obstacles = this.physics.add.staticGroup();
  this.interactionObjects = this.physics.add.staticGroup();

  const mapData = this.cache.json.get(zoneData.mapKey);
  if (mapData && mapData.layers) {
    mapData.layers.forEach(layer => {
      if (layer.type === "objectgroup" && layer.name === "Object Layer 1") {
        layer.objects.forEach(obj => {
          const rect = this.add.rectangle(obj.x * BG_SCALE, obj.y * BG_SCALE, obj.width * BG_SCALE, obj.height * BG_SCALE, 0xff0000, 0);
          rect.setOrigin(0, 0);
          this.physics.add.existing(rect, true);
          this.obstacles.add(rect);
        });
      } else if (layer.type === "objectgroup" && layer.name.toLowerCase() === "interactions") {
        layer.objects.forEach(obj => {
          const interactiveObj = this.add.rectangle(obj.x * BG_SCALE, obj.y * BG_SCALE, obj.width * BG_SCALE, obj.height * BG_SCALE, 0x00ff00, 0);
          interactiveObj.setOrigin(0, 0);
          this.physics.add.existing(interactiveObj, true);
          interactiveObj.setInteractive();
          interactiveObj.on("pointerdown", () => handleVillageContractInteraction(this, obj));
          this.interactionObjects.add(interactiveObj);
        });
      }
    });
  }

  this.player = this.physics.add.sprite(100 * BG_SCALE, 100 * BG_SCALE, "player").setScale(PLAYER_SCALE * 0.5);
  this.player.setCollideWorldBounds(true);
  this.player.setDepth(2000);
  this.player.body.setSize(16, 16).setOffset(16, 16);

  this.anims.create({ key: "walk-down", frames: this.anims.generateFrameNumbers("player", { start: 18, end: 20 }), frameRate: 10, repeat: -1 });
  this.anims.create({ key: "walk-left", frames: this.anims.generateFrameNumbers("player", { start: 24, end: 26 }), frameRate: 10, repeat: -1 });
  this.anims.create({ key: "walk-right", frames: this.anims.generateFrameNumbers("player", { start: 6, end: 8 }), frameRate: 10, repeat: -1 });
  this.anims.create({ key: "walk-up", frames: this.anims.generateFrameNumbers("player", { start: 12, end: 14 }), frameRate: 10, repeat: -1 });
  this.player.anims.play("walk-down", true);

  this.cameras.main.startFollow(this.player);
  this.cameras.main.setZoom(2);

  this.hudText = this.add.text(10, GAME_CONFIG.height - 20, "", { font: "16px Arial", fill: "#ffffff" }).setScrollFactor(0).setDepth(11000);
  this.dialogBg = this.add.graphics().setDepth(1600).setVisible(false);
  this.dialogText = this.add.text(0, 0, "", { font: "12px Arial", fill: "#ffffff", wordWrap: { width: 200 } }).setDepth(1601).setVisible(false);
  this.buttons = [];
  this.narrativeScreen = SCREEN_NONE;

  this.physics.add.collider(this.player, this.obstacles);
  updateHUD(this);
}

function updateScene() {
  if (this.narrativeScreen >= SCREEN_LIQUIDITY) {
    this.player.setVelocity(0);
    this.player.anims.stop();
    return;
  }

  const speed = 80;
  this.player.setVelocity(0);
  const keys = this.input.keyboard.addKeys({ up: "W", left: "A", down: "S", right: "D" });

  if (keys.left.isDown) {
    this.player.setVelocityX(-speed);
    this.player.anims.play("walk-left", true);
  } else if (keys.right.isDown) {
    this.player.setVelocityX(speed);
    this.player.anims.play("walk-right", true);
  } else if (keys.up.isDown) {
    this.player.setVelocityY(-speed);
    this.player.anims.play("walk-up", true);
  } else if (keys.down.isDown) {
    this.player.setVelocityY(speed);
    this.player.anims.play("walk-down", true);
  } else {
    this.player.anims.stop();
  }
}

/* =======================================================
   PHASER SCENE CLASS
======================================================= */
class MainGameScene extends Phaser.Scene {
  constructor() {
    super("MainGameScene");
  }
  preload() { preload.call(this); }
  create() { createScene.call(this); }
  update() { updateScene.call(this); }
}

const game = new Phaser.Game(GAME_CONFIG);
</file>

<file path="assets/data/lootTable.json">
{
  "zones": {
    "Outer Grasslands": [
      {
        "name": "Nuts",
        "type": "Food & Sustenance",
        "statEffects": { "hunger": 3 },
        "value": 5,
        "rarity": "Low",
        "weight": 0.1,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true
      },
      {
        "name": "Lint",
        "type": "Collectable",
        "statEffects": {},
        "value": 1,
        "rarity": "Low",
        "weight": 0.05,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": false
      },
      {
        "name": "Trash",
        "type": "Collectable",
        "statEffects": {},
        "value": 1,
        "rarity": "Low",
        "weight": 0.2,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": false
      },
      {
        "name": "Water",
        "type": "Food & Sustenance",
        "statEffects": { "thirst": 5 },
        "value": 10,
        "rarity": "Low",
        "weight": 0.5,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true
      },
      {
        "name": "Stick",
        "type": "Resource",
        "statEffects": { "stamina": 10 },
        "value": 3,
        "rarity": "Low",
        "weight": 0.3,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true,
        "crafting": { "isResource": true, "burnable": true }
      }
    ],
    "Shady Grove": [
      {
        "name": "Pebble",
        "type": "Collectable",
        "statEffects": {},
        "value": 2,
        "rarity": "Low",
        "weight": 0.1,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": false
      },
      {
        "name": "Wooden Staff",
        "type": "Weapon",
        "statEffects": {},
        "combatEffects": { "attack": 9 },
        "resist": { "predator": 5, "dark": 5 },
        "value": 50,
        "rarity": "Uncommon",
        "weight": 1.5,
        "durability": 50,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      },
      {
        "name": "Wooden Sword",
        "type": "Weapon",
        "statEffects": {},
        "combatEffects": { "attack": 13 },
        "resist": { "predator": 10 },
        "value": 60,
        "rarity": "Uncommon",
        "weight": 2.0,
        "durability": 50,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      },
      {
        "name": "Wheat",
        "type": "Resource",
        "statEffects": { "hunger": 2 },
        "value": 15,
        "rarity": "Uncommon",
        "weight": 0.2,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true,
        "crafting": { "isResource": true }
      },
      {
        "name": "Cloth",
        "type": "Resource",
        "statEffects": {},
        "value": 20,
        "rarity": "Uncommon",
        "weight": 0.5,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true,
        "crafting": { "isResource": true }
      }
    ],
    "Arid Desert": [
      {
        "name": "Iron Ore",
        "type": "Resource",
        "statEffects": { "stamina": 1 },
        "value": 50,
        "rarity": "Epic",
        "weight": 1.0,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true,
        "crafting": { "isResource": true }
      },
      {
        "name": "Rope",
        "type": "Resource",
        "statEffects": {},
        "value": 30,
        "rarity": "Rare",
        "weight": 0.8,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true,
        "crafting": { "isResource": true }
      },
      {
        "name": "Stone",
        "type": "Resource",
        "statEffects": {},
        "value": 10,
        "rarity": "Uncommon",
        "weight": 0.7,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true,
        "crafting": { "isResource": true }
      },
      {
        "name": "Gold Ore",
        "type": "Resource",
        "statEffects": {},
        "value": 100,
        "rarity": "Mythic",
        "weight": 1.2,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true,
        "crafting": { "isResource": true }
      },
      {
        "name": "Diamond Ore",
        "type": "Resource",
        "statEffects": {},
        "value": 150,
        "rarity": "Mythic",
        "weight": 1.5,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true,
        "crafting": { "isResource": true }
      }
    ],
    "Rocky Savanna": [
      {
        "name": "Diamond Axe",
        "type": "Weapon",
        "statEffects": {},
        "combatEffects": { "attack": 25 },
        "resist": { "predator": 10, "earthquake": 5 },
        "value": 200,
        "rarity": "Mythic",
        "weight": 3.0,
        "durability": 100,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      },
      {
        "name": "Diamond Sword",
        "type": "Weapon",
        "statEffects": {},
        "combatEffects": { "attack": 30 },
        "resist": { "predator": 10 },
        "value": 250,
        "rarity": "Mythic",
        "weight": 3.5,
        "durability": 100,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      },
      {
        "name": "Stone Sword",
        "type": "Weapon",
        "statEffects": {},
        "combatEffects": { "attack": 15 },
        "resist": { "predator": 5 },
        "value": 40,
        "rarity": "Rare",
        "weight": 2.5,
        "durability": 60,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      },
      {
        "name": "Smashing Stone",
        "type": "Weapon",
        "statEffects": {},
        "combatEffects": { "attack": 35 },
        "resist": { "fall": 5 },
        "value": 300,
        "rarity": "Mythic",
        "weight": 4.0,
        "durability": 80,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      },
      {
        "name": "Berries",
        "type": "Food & Sustenance",
        "statEffects": { "hunger": 4 },
        "value": 20,
        "rarity": "Rare",
        "weight": 0.1,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true
      }
    ],
    "Lush Waterfall": [
      {
        "name": "Carrots",
        "type": "Food & Sustenance",
        "statEffects": { "hunger": 3 },
        "value": 15,
        "rarity": "Uncommon",
        "weight": 0.2,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true
      },
      {
        "name": "Apple",
        "type": "Food & Sustenance",
        "statEffects": { "hunger": 5 },
        "value": 25,
        "rarity": "Rare",
        "weight": 0.3,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true
      },
      {
        "name": "Chicken",
        "type": "Food & Sustenance",
        "statEffects": { "hunger": 6 },
        "value": 30,
        "rarity": "Rare",
        "weight": 0.5,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true
      },
      {
        "name": "Beef",
        "type": "Food & Sustenance",
        "statEffects": { "hunger": 8 },
        "value": 40,
        "rarity": "Rare",
        "weight": 0.7,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true
      },
      {
        "name": "Lamb",
        "type": "Food & Sustenance",
        "statEffects": { "hunger": 10 },
        "value": 50,
        "rarity": "Epic",
        "weight": 0.8,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true
      }
    ],
    "Marshy Riverbanks": [
      {
        "name": "Wine",
        "type": "Food & Sustenance",
        "statEffects": { "hunger": 5, "thirst": 3 },
        "value": 60,
        "rarity": "Epic",
        "weight": 0.6,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true
      },
      {
        "name": "Beer",
        "type": "Food & Sustenance",
        "statEffects": { "hunger": 3, "thirst": 4 },
        "value": 55,
        "rarity": "Epic",
        "weight": 0.6,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true
      },
      {
        "name": "Potion",
        "type": "Food & Sustenance",
        "statEffects": { "health": 15 },
        "value": 80,
        "rarity": "Rare",
        "weight": 0.4,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": false
      },
      {
        "name": "Obsidian Ore",
        "type": "Resource",
        "statEffects": {},
        "value": 120,
        "rarity": "Mythic",
        "weight": 1.5,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true,
        "crafting": { "isResource": true }
      },
      {
        "name": "Evade",
        "type": "Special Move",
        "statEffects": {},
        "combatEffects": { "evasion": 20 },
        "resist": { "fall": 10, "predator": 10 },
        "value": 150,
        "rarity": "Epic",
        "weight": 0.1,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      }
    ],
    "Active Volcano": [
      {
        "name": "Sonic Leap",
        "type": "Special Move",
        "statEffects": {},
        "combatEffects": { "evasion": 15 },
        "resist": { "fall": 15 },
        "value": 140,
        "rarity": "Epic",
        "weight": 0.1,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      },
      {
        "name": "Fire Blast",
        "type": "Special Move",
        "statEffects": {},
        "combatEffects": { "attack": 20, "damageType": "fire" },
        "resist": { "fire": 10 },
        "value": 160,
        "rarity": "Epic",
        "weight": 0.1,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      },
      {
        "name": "Laser Eyes",
        "type": "Special Move",
        "statEffects": {},
        "combatEffects": { "attack": 25, "damageType": "light" },
        "resist": { "dark": 10 },
        "value": 200,
        "rarity": "Mythic",
        "weight": 0.1,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      },
      {
        "name": "Kinetic Energy",
        "type": "Special Move",
        "statEffects": {},
        "combatEffects": { "attack": 20 },
        "resist": { "earthquake": 10, "fall": 5 },
        "value": 180,
        "rarity": "Mythic",
        "weight": 0.1,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      },
      {
        "name": "Hyper Ray",
        "type": "Special Move",
        "statEffects": {},
        "combatEffects": { "attack": 30, "damageType": "light" },
        "resist": { "predator": 5, "magic": 5 },
        "value": 220,
        "rarity": "Mythic",
        "weight": 0.1,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      }
    ],
    "Frozen Peaks": [
      {
        "name": "Jupiter Wave",
        "type": "Special Move",
        "statEffects": {},
        "combatEffects": { "attack": 25, "damageType": "ice" },
        "resist": { "cold": 10 },
        "value": 200,
        "rarity": "Mythic",
        "weight": 0.1,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      },
      {
        "name": "Unicorn Trample",
        "type": "Special Move",
        "statEffects": {},
        "combatEffects": { "attack": 30 },
        "resist": { "predator": 15 },
        "value": 250,
        "rarity": "Mythic",
        "weight": 0.1,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      },
      {
        "name": "Trump Stomp",
        "type": "Special Move",
        "statEffects": {},
        "combatEffects": { "attack": 35 },
        "resist": { "earthquake": 15 },
        "value": 260,
        "rarity": "Mythic",
        "weight": 0.1,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      },
      {
        "name": "Cloth",
        "type": "Resource",
        "statEffects": {},
        "value": 25,
        "rarity": "Rare",
        "weight": 0.3,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true,
        "crafting": { "isResource": true }
      },
      {
        "name": "Dye",
        "type": "Resource",
        "statEffects": {},
        "value": 30,
        "rarity": "Rare",
        "weight": 0.2,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true,
        "crafting": { "isResource": true }
      }
    ],
    "Forbidden Temple": [
      {
        "name": "Fishing Pole",
        "type": "Tool",
        "statEffects": {},
        "combatEffects": { "fishing": true },
        "value": 100,
        "rarity": "Epic",
        "weight": 1.5,
        "durability": 50,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      },
      {
        "name": "Fish",
        "type": "Food & Sustenance",
        "statEffects": { "hunger": 5, "health": 2 },
        "value": 35,
        "rarity": "Epic",
        "weight": 0.5,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true
      },
      {
        "name": "Flaming Axe",
        "type": "Weapon",
        "statEffects": {},
        "combatEffects": { "attack": 28, "damageType": "fire" },
        "resist": { "fire": 10, "magic": 5 },
        "value": 300,
        "rarity": "Mythic",
        "weight": 3.5,
        "durability": 100,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      },
      {
        "name": "Crystal Skull",
        "type": "Collectable",
        "statEffects": {},
        "value": 500,
        "rarity": "Mythic",
        "weight": 1.0,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": false,
        "canDeposit": false
      },
      {
        "name": "Lettuce",
        "type": "Food & Sustenance",
        "statEffects": { "hunger": 4 },
        "value": 20,
        "rarity": "Rare",
        "weight": 0.2,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true
      }
    ],
    "Gold Ruins": [
      {
        "name": "Seed",
        "type": "Resource",
        "statEffects": { "hunger": 1 },
        "value": 40,
        "rarity": "Epic",
        "weight": 0.1,
        "stackLimit": 50,
        "isStackable": true,
        "isEquippable": false,
        "canDeposit": true,
        "crafting": { "isResource": true }
      },
      {
        "name": "Winged Feet",
        "type": "Special Move",
        "statEffects": {},
        "combatEffects": { "evasion": 20 },
        "resist": { "fall": 20 },
        "value": 150,
        "rarity": "Epic",
        "weight": 0.1,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      },
      {
        "name": "Unicorn Wings",
        "type": "Special Move",
        "statEffects": {},
        "combatEffects": { "evasion": 25 },
        "resist": { "fall": 25 },
        "value": 180,
        "rarity": "Epic",
        "weight": 0.1,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      },
      {
        "name": "Leather Armor",
        "type": "Armor",
        "statEffects": {},
        "combatEffects": { "defense": 5 },
        "resist": { "predator": 10, "fall": 10, "shrapnel": 5 },
        "value": 80,
        "rarity": "Uncommon",
        "weight": 2.0,
        "durability": 60,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      },
      {
        "name": "Obsidian Armor",
        "type": "Armor",
        "statEffects": {},
        "combatEffects": { "defense": 80 },
        "resist": { "fire": 15, "dark": 10, "predator": 10, "magic": 10 },
        "value": 400,
        "rarity": "Mythic",
        "weight": 5.0,
        "durability": 120,
        "stackLimit": 1,
        "isStackable": false,
        "isEquippable": true,
        "canDeposit": false
      }
    ]
  }
}
</file>

<file path="assets/sprites/player.png:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
ReferrerUrl=https://mail.google.com/
HostUrl=https://mail-attachment.googleusercontent.com/attachment/u/0/?ui=2&ik=fb8c278282&attid=0.1&permmsgid=msg-a:r-1462797120250366947&th=195b0da5e040482a&view=att&disp=safe&realattid=f_m8gl4np30&zw&saddbat=ANGjdJ--GpmIdNQ_veWD85fnBLkGjz7gjd0kXNnvyBKdUBYy0aTMGft6KP30D-QY-1QRqcTJv9OkkAoJgCtybojWSINAR0t5kq4qAbGpNJxQ8j9Aj1NRkfuHYFca7pr7phs3sTs6mXzp4tfdEKPIpQk5fA_CGWCWKPCGmRiIGxPnzzN-hYUkcsSpyUBH9TO4dr4r0ZTSxi-xDeGuvSxDcgM0s5Jwh7CoSdUa7xtCjprKXU4yA47FWI5elI0jJfzPj6VE_Vj8YnwbtD20TEKURuxJAV5U1r6Omu84Ve2VKvVTgAMNDjZV5lzsJTskXYgP50jYTt19u9VJ8xCc-6VOe2HpsJdLlnslF9HBnOS1bLiVljwxe2aiH-VoCBVQjvMyQ3uV_Lo3Sqdkt_KtK45GEPipQ6bMIVYBSc3MQ_61IJvfR2WMUWeK7-0kKXsG0Y1ouajkG3YMPPHinrHVYCiMUwcdNMRrTgXiMs7CEQBHmudOW3UrTOQ3tvRXkCbw-AREMNigfb1Qt8irIJMq5fnoXF1s5IW3lmfCT06HsaUNsUZIG651D9ojKCZaCDXnEszDsbI6SNHyngutb07Z3_lGTnMQDbOvYafEC7YgcnEjQ67l06np10MwwYWfPPkbkni-RdIjObWqQjLNlPHw0KcB6KjlsnW_CSu0yJBlxgIIYCfVAwzcoPmzh5eC9AHUNh7rmjiMH843I93tZb6rjKKsteQmYOjxVDRdQSzsFIrFvydsUuoYMO5bJ5DzezT5ssYDIphQ4g7fHvPfEc1Uw2m8rPAoMAVamZiL5wdTtoWvxSfDNBQNiVvv6oqD5cjCJb6s32K23dFU0pPI6ZtuahVeLmQa0RueDPNG4NF4tGPDR48yc1_F2CNz9_b-kYRh07HfJ6JRuAjzViXrEkfkhnRlyXw33Od9PzNtOgNiGvJPzBdAB2-L4Q3vNgsg_HU43Ib51U0lprblnr-HFUpw7bMI1uLvpGIku_SSXcmuGR9it5lMhnwpEwf8py4H-sAOYWGPp_EJK1wPUCaUYjhhxRRZiQZoFyM1eGbcJ3_vW7VZ7w
</file>

<file path="scripts/constants.js">
// constants.js
export const zoneList = [
  { name: "Outer Grasslands", mapKey: "OuterGrasslandsMap", backgroundKey: "outerGrasslands", foregroundKey: "outerGrasslandsForeground" },
  { name: "Shady Grove", mapKey: "ShadyGroveMap", backgroundKey: "shadyGrove", foregroundKey: "shadyGroveForeground" },
  { name: "Arid Desert", mapKey: "AridDesertMap", backgroundKey: "aridDesert", foregroundKey: "aridDesertForeground" },
  { name: "Village", mapKey: "villageCommonsMap", backgroundKey: "villageCommons", foregroundKey: "" }
];

export const SCREEN_STATES = {
  NONE: 0,
  PROLOGUE: 1,
  PROMPT: 2,
  CHOICES: 3,
  OUTCOME: 4,
  ITEM_MENU: 5,
  ITEM_PICK: 6,
  LIQUIDITY: 7,
  MERCHANT: 8,
  ROYAL: 9,
  TINKER: 10,
  CRAFT: 11,
  TRADING: 12,
  BATTLE: 13
};

export const SCALES = {
  bgScale: 0.3,
  playerScale: 2.5
};

export const SCAVENGER_MODE_ADDRESS = "8u56uyYfe3ivj3dhkizrHHE4Z7hhBorTLVhi5d8B4pJa";
export const PROGRAM_ID = new PublicKey("8u56uyYfe3ivj3dhkizrHHE4Z7hhBorTLVhi5d8B4pJa");

export const scavengerModeABI = [
  "function initializePlayer() external",
  "function exitGame() external",
  "function depositInventory(string[] calldata items) external"
];
</file>

<file path="scripts/utils.js">
// utils.js
export function createInitialStats(zoneName, existingOromozi = 1000) {
  return { 
    health: 100, 
    thirst: 100, 
    hunger: 100, 
    stamina: 100, 
    oromozi: existingOromozi, 
    currentZone: zoneName || "" 
  };
}

export function initEquippedData(scene) {
  scene.equippedItems = [];
  scene.equippedResist = {};
}

export function recalcEquippedResist(scene) {
  scene.equippedResist = {};
  for (let itemName of scene.equippedItems) {
    const data = getItemData(scene, itemName);
    if (!data || !data.resist) continue;
    for (let key of Object.keys(data.resist)) {
      if (!scene.equippedResist[key]) scene.equippedResist[key] = 0;
      scene.equippedResist[key] += data.resist[key];
    }
  }
}

export function updateHUD(scene) {
  if (!scene.hudText || !scene.playerStats) return;
  const s = scene.playerStats;
  scene.hudText.setText("");
  if (scene.currentZone === "Village") {
    scene.hudText.setText(`OROMOZI: ${s.oromozi}`);
  } else {
    scene.hudText.setText(
      `HEALTH: ${s.health}   STAMINA: ${s.stamina}\nHUNGER: ${s.hunger}   THIRST: ${s.thirst}\nOROMOZI: ${s.oromozi}`
    );
  }
}

export function getItemData(scene, itemName) {
  const lootData = scene.cache.json.get("lootTable");
  if (!lootData || !lootData.zones) return null;
  const zoneKeys = Object.keys(lootData.zones);
  for (let zk of zoneKeys) {
    const itemsArr = lootData.zones[zk];
    if (!itemsArr) continue;
    for (let itemObj of itemsArr) {
      if (itemObj.name === itemName) return itemObj;
    }
  }
  return null;
}

export function getAllLootItems(scene) {
  const lootData = scene.cache.json.get("lootTable");
  if (!lootData || !lootData.zones) return ["Stick"];
  const allItems = new Set();
  Object.keys(lootData.zones).forEach(zone => {
    lootData.zones[zone].forEach(item => allItems.add(item.name));
  });
  return Array.from(allItems);
}

export function getRandomLootForZone(scene) {
  const zoneName = scene.currentZone;
  const lootData = scene.cache.json.get("lootTable");
  if (!lootData || !lootData.zones) return "Stick";
  const zoneItems = lootData.zones[zoneName];
  if (!zoneItems || zoneItems.length === 0) return "Stick";
  const randIndex = Phaser.Math.Between(0, zoneItems.length - 1);
  return zoneItems[randIndex].name || "Stick";
}

export function applyItemEffects(scene, itemData) {
  if (!itemData || !itemData.statEffects) return false;
  let modified = false;
  for (let [stat, value] of Object.entries(itemData.statEffects)) {
    if (scene.playerStats[stat] !== undefined) {
      scene.playerStats[stat] = Math.min(scene.playerStats[stat] + value, 100);
      modified = true;
    }
  }
  return modified;
}

export function applySurvivalTickAndOutcome(scene, outcomeText) {
  if (!scene.playerStats) scene.playerStats = createInitialStats(scene.currentZone);
  scene.playerStats.thirst = Math.max(scene.playerStats.thirst - 7, 0);
  scene.playerStats.hunger = Math.max(scene.playerStats.hunger - 7, 0);
  scene.playerStats.stamina = Math.max(scene.playerStats.stamina - 7, 0);

  const dmgMatch = outcomeText.match(/\(([-+]\d+)\s*Health\)\s*\[type=(\w+)\]/i);
  if (dmgMatch) {
    const dmgRaw = parseInt(dmgMatch[1]);
    const dmgType = dmgMatch[2].toLowerCase();
    let dmgVal = Math.abs(dmgRaw);
    const rVal = scene.equippedResist[dmgType] || 0;
    dmgVal = Math.max(dmgVal - rVal, 0);
    scene.playerStats.health = Math.max(scene.playerStats.health - dmgVal, 0);
  } else {
    const matchHealth = outcomeText.match(/([-+]\d+)\s*Health/i);
    if (matchHealth) {
      scene.playerStats.health = Math.max(scene.playerStats.health + parseInt(matchHealth[1]), 0);
    }
  }

  if (scene.currentZone !== "Village") {
    const { stamina, thirst, hunger, health } = scene.playerStats;
    let healthReduction = 0;
    if (stamina < 15 || thirst < 15 || hunger < 15) {
      healthReduction = 10;
    } else if (stamina < 35 || thirst < 35 || hunger < 35) {
      healthReduction = 5;
    }
    if (healthReduction > 0) {
      scene.playerStats.health = Math.max(health - healthReduction, 0);
      console.log(`Health reduced by ${healthReduction} due to low stats in Scavenger Mode`);
    }
  }
}

export function addToInventory(scene, itemName, quantity = 1) {
  const existingItem = scene.localInventory.find(item => item.name === itemName);
  if (existingItem) {
    existingItem.quantity += quantity;
  } else {
    scene.localInventory.push({ name: itemName, quantity: quantity });
  }
}

export function removeFromInventory(scene, itemName, quantity = 1) {
  const itemIndex = scene.localInventory.findIndex(item => item.name === itemName);
  if (itemIndex !== -1) {
    const item = scene.localInventory[itemIndex];
    item.quantity -= quantity;
    if (item.quantity <= 0) {
      scene.localInventory.splice(itemIndex, 1);
    }
  }
}

export function getInventoryDisplay(scene) {
  return scene.localInventory.map(item => `${item.name} x${item.quantity}`);
}
</file>

<file path="scripts/VillageCommons.js">
// scenes/VillageCommons.js
import Phaser from 'phaser';
import { zoneList, SCREEN_STATES, SCALES } from '../constants.js';
import * as Utils from '../utils.js';
import * as Blockchain from '../blockchain.js';
import * as Narrative from '../narrative.js';
import { handleVillageContractInteraction } from '../uiModules.js';

export default class VillageCommons extends Phaser.Scene {
  constructor() {
    super('VillageCommons');
  }

  preload() {
    this.load.json("OuterGrasslandsMap", "assets/maps/outerGrasslands.json");
    this.load.json("ShadyGroveMap", "assets/maps/shadyGrove.json");
    this.load.json("AridDesertMap", "assets/maps/aridDesert.json");
    this.load.json("villageCommonsMap", "assets/maps/villageCommonsMap.json");

    this.load.image("outerGrasslands", "assets/backgrounds/outerGrasslands.png");
    this.load.image("shadyGrove", "assets/backgrounds/shadyGrove.png");
    this.load.image("aridDesert", "assets/backgrounds/aridDesert.png");
    this.load.image("villageCommons", "assets/backgrounds/villageCommons.png");
    this.load.image("outerGrasslandsForeground", "assets/foregrounds/outerGrasslandsForeground.png");
    this.load.image("shadyGroveForeground", "assets/foregrounds/shadyGroveForeground.png");
    this.load.image("aridDesertForeground", "assets/foregrounds/aridDesertForeground.png");

    this.load.spritesheet("player", "assets/sprites/player.png", {
      frameWidth: 48,
      frameHeight: 48,
      margin: 0,
      spacing: 0
    });

    this.load.image("exclamation", "assets/sprites/exclamation.png");

    this.load.json("narrativePrologues", "assets/data/narrativePrologues.json");
    this.load.json("narrativePrompts", "assets/data/narrativeprompt.json");
    this.load.json("lootTable", "assets/data/lootTable.json");
  }

  async create() {
    let defaultZone = zoneList.find(z => z.name === "Village");
    if (!this.scene.settings.data || !this.scene.settings.data.zone) {
      this.scene.settings.data = {
        zone: defaultZone,
        inventory: [
          { name: "Bread", quantity: 1 },
          { name: "Water", quantity: 1 },
          { name: "Iron Sword", quantity: 1 },
          { name: "Wooden Armor", quantity: 1 },
          { name: "Healing Medicine", quantity: 1 }
        ],
        promptCount: 0
      };
      console.log("Defaulting zone to Village with preloaded loot items.");
    }

    if (this.scene.settings.data.zone.name !== "Village") {
      await Blockchain.connectWallet();
      await Blockchain.initOnChain(this);
    } else {
      console.log("Skipping wallet and on-chain init for Village Commons.");
      Blockchain.walletPublicKey = "SIMULATED_WALLET";
    }

    const existingOromozi = this.playerStats ? this.playerStats.oromozi : 1000;
    if (!this.playerStats) this.playerStats = Utils.createInitialStats(this.scene.settings.data.zone.name, existingOromozi);
    this.localInventory = this.scene.settings.data.inventory || [];
    this.promptCount = this.scene.settings.data.promptCount || 0;
    this.deposits = this.deposits || [];
    this.listedItems = this.listedItems || [];
    this.tradeListings = this.tradeListings || [];
    Utils.initEquippedData(this);

    if (this.scene.settings.data.zone.name !== "Village" && !this.initialScavengerInventory) {
      this.initialScavengerInventory = JSON.parse(JSON.stringify(this.localInventory));
      this.lastInventoryState = JSON.parse(JSON.stringify(this.localInventory));
      console.log("Initial Scavenger Mode inventory set:", this.initialScavengerInventory);
    }

    let zoneData = this.scene.settings.data.zone || zoneList[0];
    this.currentZone = zoneData.name;
    this.playerStats.currentZone = this.currentZone;

    this.background = this.add.image(0, 0, zoneData.backgroundKey).setOrigin(0, 0).setScale(SCALES.bgScale);
    this.physics.world.setBounds(0, 0, this.background.displayWidth, this.background.displayHeight);
    this.cameras.main.setBounds(0, 0, this.background.displayWidth, this.background.displayHeight);

    this.obstacles = this.physics.add.staticGroup();

    if (zoneData.name === "Village") {
      this.interactionObjects = this.physics.add.staticGroup();
      this.exclamations = this.physics.add.group({ immovable: true, allowGravity: false });
      const mapData = this.cache.json.get(zoneData.mapKey);
      if (mapData && mapData.layers) {
        mapData.layers.forEach(layer => {
          if (layer.type === "objectgroup" && layer.name === "Object Layer 1") {
            const offsetX = layer.offsetx || 0;
            const offsetY = layer.offsety || 0;
            layer.objects.forEach(obj => {
              const rect = this.add.rectangle(
                (obj.x + offsetX) * SCALES.bgScale,
                (obj.y + offsetY) * SCALES.bgScale,
                obj.width * SCALES.bgScale,
                obj.height * SCALES.bgScale,
                0xff0000,
                0
              );
              rect.setOrigin(0, 0);
              this.physics.add.existing(rect, true);
              this.obstacles.add(rect);
            });
          } else if (layer.type === "objectgroup" && layer.name.toLowerCase() === "interactions") {
            layer.objects.forEach(obj => {
              const interactiveObj = this.add.rectangle(
                obj.x * SCALES.bgScale,
                obj.y * SCALES.bgScale,
                obj.width * SCALES.bgScale,
                obj.height * SCALES.bgScale,
                0x00ff00,
                0
              );
              interactiveObj.setOrigin(0, 0);
              this.physics.add.existing(interactiveObj, true);
              interactiveObj.body.enable = false;
              interactiveObj.setInteractive();
              interactiveObj.on("pointerdown", () => handleVillageContractInteraction(this, obj));
              this.interactionObjects.add(interactiveObj);
            });
          }
        });
      }
    } else {
      const mapData = this.cache.json.get(zoneData.mapKey);
      if (mapData) {
        mapData.layers.forEach(layer => {
          if (layer.type === "objectgroup" && layer.name === "Object Layer 1") {
            layer.objects.forEach(obj => {
              const rect = this.add.rectangle(
                obj.x * SCALES.bgScale,
                obj.y * SCALES.bgScale,
                obj.width * SCALES.bgScale,
                obj.height * SCALES.bgScale,
                0xff0000,
                0
              );
              rect.setOrigin(0, 0);
              this.physics.add.existing(rect, true);
              this.obstacles.add(rect);
            });
          } else if (layer.type === "imagelayer" && layer.name.toLowerCase() === zoneData.foregroundKey.toLowerCase()) {
            const offX = layer.x || 0;
            const offY = layer.y || 0;
            this.foreground = this.add.image(offX * SCALES.bgScale, offY * SCALES.bgScale, zoneData.foregroundKey)
              .setOrigin(0, 0)
              .setScale(SCALES.bgScale);
            this.foreground.setDepth(1000);
          }
        });
      }
    }

    this.player = this.physics.add.sprite(100 * SCALES.bgScale, 100 * SCALES.bgScale, "player");
    this.player.setScale(SCALES.playerScale * 0.5);
    this.player.setCollideWorldBounds(true);
    this.player.setDepth(2000);
    this.player.body.setSize(16, 16);
    this.player.body.setOffset(16, 16);

    // Updated animation creation to use the correct 'player' key
    this.anims.create({
      key: "walk-down",
      frames: this.anims.generateFrameNumbers("player", { start: 18, end: 20 }),
      frameRate: 10,
      repeat: -1
    });
    this.anims.create({
      key: "walk-left",
      frames: this.anims.generateFrameNumbers("player", { start: 24, end: 26 }),
      frameRate: 10,
      repeat: -1
    });
    this.anims.create({
      key: "walk-right",
      frames: this.anims.generateFrameNumbers("player", { start: 6, end: 8 }),
      frameRate: 10,
      repeat: -1
    });
    this.anims.create({
      key: "walk-up",
      frames: this.anims.generateFrameNumbers("player", { start: 12, end: 14 }),
      frameRate: 10,
      repeat: -1
    });
    // Add a safety check before playing the animation
    if (this.anims.get("walk-down")) {
      this.player.anims.play("walk-down", true);
    } else {
      console.warn("Animation 'walk-down' not found! Check spritesheet loading.");
    }

    this.cameras.main.startFollow(this.player);
    this.cameras.main.setZoom(2);

    const cam = this.cameras.main;
    const visibleWidth = cam.width / cam.zoom;
    const visibleHeight = cam.height / cam.zoom;
    const frameX = (this.game.config.width - visibleWidth) / 2;
    const frameY = (this.game.config.height - visibleHeight) / 2;
    this.frameRect = new Phaser.Geom.Rectangle(frameX, frameY, visibleWidth, visibleHeight);
    this.frame = this.add.graphics();
    this.frame.lineStyle(4, 0xffffff, 1);
    this.frame.strokeRect(frameX, frameY, visibleWidth, visibleHeight);
    this.frame.setScrollFactor(0);
    this.frame.setDepth(10000);
    this.hudText = this.add.text(frameX + 10, frameY + visibleHeight - 10, "", {
      font: "16px Arial",
      fill: "#ffffff"
    });
    this.hudText.setOrigin(0, 1);
    this.hudText.setScrollFactor(0);
    this.hudText.setDepth(11000);

    this.keys = this.input.keyboard.addKeys({
      up: Phaser.Input.Keyboard.KeyCodes.W,
      left: Phaser.Input.Keyboard.KeyCodes.A,
      down: Phaser.Input.Keyboard.KeyCodes.S,
      right: Phaser.Input.Keyboard.KeyCodes.D,
      interact: Phaser.Input.Keyboard.KeyCodes.I,
      z: Phaser.Input.Keyboard.KeyCodes.Z,
      v: Phaser.Input.Keyboard.KeyCodes.V
    });
    this.spaceKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);

    if (zoneData.name !== "Village") {
      this.exclamations = this.physics.add.group({ immovable: true, allowGravity: false });
    }

    this.narrativePrologues = this.cache.json.get("narrativePrologues");
    this.narrativeData = this.cache.json.get("narrativePrompts");

    this.dialogBg = this.add.graphics();
    this.dialogBg.setDepth(1000);
    this.dialogBg.setVisible(false);
    this.dialogText = this.add.text(0, 0, "", {
      font: "12px Arial",
      fill: "#ffffff",
      wordWrap: { width: 200 }
    });
    this.dialogText.setDepth(1001);
    this.dialogText.setVisible(false);
    this.buttons = [];
    this.narrativeScreen = SCREEN_STATES.NONE;
    this.activePrompt = null;
    this.chosenOptionIndex = -1;

    if (this.obstacles && this.obstacles.getLength() > 0) {
      this.physics.add.collider(this.player, this.obstacles);
    }

    Utils.updateHUD(this);

    if (this.currentZone !== "Village" && this.exclamations) {
      spawnMultipleExclamations(this, 6);
      this.time.addEvent({
        delay: 10000,
        callback: () => spawnMultipleExclamations(this, 1),
        loop: true
      });
    }
  }

  update() {
    if (!this.player || !this.player.body) return;

    if (this.playerStats && this.playerStats.health <= 0 && this.currentZone !== "Village" && this.narrativeScreen !== SCREEN_STATES.NONE) {
      console.log("Player died in Scavenger Mode!");
      this.narrativeScreen = SCREEN_STATES.NONE;
      Narrative.showDialog(this, "You have died!\nYou wake up in Village Commons...");
      this.time.delayedCall(2000, () => {
        this.cameras.main.fadeOut(1000, 0, 0, 0, (camera, progress) => {
          if (progress === 1) {
            const villageZone = zoneList.find(z => z.name === "Village");
            this.localInventory = JSON.parse(JSON.stringify(this.initialScavengerInventory));
            this.playerStats = Utils.createInitialStats(villageZone.name, this.playerStats.oromozi);
            this.scene.restart({ zone: villageZone, inventory: this.localInventory, promptCount: 0 });
            this.cameras.main.once('camerafadeincomplete', () => {
              console.log("Player respawned in Village Commons with initial inventory:", this.localInventory);
              Narrative.hideDialog(this);
            });
            this.cameras.main.fadeIn(1000, 0, 0, 0);
          }
        });
      });
      return;
    }

    if (Phaser.Input.Keyboard.JustDown(this.keys.z)) {
      let currentZoneIndex = zoneList.findIndex(z => z.name === this.currentZone);
      currentZoneIndex = (currentZoneIndex + 1) % zoneList.length;
      this.scene.restart({ zone: zoneList[currentZoneIndex], inventory: this.localInventory, promptCount: this.promptCount });
      return;
    }
    if (Phaser.Input.Keyboard.JustDown(this.keys.v)) {
      console.log("Simulated deposit of local inventory on chain...");
      Blockchain.depositOnChain(this);
      return;
    }
    if (this.foreground) {
      const overlapsForeground = Phaser.Geom.Intersects.RectangleToRectangle(this.player.getBounds(), this.foreground.getBounds());
      if (overlapsForeground) {
        this.player.setDepth(this.foreground.depth - 1);
      } else {
        this.player.setDepth(this.foreground.depth + 1);
      }
    }

    if (this.narrativeScreen >= SCREEN_STATES.LIQUIDITY) {
      this.player.setVelocity(0);
      this.player.anims.stop();
      return;
    }

    switch (this.narrativeScreen) {
      case SCREEN_STATES.PROLOGUE:
      case SCREEN_STATES.PROMPT:
        this.player.setVelocity(0);
        this.player.anims.stop();
        if (Phaser.Input.Keyboard.JustDown(this.spaceKey)) {
          if (this.narrativeScreen === SCREEN_STATES.PROLOGUE) {
            this.narrativeScreen = SCREEN_STATES.PROMPT;
            Narrative.showPrompt(this);
          } else if (this.narrativeScreen === SCREEN_STATES.PROMPT) {
            this.narrativeScreen = SCREEN_STATES.CHOICES;
            Narrative.showChoices(this);
          }
        }
        return;
      case SCREEN_STATES.CHOICES:
        this.player.setVelocity(0);
        this.player.anims.stop();
        return;
      case SCREEN_STATES.OUTCOME:
        this.player.setVelocity(0);
        this.player.anims.stop();
        if (Phaser.Input.Keyboard.JustDown(this.spaceKey)) {
          this.narrativeScreen = SCREEN_STATES.ITEM_MENU;
          Narrative.showItemMenu(this);
        }
        return;
      case SCREEN_STATES.ITEM_MENU:
      case SCREEN_STATES.ITEM_PICK:
        this.player.setVelocity(0);
        this.player.anims.stop();
        return;
      default:
        break;
    }

    const speed = 80;
    this.player.setVelocity(0);

    if (this.keys.left.isDown) {
      this.player.setVelocityX(-speed);
      this.player.anims.play("walk-left", true);
    } else if (this.keys.right.isDown) {
      this.player.setVelocityX(speed);
      this.player.anims.play("walk-right", true);
    } else if (this.keys.up.isDown) {
      this.player.setVelocityY(-speed);
      this.player.anims.play("walk-up", true);
    } else if (this.keys.down.isDown) {
      this.player.setVelocityY(speed);
      this.player.anims.play("walk-down", true);
    } else {
      this.player.setVelocity(0);
      this.player.anims.stop();
      this.player.anims.setCurrentFrame(this.anims.get("walk-down").frames[0]);
    }

    if (Phaser.Input.Keyboard.JustDown(this.keys.interact)) {
      const ex = Narrative.getOverlappingExclamation(this);
      if (ex) {
        console.log("Interacting with ex at:", ex.x, ex.y);
        ex.destroy();
        this.narrativeScreen = SCREEN_STATES.PROLOGUE;
        Narrative.showPrologue(this);
      } else {
        console.log("Interact pressed, but no exclamation overlap.");
      }
    }
  }
}

// Define spawnMultipleExclamations and other scene-specific helpers here if needed
function spawnMultipleExclamations(scene, count) {
  if (scene.currentZone === "Village") return;
  for (let i = 0; i < count; i++) {
    spawnOneExclamation(scene);
  }
}

function spawnOneExclamation(scene) {
  const MAX_TRIES = 100;
  let tries = 0;
  const worldW = scene.background.displayWidth;
  const worldH = scene.background.displayHeight;
  while (tries < MAX_TRIES) {
    tries++;
    const exX = Phaser.Math.Between(50, worldW - 50);
    const exY = Phaser.Math.Between(50, worldH - 50);
    if (!overlapsObstacle(scene, exX, exY)) {
      const ex = scene.exclamations.create(exX, exY, "exclamation");
      ex.setScale(SCALES.bgScale * 4);
      ex.setDepth(900);
      ex.setImmovable(true);
      return;
    }
  }
  console.warn("Unable to place exclamation after", MAX_TRIES, "tries.");
}

function overlapsObstacle(scene, x, y) {
  const EX_SIZE = 16;
  const exRect = new Phaser.Geom.Rectangle(x - EX_SIZE / 2, y - EX_SIZE / 2, EX_SIZE, EX_SIZE);
  const obstacles = scene.obstacles ? scene.obstacles.getChildren() : [];
  for (let obs of obstacles) {
    const obsBounds = obs.getBounds();
    if (Phaser.Geom.Intersects.RectangleToRectangle(exRect, obsBounds)) {
      return true;
    }
  }
  return false;
}
</file>

<file path="campingScene.js">
class CampingScene extends Phaser.Scene {
  constructor() {
    super('CampingScene');
    // Player and scene elements
    this.player = null;
    this.campfire = null;
    this.lightRadius = 150;
    this.maxLightRadius = 400;
    this.campfireScale = 1.5;
    this.maxCampfireScale = 3;
    this.campfireOriginY = 0.75;
    this.maxCampfireOriginY = 1;
    this.cursors = null;
    this.campfireLight = null;
    this.darkOverlay = null;

    // Fire management
    this.burnTime = 0;
    this.maxStokes = 7;
    this.currentStokes = 0;
    this.burnMeter = null;
    this.timerEvent = null;
    this.isFireLit = false;

    // Inventory
    this.inventory = [];
    this.menuVisible = false;
    this.menuText = null;

    // Cooking properties
    this.isCooking = false;
    this.cookingTime = 0;
    this.cookingDuration = 30; // Total time to cook (in seconds)
    this.cookingComplete = false;
    this.cookedFoodItem = null;
    this.skillet = null;
    this.progressBar = null;
    this.cookingTimer = null;
    this.claimText = null;
    this.cookingStartTime = 0; // Timestamp for persistence

    // Dialog menu properties
    this.dialogVisible = false;
    this.dialogBox = null;
    this.dialogTitle = null;
    this.dialogTextItems = [];
    this.selectedItemIndex = 0;
    this.cookableItems = [];

    // Torch properties
    this.torch = null;
    this.torchLight = null;
    this.torchBurnTime = 0;
    this.torchCurrentStokes = 0;
    this.isTorchLit = false;
    this.torchLightRadius = 150;
    this.torchScale = 0.75;
    this.maxTorchScale = 1.5;
    this.torchOriginY = 0.75;
    this.maxTorchOriginY = 1;
    this.torchBurnMeter = null;

    // Stoking menu properties
    this.stokingDialogVisible = false;
    this.stokingDialogBox = null;
    this.stokingDialogTitle = null;
    this.stokingDialogTextItems = [];
    this.stokingItems = [];
    this.stokingTarget = null;
    this.quantityInputVisible = false;
    this.quantityInputText = null;
    this.selectedQuantity = 1;

    // **Added: Player stats properties**
    this.playerStats = {
      health: 100,
      stamina: 100,
      thirst: 100,
      hunger: 100,
      oromozi: 1000
    };
    this.statsText = null;
    this.regenTimer = null;
  }

  preload() {
    this.load.tilemapTiledJSON('campsite_map', 'assets/maps/campsite.json');
    this.load.image('forest_night', 'assets/images/forest_night.png');
    this.load.spritesheet('player', 'assets/images/player.png', { frameWidth: 48, frameHeight: 48 });
    this.load.spritesheet('campfire', 'assets/images/campfire.png', { frameWidth: 32, frameHeight: 48 });
    this.load.spritesheet('smoke', 'assets/images/smoke.png', { frameWidth: 32, frameHeight: 48 });
    this.load.image('skillet', 'assets/images/skillet.png');
  }

  create(data) {
    // **Added: Receive player stats from MainGameScene**
    if (data && data.playerStats) {
      this.playerStats = { ...data.playerStats }; // Deep copy to avoid reference issues
    }

    // **Added: Set up stats display**
    this.statsText = this.add.text(10, 10, '', { font: '16px Arial', fill: '#ffffff' }).setDepth(1000);
    this.updateStatsText();

    // **Added: Set up regeneration timer**
    this.regenTimer = this.time.addEvent({
      delay: 15000, // Regenerate every 5 seconds
      callback: () => {
        if (this.isFireLit) { // Only regenerate if campfire is lit
          this.playerStats.stamina = Math.min(100, this.playerStats.stamina + 5);
          this.updateStatsText();
        }
      },
      loop: true
    });

    // Preserve incoming inventory
    console.log('Incoming data:', data);
    this.inventory = data.inventory ? [...data.inventory] : [];
    if (this.inventory.length === 0) {
      const woodItem = this.inventory.find(item => item.name.toLowerCase() === 'wood');
      if (woodItem) woodItem.quantity += 1;
      else this.inventory.push({ name: 'wood', quantity: 1 });
      const codItem = this.inventory.find(item => item.name.toLowerCase() === 'cod');
      if (codItem) codItem.quantity += 1;
      else this.inventory.push({ name: 'cod', quantity: 1 });
    }
    console.log('Final inventory on entering CampingScene:', this.inventory);

    // Restore states from registry with fallback values
    const cookingState = this.registry.get('cookingState') || {};
    this.isCooking = cookingState.isCooking || false;
    this.cookingTime = cookingState.cookingTime || 0;
    this.cookingComplete = cookingState.cookingComplete || false;
    this.cookedFoodItem = cookingState.cookedFoodItem || null;
    this.cookingStartTime = cookingState.cookingStartTime || 0;

    const fireState = this.registry.get('fireState') || {};
    this.isFireLit = fireState.isFireLit || false;
    this.burnTime = fireState.burnTime || 0;
    this.currentStokes = fireState.currentStokes || 0;
    this.lightRadius = fireState.lightRadius || 150;
    this.campfireScale = fireState.campfireScale || 1.5;
    this.campfireOriginY = fireState.campfireOriginY || 0.75;

    const torchState = this.registry.get('torchState') || {};
    this.isTorchLit = torchState.isTorchLit || false;
    this.torchBurnTime = torchState.torchBurnTime || 0;
    this.torchCurrentStokes = torchState.torchCurrentStokes || 0;
    this.torchLightRadius = torchState.torchLightRadius || 150;
    this.torchScale = torchState.torchScale || 0.75;
    this.torchOriginY = torchState.torchOriginY || 0.75;

    console.log('Restored cooking state - isCooking:', this.isCooking, 'cookingTime:', this.cookingTime, 'cookingComplete:', this.cookingComplete, 'cookedFoodItem:', this.cookedFoodItem);

    // Enable lighting with a slightly brighter ambient color
    this.lights.enable().setAmbientColor(0x444444);

    // Load tilemap and add background
    const map = this.make.tilemap({ key: 'campsite_map' });
    const campsiteLayer = map.images.find(layer => layer.name === 'campsite');
    if (campsiteLayer) {
      this.add.image(0, 0, 'forest_night').setOrigin(0, 0).setScale(1).setPipeline('Light2D');
    }

    // Create player
    this.player = this.physics.add.sprite(288, 288, 'player')
      .setScale(2)
      .setDepth(2)
      .setPipeline('Light2D');
    this.player.pipelineData = { castShadows: false };
    this.player.body.setSize(24, 24).setOffset(12, 20);

    // Player animations
    this.anims.create({ key: 'idleDown', frames: this.anims.generateFrameNumbers('player', { start: 0, end: 5 }), frameRate: 10, repeat: -1 });
    this.anims.create({ key: 'moveRight', frames: this.anims.generateFrameNumbers('player', { start: 6, end: 11 }), frameRate: 10, repeat: -1 });
    this.anims.create({ key: 'idleUp', frames: this.anims.generateFrameNumbers('player', { start: 12, end: 17 }), frameRate: 10, repeat: -1 });
    this.anims.create({ key: 'moveDown', frames: this.anims.generateFrameNumbers('player', { start: 18, end: 23 }), frameRate: 10, repeat: -1 });
    this.anims.create({ key: 'moveLeft', frames: this.anims.generateFrameNumbers('player', { start: 24, end: 29 }), frameRate: 10, repeat: -1 });
    this.anims.create({ key: 'moveUp', frames: this.anims.generateFrameNumbers('player', { start: 30, end: 35 }), frameRate: 10, repeat: -1 });
    this.player.play('idleDown');

    // Create campfire
    const campfireLayer = map.getObjectLayer('campfire');
    if (campfireLayer && campfireLayer.objects.length > 0) {
      const campfireObj = campfireLayer.objects[0];
      const originalCampfireY = campfireObj.y + (campfireObj.height / 2) - 10;
      const campfireX = campfireObj.x + (campfireObj.width / 2);

      this.campfire = this.physics.add.sprite(campfireX, originalCampfireY, 'smoke')
        .setScale(0.5)
        .setDepth(1)
        .setPipeline('Light2D')
        .setOrigin(0.5, this.campfireOriginY);

      this.anims.create({ key: 'smokeRise', frames: this.anims.generateFrameNumbers('smoke', { start: 0, end: 4 }), frameRate: 5, repeat: -1 });
      this.campfire.play('smokeRise');

      this.anims.create({ key: 'campfireBurn', frames: this.anims.generateFrameNumbers('campfire', { start: 0, end: 3 }), frameRate: 10, repeat: -1 });

      this.campfireLight = this.lights.addLight(campfireX, originalCampfireY, 0, 0xffaa33, 3);
      if (this.isFireLit) {
        this.campfire.setTexture('campfire').play('campfireBurn');
        this.campfire.setScale(this.campfireScale).setOrigin(0.5, this.campfireOriginY);
        this.campfire.setY(originalCampfireY + 30);
        this.campfireLight.setRadius(this.lightRadius);
      }

      // Make campfire interactive
      this.campfire.setInteractive();
      this.campfire.on('pointerdown', this.handleFireClick, this);
    }

    // Create torch
    const torchLayer = map.getObjectLayer('site_torch');
    if (torchLayer && torchLayer.objects.length > 0) {
      const torchObj = torchLayer.objects[0];
      const originalTorchY = torchObj.y + (torchObj.height / 2) - 20;
      const torchX = torchObj.x + (torchObj.width / 2);

      this.torch = this.physics.add.sprite(torchX, originalTorchY, 'smoke')
        .setScale(0.25)
        .setDepth(1)
        .setPipeline('Light2D')
        .setOrigin(0.5, this.torchOriginY);
      this.torch.play('smokeRise');

      this.torchLight = this.lights.addLight(torchX, originalTorchY, 0, 0xffaa33, 3);
      if (this.isTorchLit) {
        this.torch.setTexture('campfire').play('campfireBurn');
        this.torch.setScale(this.torchScale).setOrigin(0.5, this.torchOriginY);
        this.torch.setY(originalTorchY + 30);
        this.torchLight.setRadius(this.torchLightRadius);
      }

      this.torchBurnMeter = this.add.graphics();
      this.updateTorchBurnMeter();
    }

    // Add dark overlay
    this.darkOverlay = this.add.rectangle(288, 288, 576, 576, 0x000000, 0.7)
      .setOrigin(0.5)
      .setDepth(3)
      .setPipeline('Light2D');
    this.darkOverlay.setBlendMode(Phaser.BlendModes.SCREEN);

    // Create burn meter
    this.burnMeter = this.add.graphics();
    this.updateBurnMeter();

    // Restore cooking UI and state
    if ((this.isCooking || this.cookingComplete) && this.cookingStartTime > 0) {
      this.skillet = this.add.image(this.campfire.x, this.campfire.y + 5, 'skillet').setScale(3).setDepth(2);
      this.progressBar = this.add.graphics().setDepth(3);

      // Calculate elapsed time since cooking started
      const currentTime = Date.now();
      const totalElapsedTime = Math.floor((currentTime - this.cookingStartTime) / 1000); // In seconds
      const adjustedCookingTime = this.cookingTime + totalElapsedTime;

      if (adjustedCookingTime >= this.cookingDuration) {
        // Cooking is complete
        this.cookingComplete = true;
        this.isCooking = false;
        this.progressBar.fillStyle(0x0000ff, 1);
        this.progressBar.fillRect(this.campfire.x - 25, this.campfire.y - 40, 50, 5);
        this.claimText = this.add.text(this.campfire.x, this.campfire.y - 60, 'Claim', {
          fontSize: '14px',
          color: '#ffffff'
        }).setOrigin(0.5).setDepth(3);

        // Update registry when cooking completes on restore
        this.registry.set('cookingState', {
          isCooking: false,
          cookingTime: adjustedCookingTime,
          cookingComplete: true,
          cookedFoodItem: this.cookedFoodItem,
          cookingStartTime: this.cookingStartTime
        });
      } else if (this.isFireLit) {
        // Resume cooking
        this.cookingTime = adjustedCookingTime;
        this.isCooking = true;
        this.progressBar.fillStyle(0x00ff00, 1);
        this.progressBar.fillRect(this.campfire.x - 25, this.campfire.y - 40, 50 * (this.cookingTime / this.cookingDuration), 5);
        this.cookingTimer = this.time.addEvent({
          delay: 1000,
          callback: this.updateCooking,
          callbackScope: this,
          loop: true
        });
      } else {
        // Fire is out, stop cooking and discard item
        this.isCooking = false;
        this.cookingComplete = false;
        this.skillet.destroy();
        this.progressBar.destroy();
        this.cookedFoodItem = null;

        // Update registry when cooking is discarded
        this.registry.set('cookingState', {
          isCooking: false,
          cookingTime: 0,
          cookingComplete: false,
          cookedFoodItem: null,
          cookingStartTime: 0
        });
      }
    }

    // Set world and camera bounds
    this.physics.world.setBounds(0, 0, 576, 576);
    this.cameras.main.setBounds(0, 0, 576, 576).startFollow(this.player, true);

    // Input setup
    this.cursors = this.input.keyboard.addKeys({
      up: Phaser.Input.Keyboard.KeyCodes.W,
      down: Phaser.Input.Keyboard.KeyCodes.S,
      left: Phaser.Input.Keyboard.KeyCodes.A,
      right: Phaser.Input.Keyboard.KeyCodes.D,
      stoke: Phaser.Input.Keyboard.KeyCodes.F,
      esc: Phaser.Input.Keyboard.KeyCodes.ESC,
      select: Phaser.Input.Keyboard.KeyCodes.ENTER,
      dialogUp: Phaser.Input.Keyboard.KeyCodes.UP,
      dialogDown: Phaser.Input.Keyboard.KeyCodes.DOWN,
      increaseQty: Phaser.Input.Keyboard.KeyCodes.RIGHT,
      decreaseQty: Phaser.Input.Keyboard.KeyCodes.LEFT
    });

    // Stoke fire or torch with F key
    this.input.keyboard.on('keydown-F', () => {
      if (!this.dialogVisible && !this.stokingDialogVisible) {
        const playerPos = this.player.getCenter();
        const campfirePos = this.campfire.getCenter();
        const distanceToCampfire = Phaser.Math.Distance.Between(playerPos.x, playerPos.y, campfirePos.x, campfirePos.y);

        if (distanceToCampfire < 50) {
          this.showStokingMenu('campfire');
        } else if (this.torch) {
          const torchPos = this.torch.getCenter();
          const distanceToTorch = Phaser.Math.Distance.Between(playerPos.x, playerPos.y, torchPos.x, torchPos.y);
          if (distanceToTorch < 50) {
            this.showStokingMenu('torch');
          }
        }
      }
    });

    // Exit with ESC key
    this.input.keyboard.on('keydown-ESC', () => {
      if (this.dialogVisible) {
        this.closeDialog();
      } else if (this.stokingDialogVisible) {
        this.closeStokingDialog();
      } else {
        this.returnToMainScene();
      }
    });

    // Dialog navigation with UP key
    this.input.keyboard.on('keydown-UP', () => {
      if (this.dialogVisible) {
        this.selectedItemIndex = Math.max(0, this.selectedItemIndex - 1);
        this.updateDialogSelection();
      } else if (this.stokingDialogVisible && !this.quantityInputVisible) {
        this.selectedItemIndex = Math.max(0, this.selectedItemIndex - 1);
        this.updateStokingDialogSelection();
      }
    });

    // Dialog navigation with DOWN key
    this.input.keyboard.on('keydown-DOWN', () => {
      if (this.dialogVisible) {
        this.selectedItemIndex = Math.min(this.cookableItems.length - 1, this.selectedItemIndex + 1);
        this.updateDialogSelection();
      } else if (this.stokingDialogVisible && !this.quantityInputVisible) {
        this.selectedItemIndex = Math.min(this.stokingItems.length - 1, this.selectedItemIndex + 1);
        this.updateStokingDialogSelection();
      }
    });

    // Quantity adjustment with LEFT and RIGHT keys
    this.input.keyboard.on('keydown-LEFT', () => {
      if (this.stokingDialogVisible && this.quantityInputVisible) {
        const maxQty = this.stokingItems[this.selectedItemIndex].quantity;
        this.selectedQuantity = Math.max(1, this.selectedQuantity - 1);
        this.updateQuantityInput(maxQty);
      }
    });

    this.input.keyboard.on('keydown-RIGHT', () => {
      if (this.stokingDialogVisible && this.quantityInputVisible) {
        const maxQty = this.stokingItems[this.selectedItemIndex].quantity;
        this.selectedQuantity = Math.min(maxQty, this.selectedQuantity + 1);
        this.updateQuantityInput(maxQty);
      }
    });

    // Select item with ENTER key
    this.input.keyboard.on('keydown-ENTER', () => {
      if (this.dialogVisible) {
        this.selectCookableItem();
      } else if (this.stokingDialogVisible) {
        if (!this.quantityInputVisible) {
          this.showQuantityInput();
        } else {
          this.useStokingItem();
        }
      }
    });

    // Start burn timer
    this.startBurnTimer();
  }

  update() {
    this.player.setVelocity(0);
    if (this.cursors.left.isDown) {
      this.player.setVelocityX(-100).anims.play('moveLeft', true);
    } else if (this.cursors.right.isDown) {
      this.player.setVelocityX(100).anims.play('moveRight', true);
    } else if (this.cursors.up.isDown) {
      this.player.setVelocityY(-100).anims.play('moveUp', true);
    } else if (this.cursors.down.isDown) {
      this.player.setVelocityY(100).anims.play('moveDown', true);
    } else {
      this.player.anims.play('idleDown', true);
    }
  }

  // **Added: Method to update stats display**
  updateStatsText() {
    this.statsText.setText(
      `Health: ${this.playerStats.health}\n` +
      `Stamina: ${this.playerStats.stamina}\n` +
      `Hunger: ${this.playerStats.hunger}\n` +
      `Thirst: ${this.playerStats.thirst}\n` +
      `Oromozi: ${this.playerStats.oromozi}`
    );
  }

  stokeFire(item, quantity) {
    if (this.currentStokes < this.maxStokes) {
      const name = item.name.toLowerCase();
      let stokes = 0;

      if (name.includes("wood")) stokes = 3;
      else if (name === "lint" || name === "trash") stokes = 0.1;

      if (stokes > 0) {
        item.quantity -= quantity;
        if (item.quantity <= 0) {
          const index = this.inventory.indexOf(item);
          if (index > -1) this.inventory.splice(index, 1);
        }

        const totalStokes = stokes * quantity;
        this.currentStokes = Math.min(this.currentStokes + totalStokes, this.maxStokes);
        this.burnTime = this.currentStokes * 30;

        this.lightRadius = Math.min(this.lightRadius + (20 * totalStokes), this.maxLightRadius);
        this.campfireLight.setRadius(this.lightRadius);
        this.campfireScale = Math.min(this.campfireScale + (0.1 * totalStokes), this.maxCampfireScale);
        this.campfireOriginY = Math.min(this.campfireOriginY + (0.01 * totalStokes), this.maxCampfireOriginY);
        if (!this.isFireLit) {
          this.campfire.setY(this.campfire.y + 30);
        }
        this.campfire.setScale(this.campfireScale).setOrigin(0.5, this.campfireOriginY);

        if (!this.isFireLit) {
          this.isFireLit = true;
          this.campfire.setTexture('campfire').play('campfireBurn');
        }

        this.updateBurnMeter();
        console.log(`Stoked campfire with ${quantity} ${item.name}! Stokes: ${this.currentStokes}, Burn time: ${this.burnTime}s`);

        // Update fire state in registry
        this.registry.set('fireState', {
          isFireLit: this.isFireLit,
          burnTime: this.burnTime,
          currentStokes: this.currentStokes,
          lightRadius: this.lightRadius,
          campfireScale: this.campfireScale,
          campfireOriginY: this.campfireOriginY
        });
      }
    } else {
      console.log("Max stokes reached for campfire!");
    }
  }

  stokeTorch(item, quantity) {
    if (this.torchCurrentStokes < this.maxStokes) {
      const name = item.name.toLowerCase();
      let stokes = 0;

      if (name.includes("wood")) stokes = 3;
      else if (name === "lint" || name === "trash") stokes = 0.1;

      if (stokes > 0) {
        item.quantity -= quantity;
        if (item.quantity <= 0) {
          const index = this.inventory.indexOf(item);
          if (index > -1) this.inventory.splice(index, 1);
        }

        const totalStokes = stokes * quantity;
        this.torchCurrentStokes = Math.min(this.torchCurrentStokes + totalStokes, this.maxStokes);
        this.torchBurnTime = this.torchCurrentStokes * 30;

        this.torchLightRadius = Math.min(this.torchLightRadius + (20 * totalStokes), this.maxLightRadius);
        this.torchLight.setRadius(this.torchLightRadius);
        this.torchScale = Math.min(this.torchScale + (0.1 * totalStokes), this.maxTorchScale);
        this.torchOriginY = Math.min(this.torchOriginY + (0.01 * totalStokes), this.maxTorchOriginY);
        if (!this.isTorchLit) {
          this.torch.setY(this.torch.y + 30);
        }
        this.torch.setScale(this.torchScale).setOrigin(0.5, this.torchOriginY);

        if (!this.isTorchLit) {
          this.isTorchLit = true;
          this.torch.setTexture('campfire').play('campfireBurn');
        }

        this.updateTorchBurnMeter();
        console.log(`Stoked torch with ${quantity} ${item.name}! Stokes: ${this.torchCurrentStokes}, Burn time: ${this.torchBurnTime}s`);

        // Update torch state in registry
        this.registry.set('torchState', {
          isTorchLit: this.isTorchLit,
          torchBurnTime: this.torchBurnTime,
          torchCurrentStokes: this.torchCurrentStokes,
          torchLightRadius: this.torchLightRadius,
          torchScale: this.torchScale,
          torchOriginY: this.torchOriginY
        });
      }
    } else {
      console.log("Max stokes reached for torch!");
    }
  }

  findStokeItems() {
    return this.inventory.filter(item => {
      const name = item.name.toLowerCase();
      return (name.includes("wood") || name === "lint" || name === "trash") && item.quantity > 0;
    });
  }

  showStokingMenu(target) {
    this.stokingItems = this.findStokeItems();
    if (this.stokingItems.length === 0) {
      console.log(`No stoking items in inventory for ${target}!`);
      return;
    }

    this.stokingDialogVisible = true;
    this.stokingTarget = target;
    this.selectedItemIndex = 0;
    this.quantityInputVisible = false;
    this.selectedQuantity = 1;

    this.stokingDialogBox = this.add.rectangle(288, 288, 200, 150, 0x000000, 0.9).setDepth(5);
    this.stokingDialogBox.setStrokeStyle(2, 0xffffff, 1);

    this.stokingDialogTitle = this.add.text(288, 230, 'Select Item to Stoke', { fontSize: '16px', color: '#ffffff' })
      .setOrigin(0.5)
      .setDepth(6);

    this.stokingDialogTextItems = [];
    this.stokingItems.forEach((item, index) => {
      const text = this.add.text(288, 260 + index * 20, `${item.name} (x${item.quantity})`, { fontSize: '14px', color: '#ffffff' })
        .setOrigin(0.5)
        .setDepth(6);
      this.stokingDialogTextItems.push(text);
    });

    this.updateStokingDialogSelection();
  }

  updateStokingDialogSelection() {
    this.stokingDialogTextItems.forEach((text, index) => {
      text.setColor(index === this.selectedItemIndex ? '#ffff00' : '#ffffff');
    });
  }

  showQuantityInput() {
    this.quantityInputVisible = true;
    const selectedItem = this.stokingItems[this.selectedItemIndex];
    const maxQty = selectedItem.quantity;

    this.stokingDialogTextItems.forEach(text => text.destroy());
    this.stokingDialogTextItems = [];

    const text = this.add.text(288, 260, `How many ${selectedItem.name} to use?`, { fontSize: '14px', color: '#ffffff' })
      .setOrigin(0.5)
      .setDepth(6);
    this.stokingDialogTextItems.push(text);

    this.quantityInputText = this.add.text(288, 280, `Quantity: ${this.selectedQuantity} (Max: ${maxQty})`, { fontSize: '14px', color: '#ffffff' })
      .setOrigin(0.5)
      .setDepth(6);
    this.stokingDialogTextItems.push(this.quantityInputText);
  }

  updateQuantityInput(maxQty) {
    this.quantityInputText.setText(`Quantity: ${this.selectedQuantity} (Max: ${maxQty})`);
  }

  useStokingItem() {
    const selectedItem = this.stokingItems[this.selectedItemIndex];
    const quantity = this.selectedQuantity;

    if (this.stokingTarget === 'campfire') {
      this.stokeFire(selectedItem, quantity);
    } else if (this.stokingTarget === 'torch') {
      this.stokeTorch(selectedItem, quantity);
    }

    this.closeStokingDialog();
  }

  closeStokingDialog() {
    this.stokingDialogVisible = false;
    if (this.stokingDialogBox) this.stokingDialogBox.destroy();
    if (this.stokingDialogTitle) this.stokingDialogTitle.destroy();
    this.stokingDialogTextItems.forEach(text => text.destroy());
    this.stokingDialogTextItems = [];
    this.stokingItems = [];
    this.stokingTarget = null;
    this.quantityInputVisible = false;
    this.selectedItemIndex = 0;
    this.selectedQuantity = 1;
    if (this.quantityInputText) {
      this.quantityInputText.destroy();
      this.quantityInputText = null;
    }
  }

  updateBurnMeter() {
    this.burnMeter.clear();
    const meterX = this.campfire.x + 40;
    const meterY = this.campfire.y - 20;
    const meterWidth = 50;
    const meterHeight = 10;
    const maxBurnTime = this.maxStokes * 30;
    const remainingPercent = this.burnTime / maxBurnTime;

    this.burnMeter.fillStyle(0x000000, 0.7).fillRect(meterX, meterY, meterWidth, meterHeight);
    this.burnMeter.fillStyle(0xffaa33, 1).fillRect(meterX, meterY, meterWidth * remainingPercent, meterHeight);
    this.burnMeter.setDepth(4);
  }

  updateTorchBurnMeter() {
    this.torchBurnMeter.clear();
    const meterX = this.torch.x + 40;
    const meterY = this.torch.y - 20;
    const meterWidth = 50;
    const meterHeight = 10;
    const maxBurnTime = this.maxStokes * 30;
    const remainingPercent = this.torchBurnTime / maxBurnTime;

    this.torchBurnMeter.fillStyle(0x000000, 0.7).fillRect(meterX, meterY, meterWidth, meterHeight);
    this.torchBurnMeter.fillStyle(0xffaa33, 1).fillRect(meterX, meterY, meterWidth * remainingPercent, meterHeight);
    this.torchBurnMeter.setDepth(4);
  }

  startBurnTimer() {
    if (this.timerEvent) this.timerEvent.remove();
    this.timerEvent = this.time.addEvent({
      delay: 1000,
      callback: () => {
        if (this.burnTime > 0) {
          this.burnTime--;
          this.updateBurnMeter();
          if (this.burnTime <= 0) this.extinguishFire();
        }
        if (this.torch && this.torchBurnTime > 0) {
          this.torchBurnTime--;
          this.updateTorchBurnMeter();
          if (this.torchBurnTime <= 0) this.extinguishTorch();
        }
      },
      loop: true
    });
  }

  extinguishFire() {
    this.lightRadius = 0;
    this.campfireLight.setRadius(this.lightRadius);
    this.campfireScale = 0.5;
    this.campfire.setScale(this.campfireScale);
    this.isFireLit = false;
    this.campfire.anims.stop().setTexture('smoke').play('smokeRise');
    if (this.isCooking && !this.cookingComplete) {
      this.isCooking = false;
      if (this.cookingTimer) this.cookingTimer.remove();
      if (this.skillet) this.skillet.destroy();
      if (this.progressBar) this.progressBar.destroy();
      if (this.claimText) this.claimText.destroy();
      this.cookingComplete = false;
      this.cookedFoodItem = null;
      console.log("Cooking stopped: Fire is out!");

      // Update cooking state in registry
      this.registry.set('cookingState', {
        isCooking: false,
        cookingTime: 0,
        cookingComplete: false,
        cookedFoodItem: null,
        cookingStartTime: 0
      });
    }
    console.log("Fire extinguished!");

    // Update fire state in registry
    this.registry.set('fireState', {
      isFireLit: false,
      burnTime: 0,
      currentStokes: 0,
      lightRadius: 0,
      campfireScale: this.campfireScale,
      campfireOriginY: this.campfireOriginY
    });
  }

  extinguishTorch() {
    this.torchLightRadius = 0;
    this.torchLight.setRadius(this.torchLightRadius);
    this.torchScale = 0.25;
    this.torch.setScale(this.torchScale);
    this.isTorchLit = false;
    this.torch.anims.stop().setTexture('smoke').play('smokeRise');
    console.log("Torch extinguished!");

    // Update torch state in registry
    this.registry.set('torchState', {
      isTorchLit: false,
      torchBurnTime: 0,
      torchCurrentStokes: 0,
      torchLightRadius: 0,
      torchScale: this.torchScale,
      torchOriginY: this.torchOriginY
    });
  }

  returnToMainScene() {
    if (this.timerEvent) this.timerEvent.remove();
    if (this.cookingTimer) this.cookingTimer.remove();
    if (this.regenTimer) this.regenTimer.remove(); // **Added: Clean up regeneration timer**

    // Update registry with current states before leaving
    this.registry.set('cookingState', {
      isCooking: this.isCooking,
      cookingTime: this.cookingTime,
      cookingComplete: this.cookingComplete,
      cookedFoodItem: this.cookedFoodItem,
      cookingStartTime: this.cookingStartTime
    });

    this.registry.set('fireState', {
      isFireLit: this.isFireLit,
      burnTime: this.burnTime,
      currentStokes: this.currentStokes,
      lightRadius: this.lightRadius,
      campfireScale: this.campfireScale,
      campfireOriginY: this.campfireOriginY
    });

    this.registry.set('torchState', {
      isTorchLit: this.isTorchLit,
      torchBurnTime: this.torchBurnTime,
      torchCurrentStokes: this.torchCurrentStokes,
      torchLightRadius: this.torchLightRadius,
      torchScale: this.torchScale,
      torchOriginY: this.torchOriginY
    });

    const mainScene = this.scene.get('MainGameScene');
    this.scene.start('MainGameScene', {
      zone: zoneList.find(z => z.name === "Village"),
      inventory: this.inventory,
      promptCount: mainScene ? mainScene.promptCount : 0,
      playerStats: this.playerStats // **Added: Pass updated player stats back**
    });
  }

  handleFireClick() {
    if (this.isFireLit && !this.isCooking && !this.cookingComplete) {
      this.cookableItems = this.inventory.filter(item => item.name.toLowerCase() === 'cod');
      if (this.cookableItems.length > 0) {
        this.showDialog();
      } else {
        console.log("No food items in inventory!");
      }
    } else if (this.cookingComplete) {
      this.claimCookedFood();
    }
  }

  showDialog() {
    this.dialogVisible = true;
    this.selectedItemIndex = 0;

    this.dialogBox = this.add.rectangle(288, 288, 200, 150, 0x000000, 0.9).setDepth(5);
    this.dialogBox.setStrokeStyle(2, 0xffffff, 1);

    this.dialogTitle = this.add.text(288, 230, 'Select Item to Cook', { fontSize: '16px', color: '#ffffff' })
      .setOrigin(0.5)
      .setDepth(6);

    this.dialogTextItems = [];
    this.cookableItems.forEach((item, index) => {
      const text = this.add.text(288, 260 + index * 20, item.name, { fontSize: '14px', color: '#ffffff' })
        .setOrigin(0.5)
        .setDepth(6);
      this.dialogTextItems.push(text);
    });

    this.updateDialogSelection();
  }

  updateDialogSelection() {
    this.dialogTextItems.forEach((text, index) => {
      text.setColor(index === this.selectedItemIndex ? '#ffff00' : '#ffffff');
    });
  }

  selectCookableItem() {
    const selectedItem = this.cookableItems[this.selectedItemIndex];
    this.closeDialog();
    this.startCooking(selectedItem);
  }

  closeDialog() {
    this.dialogVisible = false;
    if (this.dialogBox) this.dialogBox.destroy();
    if (this.dialogTitle) this.dialogTitle.destroy();
    this.dialogTextItems.forEach(text => text.destroy());
    this.dialogTextItems = [];
    this.cookableItems = [];
    this.selectedItemIndex = 0;
    this.dialogTitle = null;
  }

  startCooking(foodItem) {
    const index = this.inventory.findIndex(item => item.name.toLowerCase() === foodItem.name.toLowerCase());
    if (index > -1) {
      this.inventory.splice(index, 1); // Remove item immediately
    }

    this.cookingStartTime = Date.now(); // Record start time

    this.skillet = this.add.image(this.campfire.x, this.campfire.y + 5, 'skillet').setScale(3).setDepth(2);
    this.isCooking = true;
    this.cookingTime = 0;
    this.cookingComplete = false;
    this.cookedFoodItem = { name: 'Cooked ' + foodItem.name, quantity: 1 };

    this.progressBar = this.add.graphics().setDepth(3);
    this.updateCooking();

    this.cookingTimer = this.time.addEvent({
      delay: 1000,
      callback: this.updateCooking,
      callbackScope: this,
      loop: true
    });

    // Update cooking state in registry
    this.registry.set('cookingState', {
      isCooking: true,
      cookingTime: 0,
      cookingComplete: false,
      cookedFoodItem: this.cookedFoodItem,
      cookingStartTime: this.cookingStartTime
    });
  }

  updateCooking() {
    if (this.isCooking && this.isFireLit) {
      this.cookingTime++;
      const progress = this.cookingTime / this.cookingDuration;
      this.progressBar.clear();

      if (this.cookingTime >= this.cookingDuration) {
        this.isCooking = false;
        this.cookingComplete = true;
        this.cookingTimer.remove();
        console.log("Cooking complete! Click to claim.");

        this.progressBar.fillStyle(0x0000ff, 1);
        this.progressBar.fillRect(this.campfire.x - 25, this.campfire.y - 40, 50, 5);

        if (!this.claimText) {
          this.claimText = this.add.text(this.campfire.x, this.campfire.y - 60, 'Claim', { fontSize: '14px', color: '#ffffff' })
            .setOrigin(0.5)
            .setDepth(3);
        }

        // Update cooking state in registry
        this.registry.set('cookingState', {
          isCooking: false,
          cookingTime: this.cookingTime,
          cookingComplete: true,
          cookedFoodItem: this.cookedFoodItem,
          cookingStartTime: this.cookingStartTime
        });
      } else {
        this.progressBar.fillStyle(0x00ff00, 1);
        this.progressBar.fillRect(this.campfire.x - 25, this.campfire.y - 40, 50 * progress, 5);
      }
    }
  }

  claimCookedFood() {
    if (this.cookingComplete) {
      this.inventory.push(this.cookedFoodItem);
      this.skillet.destroy();
      this.progressBar.destroy();
      if (this.claimText) {
        this.claimText.destroy();
        this.claimText = null;
      }
      this.cookingComplete = false;
      this.cookedFoodItem = null;
      console.log("Claimed cooked food:", this.inventory);

      // Update cooking state in registry
      this.registry.set('cookingState', {
        isCooking: false,
        cookingTime: 0,
        cookingComplete: false,
        cookedFoodItem: null,
        cookingStartTime: 0
      });
    }
  }
}
</file>

<file path="assets/data/narrativeprompt.json">
{
  "zones": {
    "Outer Grasslands": [
      {
        "prompt": "A gentle breeze carries the scent of fresh hay and wildflowers. You sense a hidden bounty nearby.",
        "options": [
          "Follow the scent.",
          "Collect a few wild herbs.",
          "Continue walking."
        ],
        "outcomes": [
          "You discover a small cache of herbs. (+5 Health, +7 Hunger)",
          "The herbs boost your vitality. (+7 Thirst, +7 Stamina)",
          "You miss the bounty and tire slightly. (-7 Stamina)"
        ]
      },
      {
        "prompt": "The tall grass ripples like a sea, and in its swaying there is a glimmer of something unusual.",
        "options": [
          "Investigate the glimmer.",
          "Rush past it.",
          "Take a moment to observe."
        ],
        "outcomes": [
          "You only find a broken tool. Nothing changes.",
          "In your haste, you trip and lose a bit of stamina. (-7 Stamina)",
          "Observing the area reveals a path to Shady Grove. (Travel to Shady Grove)"
        ]
      },
      {
        "prompt": "Sunlight dances on the dew-covered grass as you notice small animal tracks along a winding path.",
        "options": [
          "Follow the tracks.",
          "Examine the surrounding flowers.",
          "Ignore and move on."
        ],
        "outcomes": [
          "The tracks lead to a patch of nourishing berries. (+7 Hunger, +7 Stamina)",
          "You find only dried leaves, offering no real benefit.",
          "The path offers no reward; you lose a little energy. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A soft rustling in the grass hints at movement—a possible creature or a hidden item.",
        "options": [
          "Investigate the rustling.",
          "Hide and observe.",
          "Ignore it completely."
        ],
        "outcomes": [
          "A small animal scampers away, leaving behind a rare trinket. (+Loot)",
          "Your cautious watchfulness restores your focus. (+7 Stamina)",
          "Ignoring the noise leaves you with a mild loss of energy. (-7 Stamina)"
        ]
      },
      {
        "prompt": "The sound of distant birds fills the air as the landscape stretches out in a gentle, inviting panorama.",
        "options": [
          "Sit and enjoy the view.",
          "Search for any hidden objects.",
          "Start walking to explore further."
        ],
        "outcomes": [
          "The calm moment rejuvenates you. (+7 Stamina)",
          "You discover a small, useful item hidden among the tall grass. (+Loot)",
          "The time passing causes you to lose a bit of focus. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A patch of wild berries glows in the morning light, their colors vivid against the green grass.",
        "options": [
          "Pick and eat the berries.",
          "Examine them carefully.",
          "Ignore and keep moving."
        ],
        "outcomes": [
          "The berries refresh you greatly. (+7 Hunger, +7 Thirst)",
          "You learn which berries are safe and collect some. (+Loot)",
          "You bypass the patch, missing a chance to refuel. (-7 Stamina)"
        ]
      },
      {
        "prompt": "In the distance, a solitary tree offers a welcome patch of shade on a sunny day.",
        "options": [
          "Rest under the tree.",
          "Search the area around the tree.",
          "Keep moving in the sunlight."
        ],
        "outcomes": [
          "The rest restores your stamina. (+7 Stamina)",
          "Beneath the tree you find a hidden trinket. (+Loot)",
          "Exposure to the sun saps a little of your energy. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A gentle stream meanders through the grasslands, its clear water inviting you to take a sip.",
        "options": [
          "Drink from the stream.",
          "Follow the stream upstream.",
          "Ignore the stream."
        ],
        "outcomes": [
          "The water quenches your thirst. (+7 Thirst)",
          "Following the stream leads to a hidden cache. (+Loot)",
          "You miss the chance to rehydrate and feel a little drained. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A curious glint catches your eye near a clump of wild grass.",
        "options": [
          "Investigate the glint.",
          "Brush aside the grass and move on.",
          "Take a cautious peek and then continue."
        ],
        "outcomes": [
          "You uncover some worthless scraps. Nothing changes.",
          "Your cautious step leaves you a bit winded. (-7 Stamina)",
          "You get a fleeting glimpse of treasure but nothing more. (-7 Stamina)"
        ]
      },
      {
        "prompt": "The air is filled with the hum of insects as the grass sways gently in the breeze.",
        "options": [
          "Search the area for natural remedies.",
          "Rest and listen to the sound.",
          "Quickly pass through."
        ],
        "outcomes": [
          "You find a patch of healing herbs. (+5 Health, +7 Stamina)",
          "The peaceful rest gives you a small boost. (+7 Stamina)",
          "Hurrying on, you lose some energy. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A soft mist begins to settle over the grasslands as morning turns to noon.",
        "options": [
          "Embrace the mist and search for hidden dew drops.",
          "Walk through the mist, alert for any movement.",
          "Stop to rest in the cooling air."
        ],
        "outcomes": [
          "You collect dew that refreshes you. (+7 Thirst, +7 Stamina)",
          "The mist hides minor dangers, and you lose a bit of stamina. (-7 Stamina)",
          "Resting in the mist restores your energy. (+7 Stamina)"
        ]
      },
      {
        "prompt": "A distant rumble suggests the approach of a light storm over the fields.",
        "options": [
          "Seek shelter under a large bush.",
          "Press on quickly to outrun the storm.",
          "Observe the storm from a safe distance."
        ],
        "outcomes": [
          "The shelter keeps you safe and refreshed. (+7 Stamina)",
          "You feel the storm’s chill sap your energy. (-7 Thirst, -7 Stamina)",
          "Watching the storm leaves you both awed and slightly drained. (-7 Stamina)"
        ]
      },
      {
        "prompt": "The grasslands reveal a shallow, sparkling pool that reflects the clear sky.",
        "options": [
          "Drink from the pool.",
          "Search the pool’s edge for items.",
          "Ignore the pool and continue your journey."
        ],
        "outcomes": [
          "The cool water restores your thirst. (+7 Thirst)",
          "You find only worthless shells. Nothing changes.",
          "Not stopping to refresh leaves you a bit parched. (-7 Thirst)"
        ]
      },
      {
        "prompt": "A series of small mounds and gentle slopes create a natural, rolling landscape.",
        "options": [
          "Climb one of the mounds for a better view.",
          "Stroll across the rolling hills.",
          "Sit and enjoy the gentle motion."
        ],
        "outcomes": [
          "The climb gives you a burst of energy. (+7 Stamina)",
          "Walking the hills is pleasant but tires you slightly. (-7 Stamina)",
          "Resting in the valley rejuvenates you. (+7 Stamina)"
        ]
      },
      {
        "prompt": "A flock of birds takes flight suddenly, scattering in every direction.",
        "options": [
          "Follow the birds to see where they lead.",
          "Stand still and watch their flight.",
          "Continue on without distraction."
        ],
        "outcomes": [
          "Following the birds reveals a secret cache. (+Loot)",
          "The spectacle leaves you inspired. (+7 Stamina)",
          "Missing the chance to follow costs you a little energy. (-7 Stamina)"
        ]
      },
      {
        "prompt": "The landscape shifts as you notice a change in the color of the grass and soil.",
        "options": [
          "Investigate the change.",
          "Collect samples of the soil.",
          "Ignore and move on."
        ],
        "outcomes": [
          "The investigation uncovers a hidden herb patch. (+5 Health, +7 Hunger)",
          "Your careful collection yields a clue to the next zone. (Travel to Shady Grove)",
          "You pass by without gain and lose a bit of stamina. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A narrow trail marked by broken twigs appears to lead into a quieter part of the grasslands.",
        "options": [
          "Follow the trail.",
          "Inspect the broken twigs.",
          "Decide not to risk it and stay on the main path."
        ],
        "outcomes": [
          "The trail leads to a path toward Shady Grove. (Travel to Shady Grove)",
          "The clues in the twigs boost your confidence. (+7 Stamina)",
          "Staying on the main path leaves you with minor fatigue. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A soft, rhythmic sound comes from a cluster of nearby bushes.",
        "options": [
          "Investigate the sound.",
          "Carefully search the bushes for items.",
          "Ignore the sound and continue walking."
        ],
        "outcomes": [
          "The sound reveals a secret compartment with useful items. (+Loot)",
          "Your careful search restores your energy. (+7 Stamina)",
          "Missing the sound costs you a slight loss of stamina. (-7 Stamina)"
        ]
      },
      {
        "prompt": "The landscape opens into a wide, sunlit plain with a distant shimmer on the horizon.",
        "options": [
          "Head toward the shimmer.",
          "Stop to rest and take in the view.",
          "Venture off the beaten path."
        ],
        "outcomes": [
          "Approaching the shimmer reveals a route to Shady Grove. (Travel to Shady Grove)",
          "The rest gives you a compound boost. (+7 Thirst, +7 Stamina)",
          "Venting your curiosity drains your energy. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A soft rain begins to fall over the grasslands, gently refreshing the earth.",
        "options": [
          "Dance in the rain.",
          "Collect the fresh droplets with your hands.",
          "Take shelter and watch the rain."
        ],
        "outcomes": [
          "Dancing in the rain revitalizes you. (+5 Health, +7 Stamina)",
          "The water you collect quenches your thirst. (+7 Thirst)",
          "Waiting out the rain leaves you a bit damp and tired. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A distant rumble of thunder hints at an approaching storm.",
        "options": [
          "Seek shelter quickly.",
          "Search for any items before the storm hits.",
          "Hurry on and hope for the best."
        ],
        "outcomes": [
          "Sheltered, you regain a bit of energy. (+7 Stamina)",
          "Your search uncovers a useful trinket. (+Loot)",
          "Hurrying on, you lose a bit of health. (-7 Health)"
        ]
      },
      {
        "prompt": "A patch of wild mint grows near a small dry creek bed.",
        "options": [
          "Collect and chew the mint.",
          "Examine the mint for medicinal properties.",
          "Ignore the mint."
        ],
        "outcomes": [
          "The mint refreshes you subtly. (+7 Thirst)",
          "You discover its thirst-quenching properties. (+7 Thirst, +7 Stamina)",
          "Ignoring it leaves you with a mild loss of energy. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A colorful butterfly flutters by, landing briefly on a flower.",
        "options": [
          "Follow the butterfly.",
          "Take a picture of the moment.",
          "Simply watch and enjoy."
        ],
        "outcomes": [
          "Following it leads you to a hidden patch of resources. (+Loot)",
          "The memory boosts your morale. (+7 Stamina)",
          "You remain stationary and lose a bit of time. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A gentle murmur of a hidden brook tempts you from the tall grass.",
        "options": [
          "Investigate the source of the murmur.",
          "Sit and listen for clues.",
          "Ignore and keep moving."
        ],
        "outcomes": [
          "The brook reveals a cache of fresh water. (+7 Thirst)",
          "Listening restores your calm and energy. (+7 Stamina)",
          "You pass by and feel slightly dehydrated. (-7 Thirst)"
        ]
      },
      {
        "prompt": "The landscape shows a subtle change in terrain as rolling hills become more prominent.",
        "options": [
          "Climb one of the hills.",
          "Search the slopes for hidden items.",
          "Walk along the base."
        ],
        "outcomes": [
          "The climb rewards you with a view and a small loot. (+Loot)",
          "You find only dust on the slopes. Nothing changes.",
          "Strolling at the base tires you slightly. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A soft, distant melody seems to float on the breeze.",
        "options": [
          "Follow the sound.",
          "Sit and let the melody soothe you.",
          "Ignore and remain alert."
        ],
        "outcomes": [
          "The melody leads you to an unexpected bounty. (+Loot)",
          "The soothing sound gives you a compound boost. (+5 Health, +7 Stamina)",
          "Staying alert costs you some energy. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A scattering of autumn-like leaves dances in the wind, unusual for the season.",
        "options": [
          "Collect the colorful leaves.",
          "Search among them for hidden treasures.",
          "Let them fall and move on."
        ],
        "outcomes": [
          "The leaves conceal a small stash of supplies. (+Loot)",
          "Your careful search yields a compound bonus. (+7 Thirst, +7 Hunger)",
          "You feel a slight chill as you move on. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A distant hilltop catches your eye with a glint of light reflecting off its surface.",
        "options": [
          "Head toward the hilltop.",
          "Examine the surrounding terrain.",
          "Continue along your current path."
        ],
        "outcomes": [
          "The hilltop hides a cache of fresh resources. (+Loot)",
          "Your examination boosts your alertness. (+7 Stamina)",
          "Missing the hilltop, you lose a bit of energy. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A solitary wild apple hangs from a low branch on a scraggly tree.",
        "options": [
          "Pick the apple and eat it.",
          "Examine the tree for more fruit.",
          "Leave the apple undisturbed."
        ],
        "outcomes": [
          "The apple restores your hunger. (+7 Hunger, +7 Stamina)",
          "Searching the tree yields a small bonus. (+Loot)",
          "Ignoring it leaves you slightly hungry. (-7 Hunger)"
        ]
      },
      {
        "prompt": "A soft murmur of a hidden wind chime echoes faintly in the distance.",
        "options": [
          "Follow the sound to its source.",
          "Try to catch a glimpse of the chime.",
          "Ignore and keep walking."
        ],
        "outcomes": [
          "The sound leads you to a secret stash. (+Loot)",
          "Catching a glimpse restores your energy. (+7 Stamina)",
          "Missing the chime, you lose a little focus. (-7 Stamina)"
        ]
      },
      {
        "prompt": "The early afternoon sun casts long shadows over the grass, highlighting subtle features of the land.",
        "options": [
          "Study the shadows for clues.",
          "Rest in the cool shade they provide.",
          "Push onward in the bright light."
        ],
        "outcomes": [
          "Your study reveals a hidden path. (+Loot)",
          "Resting gives you a combined boost. (+7 Stamina, +7 Thirst)",
          "Striding on without rest costs you energy. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A small, abandoned campsite lies quiet in a secluded part of the grasslands.",
        "options": [
          "Search the campsite for useful items.",
          "Sit quietly to rest.",
          "Leave the area immediately."
        ],
        "outcomes": [
          "You uncover a few supplies left behind. (+Loot)",
          "The rest refreshes you well. (+5 Health, +7 Stamina)",
          "Leaving in haste, you feel a pang of regret. (-7 Stamina)"
        ]
      },
      {
        "prompt": "As dusk approaches, the grasslands glow with a warm, amber light.",
        "options": [
          "Admire the sunset.",
          "Search for hidden items in the fading light.",
          "Quickly set up camp."
        ],
        "outcomes": [
          "The sunset fills you with calm energy. (+7 Stamina)",
          "Your search reveals a small, valuable trinket. (+Loot)",
          "Setting up camp hastily drains your energy. (-7 Stamina)"
        ]
      },
      {
        "prompt": "Night falls and the stars emerge over the grasslands, twinkling in the clear sky.",
        "options": [
          "Gaze at the stars and meditate.",
          "Search for nocturnal clues.",
          "Keep moving despite the darkness."
        ],
        "outcomes": [
          "The starlight inspires you, boosting your health. (+5 Health, +7 Stamina)",
          "Your careful search yields a hidden loot. (+Loot)",
          "Moving in the dark causes minor injuries. (-7 Health)"
        ]
      },
      {
        "prompt": "You come across a small, serene pond hidden among the tall grass.",
        "options": [
          "Try fishing in the pond.",
          "Drink from the pond.",
          "Search the area around the pond."
        ],
        "outcomes": [
          "You decide to try fishing. (Transition to FishingScene)",
          "The water refreshes you. (+7 Thirst)",
          "You find some useful herbs nearby. (+5 Health)"
        ]
      }
    ],
    "Shady Grove": [
      {
        "prompt": "In the dappled light of the grove, ancient trees whisper secrets of times past.",
        "options": [
          "Listen closely to the whispers.",
          "Search beneath the trees for items.",
          "Tread quietly on the winding path."
        ],
        "outcomes": [
          "You carefully listen but find only silent trees. Nothing happens.",
          "Your search finds a rare herb. (+7 Health, +7 Stamina)",
          "Treading silently drains you a bit. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A narrow path winds deeper into the grove where the canopy darkens the forest floor.",
        "options": [
          "Follow the path cautiously.",
          "Inspect the moss-covered stones.",
          "Stay at the edge and observe."
        ],
        "outcomes": [
          "The path leads to a secret glen with supplies. (+Loot)",
          "You uncover medicinal herbs. (+7 Health, +7 Thirst)",
          "Observing from the edge reveals a path to Arid Desert. (Travel to Arid Desert)"
        ]
      },
      {
        "prompt": "The grove grows dense and mysterious as shadows lengthen among the trees.",
        "options": [
          "Venture into the deeper shadows.",
          "Pick a cluster of unusual flowers.",
          "Mark your trail and move on."
        ],
        "outcomes": [
          "You wander the shadows but find only damp bark. Nothing changes.",
          "The flowers release a soothing aroma. (+7 Health, +7 Stamina)",
          "Marking your trail slows you down. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A gentle stream winds its way through the grove, its water dark and reflective.",
        "options": [
          "Drink from the stream.",
          "Follow it upstream for clues.",
          "Sit beside it and rest."
        ],
        "outcomes": [
          "The water revitalizes you. (+7 Thirst, +7 Stamina)",
          "Following the stream leads nowhere special. Nothing changes.",
          "Resting in the cool shade refreshes you. (+7 Health)"
        ]
      },
      {
        "prompt": "A low-hanging branch drips with condensation in the cool air of the grove.",
        "options": [
          "Break off a droplet for a drink.",
          "Examine the branch for carvings.",
          "Ignore it and continue on."
        ],
        "outcomes": [
          "The drink gives you a minor boost. (+7 Thirst)",
          "Carvings reveal ancient lore and a hidden path. (+Loot)",
          "Not engaging with it leaves you slightly unprepared. (-7 Stamina)"
        ]
      },
      {
        "prompt": "The air in the grove is heavy with mystery as a faint, eerie hum resonates.",
        "options": [
          "Investigate the source of the hum.",
          "Search nearby bushes for clues.",
          "Step back and stay alert."
        ],
        "outcomes": [
          "The hum is eerie but reveals nothing. Nothing changes.",
          "A hidden trinket is found among the leaves. (+7 Health)",
          "Staying alert drains your nerves. (-7 Stamina)"
        ]
      },
      {
        "prompt": "Sunlight filters through the thick canopy, creating shifting patterns on the forest floor.",
        "options": [
          "Follow the dancing lights.",
          "Examine the patterns closely.",
          "Ignore the distraction and move on."
        ],
        "outcomes": [
          "The light guides you to a small trove of supplies. (+Loot)",
          "Close examination gives you a compound boost. (+7 Health, +7 Stamina)",
          "Ignoring the beauty leaves you with a minor loss. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A fallen log in the grove is covered in vibrant fungi and moss.",
        "options": [
          "Inspect the log carefully.",
          "Search underneath for hidden items.",
          "Walk past it quickly."
        ],
        "outcomes": [
          "The log conceals a rare medicinal mushroom. (+Loot)",
          "You find a small cache of herbs beneath it. (+7 Health, +7 Thirst)",
          "Hurrying past makes you miss a small reward. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A sudden rustle in the undergrowth suggests the presence of a hidden creature.",
        "options": [
          "Call out to see what it is.",
          "Hide and wait for it to pass.",
          "Chase after the sound."
        ],
        "outcomes": [
          "The creature reveals a secret cache. (+Loot)",
          "Hiding conserves your energy. (+7 Stamina)",
          "Chasing the sound results in a minor injury. (-10 Health) [type=predator]"
        ]
      },
      {
        "prompt": "An ancient stone marked with cryptic symbols lies half-buried at the grove’s edge.",
        "options": [
          "Decipher the symbols.",
          "Search around the stone for items.",
          "Ignore the stone and keep moving."
        ],
        "outcomes": [
          "The symbols reveal a hidden passage. (Travel to Arid Desert)",
          "You find an old amulet nearby. (+Loot)",
          "Ignoring the stone costs you a chance to learn more. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A soft wind stirs the leaves as twilight approaches, lending the grove an otherworldly feel.",
        "options": [
          "Embrace the magic of the twilight.",
          "Search for luminous items in the dim light.",
          "Retreat to a safe clearing."
        ],
        "outcomes": [
          "The twilight grants you a compound boost. (+7 Health, +7 Stamina)",
          "You uncover a glowing relic. (+Loot)",
          "Retreating too early leaves you with a minor loss. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A hidden glen within the grove appears bathed in soft, ethereal light.",
        "options": [
          "Enter the glen to explore.",
          "Collect a few wild berries nearby.",
          "Sit and meditate in the glen."
        ],
        "outcomes": [
          "You find only a rusted can. Nothing changes.",
          "The berries are unusually nourishing. (+7 Hunger, +7 Thirst)",
          "Meditation gives you a moderate boost. (+7 Stamina)"
        ]
      },
      {
        "prompt": "The grove suddenly darkens as thick fog rolls in unexpectedly.",
        "options": [
          "Hurry to escape the fog.",
          "Search for a safe haven within the grove.",
          "Wait for the fog to clear."
        ],
        "outcomes": [
          "In your haste, you stumble and lose energy. (-7 Stamina)",
          "You find shelter and conserve your strength. (+7 Stamina)",
          "Waiting in the fog costs you time and energy. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A series of delicate, shimmering petals drift gently to the ground.",
        "options": [
          "Collect the petals as a token.",
          "Follow the trail of petals.",
          "Let them fall and enjoy the moment."
        ],
        "outcomes": [
          "The petals are lovely but yield no benefit. Nothing changes.",
          "Following them leads you to a small cache. (+Loot)",
          "Enjoying the moment gives you a small boost. (+7 Stamina)"
        ]
      },
      {
        "prompt": "An eerie silence falls over a secluded part of the grove as dusk nears.",
        "options": [
          "Investigate the silence.",
          "Call out softly to break it.",
          "Proceed cautiously without disturbance."
        ],
        "outcomes": [
          "The silence is unnerving but yields no benefit. Nothing changes.",
          "Your call echoes and draws something valuable. (+Loot)",
          "Caution costs you a slight loss of energy. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A fallen branch is adorned with tiny, glistening droplets from the recent rain.",
        "options": [
          "Collect the droplets with your hands.",
          "Examine the branch for carvings.",
          "Simply admire the natural beauty."
        ],
        "outcomes": [
          "The droplets are refreshing. (+7 Thirst)",
          "Carvings hint at hidden lore and a secret item. (+Loot)",
          "Admiration leaves you with a small loss of focus. (-7 Stamina)"
        ]
      },
      {
        "prompt": "The soft murmur of a hidden brook is accompanied by an unusual, sweet fragrance.",
        "options": [
          "Follow the fragrance.",
          "Search near the brook.",
          "Ignore and keep moving."
        ],
        "outcomes": [
          "Following the scent reveals rare flora. (+Loot)",
          "A careful search near the brook yields useful items. (+Loot)",
          "Ignoring the scent leaves you less nourished. (-7 Hunger)"
        ]
      },
      {
        "prompt": "A crumbling stone wall partially hidden by vines stands as a relic of an ancient time.",
        "options": [
          "Examine the wall closely.",
          "Search the area behind it.",
          "Pass by without stopping."
        ],
        "outcomes": [
          "The wall reveals hidden inscriptions and a key item. (+Loot)",
          "Behind the wall you find a cache of supplies. (+Loot)",
          "Passing by means you miss potential gains. (-7 Stamina)"
        ]
      },
      {
        "prompt": "The grove’s undergrowth rustles with unseen activity as night begins to fall.",
        "options": [
          "Investigate the rustling.",
          "Light a small fire for safety.",
          "Retreat to the edge of the grove."
        ],
        "outcomes": [
          "Investigation leads to a hidden pouch of items. (+Loot)",
          "The fire offers warmth and boosts your stamina. (+7 Stamina)",
          "Retreating too hastily leaves you with a minor loss. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A patch of luminescent mushrooms glows softly on the forest floor.",
        "options": [
          "Collect some mushrooms.",
          "Examine their glow for clues.",
          "Step around them carefully."
        ],
        "outcomes": [
          "The mushrooms restore your health slightly. (+7 Health)",
          "Their glow hints at hidden secrets. (+Loot)",
          "Avoiding them makes you lose a touch of vitality. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A hidden alcove in the grove is filled with soft moss and dappled light.",
        "options": [
          "Rest in the alcove.",
          "Search it for any lost treasures.",
          "Mark it as a safe spot and leave."
        ],
        "outcomes": [
          "Resting here gives you a compound boost. (+7 Health, +7 Stamina)",
          "You uncover a small relic. (+Loot)",
          "Marking the spot uses up some of your energy. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A low fog creeps along the ground, obscuring parts of the grove in mystery.",
        "options": [
          "Move slowly through the fog.",
          "Search for signs of life within it.",
          "Hurry to clear the fog."
        ],
        "outcomes": [
          "Moving slowly preserves your energy. (+7 Stamina)",
          "You find a secret trinket shrouded in mist. (+Loot)",
          "Hurrying results in a minor misstep. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A faint melody seems to be carried on the wind, its notes both beautiful and melancholic.",
        "options": [
          "Follow the melody to its source.",
          "Let the melody soothe your soul.",
          "Ignore it and continue your journey."
        ],
        "outcomes": [
          "The melody leads to a rare enchanted item. (+Loot)",
          "Its soothing power gives you a compound boost. (+7 Health, +7 Stamina)",
          "Ignoring the song leaves you with a sense of loss. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A small clearing reveals a mosaic of wildflowers and ancient stone markers.",
        "options": [
          "Examine the stone markers.",
          "Collect some of the vibrant flowers.",
          "Sit and absorb the beauty of the clearing."
        ],
        "outcomes": [
          "The markers hint at a long-forgotten secret. (+Loot)",
          "The flowers are healing in nature. (+7 Health, +7 Hunger)",
          "Sitting too long makes you miss an opportunity. (-7 Stamina)"
        ]
      },
      {
        "prompt": "The grove quiets as a soft rain begins to fall, the droplets pattering on leaves.",
        "options": [
          "Embrace the rain and search the damp ground.",
          "Find shelter and wait for it to pass.",
          "Walk quickly to avoid getting too wet."
        ],
        "outcomes": [
          "The rain reveals a hidden cache of supplies. (+Loot)",
          "Taking shelter restores your strength. (+7 Stamina)",
          "Rushing through leaves you a bit chilled. (-7 Health)"
        ]
      },
      {
        "prompt": "A secluded pond glimmers in the dappled light of the grove.",
        "options": [
          "Attempt to fish in the pond.",
          "Collect water from the pond.",
          "Explore the surroundings."
        ],
        "outcomes": [
          "You take out your fishing gear. (Transition to FishingScene)",
          "The water is cool and revitalizing. (+7 Thirst, +7 Stamina)",
          "You discover a hidden cache near the pond. (+Loot)"
        ]
      }
    ],
    "Arid Desert": [
      {
        "prompt": "The scorching sun beats down on endless dunes, and the horizon shimmers with heat.",
        "options": [
          "Search for a rare water source.",
          "Rest in the scant shade of a lone rock.",
          "Push forward despite the heat."
        ],
        "outcomes": [
          "You discover an oasis with a small pond (Transition to FishingScene)",
          "You spot a path leading back to Outer Grasslands. (Travel to Outer Grasslands)",
          "Pushing forward drains your energy severely. (-15 Stamina)"
        ]
      },
      {
        "prompt": "The sand burns underfoot and a mirage dances on the horizon.",
        "options": [
          "Investigate the mirage.",
          "Collect dust samples for clues.",
          "Ignore and march on."
        ],
        "outcomes": [
          "The mirage vanishes, leaving you parched. (-7 Thirst)",
          "Dust clings to you, sapping your energy. (-7 Stamina)",
          "Marching on in the heat wears you down. (-15 Stamina)"
        ]
      },
      {
        "prompt": "A rocky outcrop offers a brief respite from the relentless sun.",
        "options": [
          "Climb the outcrop for a better view.",
          "Search the rocky crevices for items.",
          "Rest in its partial shade."
        ],
        "outcomes": [
          "The climb is taxing but reveals a hidden cache. (+Loot, -7 Stamina)",
          "You find only broken shards of rock. Nothing changes.",
          "Resting provides little relief in the harsh heat. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A sudden sandstorm looms in the distance, darkening the sky with swirling dust.",
        "options": [
          "Seek shelter immediately.",
          "Attempt to outrun the storm.",
          "Hunker down and brace for impact."
        ],
        "outcomes": [
          "The shelter saves you but leaves you drained. (-7 Stamina)",
          "Outrunning the storm is futile; you lose health. (-15 Health) [type=fall]",
          "Bracing yourself minimizes damage but costs energy. (-7 Stamina)"
        ]
      },
      {
        "prompt": "The desert’s heat intensifies as you notice an unusual glint on a dune.",
        "options": [
          "Investigate the glint.",
          "Shun the distraction and move on.",
          "Cover your face to shield against the glare."
        ],
        "outcomes": [
          "The glint is just a reflection. Nothing changes.",
          "Ignoring it costs you an opportunity to recover. (-7 Stamina)",
          "Shielding yourself gives a small compound boost. (+7 Thirst, +7 Stamina)"
        ]
      },
      {
        "prompt": "A dried-up riverbed stretches out before you, its cracked surface reflecting the brutal light.",
        "options": [
          "Search the riverbed for hidden water.",
          "Look for artifacts among the ruins.",
          "Avoid the desolation and move quickly."
        ],
        "outcomes": [
          "Your search yields a small puddle to drink from. (+7 Thirst)",
          "You only find some desert debris. Nothing changes.",
          "Moving quickly tires you out in the heat. (-15 Stamina)"
        ]
      },
      {
        "prompt": "The wind howls across the dunes, carrying with it a biting chill that belies the heat.",
        "options": [
          "Huddle and conserve energy.",
          "Search for any signs of shelter.",
          "Keep moving despite the discomfort."
        ],
        "outcomes": [
          "Huddling helps, but you still lose some health. (-7 Health)",
          "You discover a small cave but it's empty. Nothing changes.",
          "Persisting in discomfort drains you. (-15 Stamina)"
        ]
      },
      {
        "prompt": "A rare desert flower struggles to bloom amidst the sand, its petals a vivid contrast to the dunes.",
        "options": [
          "Examine the flower closely.",
          "Pluck the flower for study.",
          "Let it be and move on."
        ],
        "outcomes": [
          "Examining the flower restores your hope. (+7 Health, +7 Thirst)",
          "Plucking it provides a compound bonus. (+Loot)",
          "Moving on without it leaves you indifferent. (-7 Stamina)"
        ]
      },
      {
        "prompt": "The oppressive silence of the desert is broken only by the sound of your own footsteps.",
        "options": [
          "Take a moment to meditate.",
          "Push forward with determination.",
          "Search for any signs of life."
        ],
        "outcomes": [
          "Meditation grants you a brief respite. (+7 Stamina)",
          "Pushing forward aggressively costs you health. (-15 Health)",
          "Your search uncovers a forgotten relic. (+Loot)"
        ]
      },
      {
        "prompt": "A distant rumble hints at an approaching sand avalanche.",
        "options": [
          "Dash to higher ground.",
          "Crouch and brace for impact.",
          "Seek shelter behind a rock formation."
        ],
        "outcomes": [
          "The dash saves you but you lose energy. (-15 Stamina)",
          "Bracing yourself minimizes the damage. (-7 Health) [type=fall]",
          "Sheltering preserves some strength. (+7 Stamina)"
        ]
      },
      {
        "prompt": "The desert reveals an ancient ruin partially buried in sand, its purpose long forgotten.",
        "options": [
          "Explore the ruin.",
          "Search for clues around it.",
          "Ignore it and continue."
        ],
        "outcomes": [
          "Inside, you find relics that boost your resources. (+Loot)",
          "Clues here lead to hidden supplies. Nothing changes.",
          "Ignoring it leaves you with a nagging loss. (-7 Stamina)"
        ]
      },
      {
        "prompt": "The horizon is painted in shades of red and orange as the sun nears its peak.",
        "options": [
          "Stop to admire the view.",
          "Search the area for any anomalies.",
          "Press on quickly to avoid the heat."
        ],
        "outcomes": [
          "Admiring the view calms you briefly. (+7 Stamina)",
          "Your search reveals only scorching sand. Nothing changes.",
          "Rushing on leaves you exhausted. (-15 Stamina)"
        ]
      },
      {
        "prompt": "A sudden chill in the air hints at an unexpected change in the desert’s mood.",
        "options": [
          "Wrap yourself in your cloak.",
          "Search for any shelter immediately.",
          "Ignore the chill and continue."
        ],
        "outcomes": [
          "Wrapping up minimizes the cold’s effect. (+7 Stamina)",
          "Shelter is found and you recover slightly. (+7 Health)",
          "Ignoring the chill leaves you with a mild loss. (-7 Health)"
        ]
      },
      {
        "prompt": "The sand underfoot seems to shift as if alive, revealing subtle patterns.",
        "options": [
          "Examine the shifting sand.",
          "Mark the area for later study.",
          "Hurry past to avoid potential pitfalls."
        ],
        "outcomes": [
          "Your examination uncovers a hidden token. (+Loot)",
          "Marking the area boosts your caution. (+7 Stamina)",
          "Hurrying causes you to stumble. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A lone, withered tree stands as a testament to the desert’s harshness.",
        "options": [
          "Search around the tree for signs of life.",
          "Rest in its sparse shade.",
          "Pass by quickly."
        ],
        "outcomes": [
          "Around the tree you find a relic of old. (+Loot)",
          "The shade offers a compound respite. (+7 Health, +7 Stamina)",
          "Passing by leaves you battered by the elements. (-15 Stamina)"
        ]
      },
      {
        "prompt": "A sudden gust of wind kicks up a swirl of sand, momentarily blinding you.",
        "options": [
          "Shield your eyes and wait it out.",
          "Dash forward blindly.",
          "Find cover immediately."
        ],
        "outcomes": [
          "Waiting it out costs you little energy. (+7 Stamina)",
          "Dashing forward causes you to lose balance. (-10 Health) [type=fall]",
          "Covering up saves you from serious harm. (+7 Stamina)"
        ]
      },
      {
        "prompt": "The relentless desert heat and isolation weigh heavily on your mind.",
        "options": [
          "Take a moment to meditate on your journey.",
          "Push through with determination.",
          "Search your supplies for something to energize you."
        ],
        "outcomes": [
          "Meditation offers a compound boost. (+7 Health, +7 Stamina)",
          "Determination alone isn’t enough; you feel the drain. (-15 Stamina)",
          "Checking your supplies yields no real gain. Nothing changes."
        ]
      },
      {
        "prompt": "A dried-up cactus stands oddly in the barren landscape, its spines glistening in the sun.",
        "options": [
          "Examine the cactus closely.",
          "Attempt to extract any moisture.",
          "Ignore the cactus and move on."
        ],
        "outcomes": [
          "The object is just a reflective stone. Nothing changes.",
          "Extracting moisture restores a bit of thirst. (+7 Thirst)",
          "Ignoring it leaves you parched. (-7 Thirst)"
        ]
      },
      {
        "prompt": "The desert floor is etched with ancient symbols, half-erased by time and wind.",
        "options": [
          "Try to decipher the symbols.",
          "Search the nearby area for relics.",
          "Walk past without stopping."
        ],
        "outcomes": [
          "Deciphering the symbols reveals a lost technique. (+Loot)",
          "You uncover a small, valuable item nearby. Nothing changes.",
          "Walking past results in missed opportunities. (-7 Stamina)"
        ]
      },
      {
        "prompt": "A low, ominous rumble shakes the desert as a dust cloud gathers in the distance.",
        "options": [
          "Take cover behind a large boulder.",
          "Dash into a nearby crevice.",
          "Try to outrun the dust cloud."
        ],
        "outcomes": [
          "Taking cover saves you but you lose some health. (-7 Health)",
          "The crevice shields you and you recover slightly. (+7 Stamina)",
          "Outrunning the cloud drains you severely. (-15 Stamina)"
        ]
      },
      {
        "prompt": "As dusk falls, the desert transforms into a place of haunting beauty and harsh realities.",
        "options": [
          "Stop to admire the twilight.",
          "Search for any remaining supplies.",
          "Quickly set up camp."
        ],
        "outcomes": [
          "Admiring the twilight gives you a compound boost. (+7 Health, +7 Stamina)",
          "Your search reveals a small cache of items. (+Loot)",
          "Setting up camp hastily leaves you exhausted. (-15 Stamina)"
        ]
      },
      {
        "prompt": "A chill descends as the desert cools unexpectedly under a starless sky.",
        "options": [
          "Wrap yourself in any available cloth.",
          "Search for shelter in a rock formation.",
          "Keep moving to generate heat."
        ],
        "outcomes": [
          "Wrapping up preserves your strength. (+7 Stamina)",
          "Shelter is found and you recover slightly. (+7 Health)",
          "Moving produces too little warmth; you lose health. (-7 Health)"
        ]
      },
      {
        "prompt": "In the near-darkness, you notice a glint of metal partially buried in the sand.",
        "options": [
          "Dig to uncover the object.",
          "Examine the surrounding area carefully.",
          "Ignore it and continue your journey."
        ],
        "outcomes": [
          "Checking further reveals nothing but scrap. Nothing changes.",
          "Your careful search yields minor supplies. (+7 Health)",
          "Ignoring it leaves you with a lingering sense of loss. (-7 Stamina)"
        ]
      },
      {
        "prompt": "You stumble upon a rare oasis in the middle of the desert.",
        "options": [
          "Fish in the oasis waters.",
          "Drink deeply from the oasis.",
          "Search for any hidden treasures."
        ],
        "outcomes": [
          "You cast your line into the water. (transition to fishing scene)",
          "The oasis water restores your thirst. (+7 Thirst)",
          "You find an ancient relic buried in the sand. (+Loot)"
        ]
      }
    ]
  }
}
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Oromozi Scavenger</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background-color: #000;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            overflow: hidden;
        }
        #phaser-game {
            width: 800px;
            height: 600px;
            max-width: 100vw;
            max-height: 100vh;
            position: relative;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden; /* Prevent any overflow from Phaser canvas */
        }
    </style>
</head>
<body>
    <div id="phaser-game"></div>
    <!-- Load Phaser from CDN with fallback to local -->
    <script src="https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js"></script>
    <script>
        // Fallback to local Phaser if CDN fails
        if (typeof Phaser === 'undefined') {
            document.write('<script src="lib/phaser.min.js"><\/script>');
        }
    </script>
    <script src="fishingScene.js"></script>
    <script src="campingScene.js"></script>
    <script src="main.js"></script>
</body>
</html>
</file>

<file path="main.js">
// Initialize tracking for exclamation hitboxes
this.exclamationHitboxes = [];// Create a simple clickable exclamation point
function createClickableExclamation(scene) {
  if (!scene || !scene.add) {
    console.error("Invalid scene for creating exclamation point");
    return;
  }
  
  const worldW = scene.background ? scene.background.displayWidth : 800;
  const worldH = scene.background ? scene.background.displayHeight : 600;
  
  // Better placement buffer
  const edgeBuffer = 100;
  
  // Find a valid position with a maximum number of attempts
  let validPosition = false;
  let exX = 0, exY = 0;
  let attempts = 0;
  const MAX_ATTEMPTS = 50;
  
  while (!validPosition && attempts < MAX_ATTEMPTS) {
    attempts++;
    exX = Phaser.Math.Between(edgeBuffer, worldW - edgeBuffer);
    exY = Phaser.Math.Between(edgeBuffer, worldH - edgeBuffer);
    
    // Check distance from player
    let tooCloseToPlayer = false;
    if (scene.player && scene.player.x !== undefined) {
      const playerDist = Phaser.Math.Distance.Between(scene.player.x, scene.player.y, exX, exY);
      tooCloseToPlayer = playerDist < 100;
    }
    
    // Check for obstacle overlap
    const hasObstacle = overlapsObstacle(scene, exX, exY, 40);
    
    if (!tooCloseToPlayer && !hasObstacle) {
      validPosition = true;
    }
  }
  
  if (!validPosition) {
    console.warn("Could not find valid position for exclamation point");
    return;
  }
  
  try {
    // First, create a visible exclamation sprite (non-interactive)
    const exclamation = scene.add.image(exX, exY, 'exclamation');
    exclamation.setScale(bgScale * 4);
    exclamation.setDepth(900);
    exclamation.setTint(0xffff00);
    
    // Then create a rectangular hitbox for interaction (like village buildings)
    const hitboxWidth = 50;
    const hitboxHeight = 50;
    const hitbox = scene.add.rectangle(
      exX, 
      exY,
      hitboxWidth,
      hitboxHeight,
      0xffff00,
      0.2 // Slight visibility for debugging
    );
    
    // Set properties
    hitbox.setOrigin(0.5);
    hitbox.setDepth(901);
    hitbox.setStrokeStyle(2, 0xffffff, 0.5);
    
    // Make it interactive
    hitbox.setInteractive();
    
    // Store data for cleanup
    hitbox.exclamationSprite = exclamation;
    hitbox.name = "exclamation_hitbox";
    
    // Add basic click handler
    hitbox.on('pointerdown', function() {
      console.log("Exclamation hitbox clicked at", this.x, this.y);
      
      // Start narrative flow
      scene.narrativeScreen = SCREEN_PROLOGUE;
      showPrologue(scene);
      
      // Clean up
      if (this.exclamationSprite) {
        this.exclamationSprite.destroy();
      }
      this.destroy();
    });
    
    // Track the hitbox
    if (!scene.exclamationHitboxes) {
      scene.exclamationHitboxes = [];
    }
    scene.exclamationHitboxes.push(hitbox);
    
    console.log("Created exclamation with hitbox at", exX, exY);
    
    return hitbox;
  } catch (error) {
    console.error("Error creating exclamation hitbox:", error);
    return null;
  }
}"use strict";

/* =======================================================
   GLOBAL ZONE DATA & CONSTANTS
======================================================= */
const zoneList = [
  { name: "Outer Grasslands", mapKey: "OuterGrasslandsMap", backgroundKey: "outerGrasslands", foregroundKey: "outerGrasslandsForeground" },
  { name: "Shady Grove", mapKey: "ShadyGroveMap", backgroundKey: "shadyGrove", foregroundKey: "shadyGroveForeground" },
  { name: "Arid Desert", mapKey: "AridDesertMap", backgroundKey: "aridDesert", foregroundKey: "aridDesertForeground" },
  { name: "Village", mapKey: "villageCommonsMap", backgroundKey: "villageCommons", foregroundKey: "" }
];
let currentZoneIndex = 0;

// Narrative screen states – control narrative flow
const SCREEN_NONE = 0;
const SCREEN_PROLOGUE = 1;
const SCREEN_PROMPT = 2;
const SCREEN_CHOICES = 3;
const SCREEN_OUTCOME = 4;
const SCREEN_ITEM_MENU = 5;
const SCREEN_ITEM_PICK = 6;
const SCREEN_CAMPING_PROMPT = 14;

// Module UI states – while in these states, game movement is halted
const SCREEN_LIQUIDITY = 7;
const SCREEN_MERCHANT = 8;
const SCREEN_ROYAL = 9;
const SCREEN_TINKER = 10;
const SCREEN_CRAFT = 11;
const SCREEN_TRADING = 12;
const SCREEN_BATTLE = 13;

const bgScale = 0.3;
const playerScale = 2.5;

// Visual effect settings (simplified to avoid compatibility issues)
const EFFECT_COLORS = {
  LOOT: 0xFFD700,
  ATTACK: 0xFF0000,
  HEAL: 0x00FF00
};

// Sound effects (placeholders - will need actual sound files)
const SOUNDS = {
  ATTACK: 'attack',
  LOOT: 'loot_pickup',
  HURT: 'player_hurt',
  ITEM_USE: 'item_use',
  CRATE_BREAK: 'crate_break',
  MONSTER_HURT: 'monster_hurt',
  MONSTER_DEATH: 'monster_death',
  LEVEL_UP: 'level_up'
};

// Helper Function: Check if player has required camping materials (2 sticks and 1 cloth)
function hasCampingMaterials(scene) {
  const stick = scene.localInventory.find(item => item.name.toLowerCase() === "stick");
  const cloth = scene.localInventory.find(item => item.name.toLowerCase() === "cloth");
  return (stick && stick.quantity >= 2) && (cloth && cloth.quantity >= 1);
}

/* =======================================================
   1) OFF–CHAIN HELPER FUNCTIONS
======================================================= */
function createInitialStats(zoneName, existingOromozi = 1000) {
  return {
    health: 100,
    thirst: 100,
    hunger: 100,
    stamina: 100,
    oromozi: existingOromozi,
    currentZone: zoneName || "",
    experience: 0,
    level: 1
  };
}

function initEquippedData(scene) {
  scene.equippedItems = scene.equippedItems || [];
  scene.equippedResist = scene.equippedResist || {};
}

function recalcEquippedResist(scene) {
  scene.equippedResist = {};
  for (let itemName of scene.equippedItems) {
    const data = getItemData(scene, itemName);
    if (!data || !data.resist) continue;
    for (let key of Object.keys(data.resist)) {
      if (!scene.equippedResist[key]) scene.equippedResist[key] = 0;
      scene.equippedResist[key] += data.resist[key];
    }
  }
}

function updateHUD(scene) {
  if (!scene || !scene.hudText || !scene.playerStats) return;
  
  const s = scene.playerStats;
  
  try {
    scene.hudText.setText(""); // Clear text to prevent overlay
    if (scene.currentZone === "Village") {
      scene.hudText.setText(`OROMOZI: ${s.oromozi} | LEVEL: ${s.level || 1}`);
    } else {
      scene.hudText.setText(
        `HEALTH: ${s.health}   STAMINA: ${s.stamina}\nHUNGER: ${s.hunger}   THIRST: ${s.thirst}\nOROMOZI: ${s.oromozi}   LEVEL: ${s.level || 1}`
      );
    }
    
    // Update health bar if it exists
    if (scene.healthBar) {
      const healthPercent = s.health / 100;
      scene.healthBar.clear();
      scene.healthBar.fillStyle(0x00ff00, 1);
      scene.healthBar.fillRect(10, 10, 150 * healthPercent, 10);
      scene.healthBar.lineStyle(2, 0xffffff, 1);
      scene.healthBar.strokeRect(10, 10, 150, 10);
    }
  } catch (error) {
    console.warn("Error updating HUD:", error);
  }
}

function getItemData(scene, itemName) {
  if (!itemName) return null;
  const lootData = scene.cache.json.get("lootTable");
  if (!lootData || !lootData.zones) return null;
  const zoneKeys = Object.keys(lootData.zones);
  for (let zk of zoneKeys) {
    const itemsArr = lootData.zones[zk];
    if (!itemsArr) continue;
    for (let itemObj of itemsArr) {
      if (itemObj.name === itemName) return itemObj;
    }
  }
  return null;
}

function getAllLootItems(scene) {
  const lootData = scene.cache.json.get("lootTable");
  if (!lootData || !lootData.zones) return ["Stick"];
  const allItems = new Set();
  Object.keys(lootData.zones).forEach(zone => {
    lootData.zones[zone].forEach(item => allItems.add(item.name));
  });
  return Array.from(allItems);
}

function getRandomLootForZone(scene) {
  const zoneName = scene.currentZone;
  const lootData = scene.cache.json.get("lootTable");
  if (!lootData || !lootData.zones) return "Stick";
  const zoneItems = lootData.zones[zoneName];
  if (!zoneItems || zoneItems.length === 0) return "Stick";
  
  // Item rarity adjustment
  const rarityRoll = Math.random();
  if (rarityRoll < 0.15) return null; // 15% chance of no loot
  
  if (rarityRoll > 0.95 && scene.playerStats.level >= 3) {
    // 5% chance of rare loot for higher level players
    const rareItems = zoneItems.filter(item => item.rarity === "rare");
    if (rareItems.length > 0) {
      const rareIndex = Phaser.Math.Between(0, rareItems.length - 1);
      return rareItems[rareIndex].name;
    }
  }
  
  const randIndex = Phaser.Math.Between(0, zoneItems.length - 1);
  return zoneItems[randIndex].name || "Stick";
}

function applyItemEffects(scene, itemData) {
  if (!itemData || !itemData.statEffects) return false;
  let modified = false;
  for (let [stat, value] of Object.entries(itemData.statEffects)) {
    if (scene.playerStats[stat] !== undefined) {
      const oldValue = scene.playerStats[stat];
      scene.playerStats[stat] = Math.min(scene.playerStats[stat] + value, 100);
      modified = true;
      
      // Visual feedback based on stat type
      if (scene.player && value > 0) {
        createFloatingText(scene, scene.player.x, scene.player.y - 20, `+${value} ${stat}`, 0x00ff00);
      }
    }
  }
  return modified;
}

function applySurvivalTickAndOutcome(scene, outcomeText) {
  if (!scene.playerStats) scene.playerStats = createInitialStats(scene.currentZone);
  
  console.log("Applying outcome:", outcomeText);
  
  // FIRST: Parse and apply the outcome effects from the narrative prompt
  let statChanges = [];
  
  // UPDATED REGEX: Make the pattern more flexible to catch all stat formats
  const statChangeRegex = /\(\s*([-+]\d+)\s*(\w+)\s*\)(?:\s*\[type=(\w+)\])?/g;
  let match;
  
  // Collect all stat changes first
  while ((match = statChangeRegex.exec(outcomeText)) !== null) {
    console.log("Matched stat change:", match);
    const value = parseInt(match[1]);
    const stat = match[2].toLowerCase();
    const type = match[3] ? match[3].toLowerCase() : null;
    
    statChanges.push({ value, stat, type });
  }
  
  console.log("Parsed stat changes:", statChanges);
  
  // Now apply all stat changes
  for (const change of statChanges) {
    const { value, stat, type } = change;
    
    if (stat === 'health') {
      if (type && value < 0) {
        // Negative health with damage type (e.g., predator, fall)
        let dmgVal = -value; // damage is positive
        const rVal = scene.equippedResist[type] || 0;
        const damageReduction = Math.min(rVal, dmgVal * 0.7); // Cap damage reduction at 70%
        dmgVal = Math.max(dmgVal - damageReduction, 0);
        
        // Show damage reduction feedback if significant
        if (damageReduction > 0 && scene.player) {
          createFloatingText(scene, scene.player.x, scene.player.y - 30, `Resisted ${damageReduction.toFixed(1)}`, 0xffdd00);
        }
        
        scene.playerStats.health = Math.max(scene.playerStats.health - dmgVal, 0);
        
        // Damage feedback
        if (scene.player && dmgVal > 0) {
          scene.player.setTint(0xff0000);
          scene.time.delayedCall(200, () => scene.player.clearTint());
          scene.cameras.main.shake(100, 0.005 * dmgVal);
          createFloatingText(scene, scene.player.x, scene.player.y - 10, `-${dmgVal}`, 0xff0000);
        }
      } else {
        // Regular health change
        scene.playerStats.health = Math.max(scene.playerStats.health + value, 0);
        if (value > 0) {
          scene.playerStats.health = Math.min(scene.playerStats.health, 100);
          if (scene.player) {
            createFloatingText(scene, scene.player.x, scene.player.y - 20, `+${value} health`, 0x00ff00);
          }
        }
      }
    } else if (['stamina', 'thirst', 'hunger'].includes(stat)) {
      // Adjust stat
      const oldValue = scene.playerStats[stat];
      scene.playerStats[stat] = Math.max(scene.playerStats[stat] + value, 0);
      scene.playerStats[stat] = Math.min(scene.playerStats[stat], 100);
      
      // Visual feedback for significant changes
      if (value != 0 && scene.player) {
        const color = value > 0 ? 0x00ff00 : 0xff6600;
        const sign = value > 0 ? '+' : '';
        createFloatingText(scene, scene.player.x, scene.player.y - 15, `${sign}${value} ${stat}`, color);
      }
      
      console.log(`${stat} changed from ${oldValue} to ${scene.playerStats[stat]}`);
    } else if (stat === 'experience' || stat === 'exp') {
      // Add experience and level up system
      if (value > 0 && scene.playerStats) {
        scene.playerStats.experience = (scene.playerStats.experience || 0) + value;
        if (scene.player) {
          createFloatingText(scene, scene.player.x, scene.player.y - 25, `+${value} EXP`, 0x00ffff);
        }
        
        // Check for level up
        checkLevelUp(scene);
      }
    } else {
      console.warn(`Unknown stat in outcome: ${stat}`);
    }
  }
  
  // SECOND: Apply survival ticks (after narrative outcome effects)
  if (scene.currentZone !== "Village") {
    scene.playerStats.thirst = Math.max(scene.playerStats.thirst - 5, 0);
    scene.playerStats.hunger = Math.max(scene.playerStats.hunger - 5, 0);
    scene.playerStats.stamina = Math.max(scene.playerStats.stamina - 5, 0);
  }
  
  console.log("After applying outcome + survival tick, player stats:", scene.playerStats);

  // THIRD: Apply any additional penalties for critically low survival stats
  if (scene.currentZone !== "Village") {
    const { stamina, thirst, hunger, health } = scene.playerStats;
    let healthReduction = 0;
    
    // Survival mechanics - health penalties for very low stats
    if (stamina <= 10 || thirst <= 10 || hunger <= 10) {
      healthReduction = 8;
    } else if (stamina <= 25 || thirst <= 25 || hunger <= 25) {
      healthReduction = 3;
    }
    
    if (healthReduction > 0) {
      scene.playerStats.health = Math.max(health - healthReduction, 0);
      console.log(`Health reduced by ${healthReduction} due to low stats in Scavenger Mode`);
      
      if (scene.player) {
        createFloatingText(scene, scene.player.x, scene.player.y, `${healthReduction} damage due to survival`, 0xff6600);
      }
    }
  }
}

// Check if player should level up based on experience
function checkLevelUp(scene) {
  if (!scene.playerStats) return;
  
  const currLevel = scene.playerStats.level || 1;
  const expNeeded = currLevel * 100; // Simple formula: level * 100 exp needed to level up
  
  if (scene.playerStats.experience >= expNeeded) {
    scene.playerStats.level = currLevel + 1;
    scene.playerStats.experience -= expNeeded;
    
    // Level up benefits
    scene.playerStats.health = 100; // Full health on level up
    
    // Visual feedback
    if (scene.player) {
      createSimpleEffect(scene, scene.player.x, scene.player.y, 0xffff00);
      
      createFloatingText(scene, scene.player.x, scene.player.y - 40, `LEVEL UP! ${currLevel} → ${currLevel + 1}`, 0xffff00, 20);
      
      // Camera effect
      scene.cameras.main.flash(500, 255, 255, 200);
      
      // Update HUD
      updateHUD(scene);
    }
  }
}

async function applyOutcome(scene, outcomeText) {
  console.log("Before applying outcome, player stats:", scene.playerStats);
  applySurvivalTickAndOutcome(scene, outcomeText);
  console.log("After applying outcome, player stats:", scene.playerStats);
  
  // Award experience for completing events
  if (scene.playerStats && scene.currentZone !== "Village") {
    const baseExp = 5;
    const expGain = baseExp + Math.floor(Math.random() * 5);
    scene.playerStats.experience = (scene.playerStats.experience || 0) + expGain;
    outcomeText += `\n(+${expGain} EXP)`;
    checkLevelUp(scene);
  }
  
  if (outcomeText.includes("(+Loot)")) {
    const randomItemName = getRandomLootForZone(scene);
    if (randomItemName) {
      addToInventory(scene, randomItemName);
      outcomeText += `\nLoot received: ${randomItemName}`;
      
      // FIX 1: Add loot to the same log that shows crate loot
      addToLog(scene, `Received: ${randomItemName}`);
      
      // Visual loot feedback
      if (scene.player) {
        createSimpleEffect(scene, scene.player.x, scene.player.y + 10, EFFECT_COLORS.LOOT);
      }
    } else {
      outcomeText += "\nSearched but found nothing of value.";
      // Also log no loot found
      addToLog(scene, "Searched but found nothing of value");
    }
  }
  updateHUD(scene);

  const travelMatch = outcomeText.match(/\(Travel to ([^)]+)\)/i);
  if (travelMatch) {
    const zoneName = travelMatch[1].trim();
    console.log("Travel outcome detected. Zone name extracted:", zoneName);
    const zone = zoneList.find(z => z.name.toLowerCase() === zoneName.toLowerCase());
    if (zone) {
      console.log("Traveling to zone:", zone.name);
      showDialog(scene, `Traveling to ${zone.name}...\n(Press SPACE to continue)`);
      await new Promise(resolve => {
        scene.input.keyboard.once("keydown-SPACE", () => resolve());
      });
      scene.time.removeAllEvents();
      scene.scene.restart({ zone: zone, inventory: scene.localInventory, promptCount: scene.promptCount });
      return;
    } else {
      console.warn("No matching zone found for:", zoneName);
    }
  }

  // Check for fishing scene transition
  if (outcomeText.includes("transition to fishing scene")) {
    console.log("Transitioning to FishingScene");
    scene.scene.start('FishingScene', {
      inventory: scene.localInventory,
      zone: scene.currentZone,
      playerStats: scene.playerStats
    });
    return;
  }

  showDialog(scene, `Outcome:\n\n${outcomeText}\n\n(Press SPACE to continue)`);
}
function addToInventory(scene, itemName, quantity = 1) {
  if (!itemName) return; // Prevent adding null items
  const existingItem = scene.localInventory.find(item => item.name === itemName);
  if (existingItem) {
    existingItem.quantity += quantity;
  } else {
    scene.localInventory.push({ name: itemName, quantity: quantity });
  }
  
  // Visual feedback
  if (scene.player) {
    createFloatingText(scene, scene.player.x, scene.player.y - 30, `+${quantity} ${itemName}`, 0xffff00);
  }
}

function removeFromInventory(scene, itemName, quantity = 1) {
  const itemIndex = scene.localInventory.findIndex(item => item.name === itemName);
  if (itemIndex !== -1) {
    const item = scene.localInventory[itemIndex];
    item.quantity -= quantity;
    if (item.quantity <= 0) {
      scene.localInventory.splice(itemIndex, 1);
    }
  }
}

function getInventoryDisplay(scene) {
  return scene.localInventory.map(item => {
    const itemData = getItemData(scene, item.name);
    const rarity = itemData && itemData.rarity ? ` [${itemData.rarity}]` : '';
    return `${item.name}${rarity} x${item.quantity}`;
  });
}

function addToLog(scene, message) {
  if (!scene || !scene.logMessages || !scene.logText) return;
  if (!message || typeof message !== 'string') {
    message = String(message || 'Event occurred');
  }
  
  try {
    console.log("Log update:", message);
    scene.logMessages.push(message);
    if (scene.logMessages.length > 5) {
      scene.logMessages.shift(); // Remove the oldest message
    }
    scene.logText.setText(scene.logMessages.join('\n'));
    
    // Add visual highlight to log briefly
    scene.logText.setTint(0xffff00);
    scene.time.delayedCall(1000, () => {
      if (scene.logText && scene.logText.clearTint) {
        scene.logText.clearTint();
      }
    });
  } catch (error) {
    console.warn("Error updating log:", error);
  }
}

// Simple visual effect that works without particle system
function createSimpleEffect(scene, x, y, color) {
  // Create a circle that fades out
  const circle = scene.add.circle(x, y, 15, color, 0.7);
  circle.setDepth(3000);
  
  // Fade out and expand
  scene.tweens.add({
    targets: circle,
    alpha: 0,
    scale: 2,
    duration: 500,
    onComplete: () => {
      circle.destroy();
    }
  });
}

// Create floating text that rises and fades
function createFloatingText(scene, x, y, text, color = 0xffffff, fontSize = 16) {
  if (!scene || !scene.add) return; // Safety check
  if (!text || typeof text !== 'string') text = String(text || ''); // Ensure text is a string
  
  const floatingText = scene.add.text(x, y, text, {
    fontFamily: 'Arial',
    fontSize: `${fontSize}px`,
    color: `#${color.toString(16).padStart(6, '0')}`,
    stroke: '#000000',
    strokeThickness: 2,
    align: 'center'
  }).setOrigin(0.5);
  
  floatingText.setDepth(5000);
  
  scene.tweens.add({
    targets: floatingText,
    y: y - 50,
    alpha: 0,
    duration: 1500,
    ease: 'Power2',
    onComplete: () => {
      floatingText.destroy();
    }
  });
}

/* =======================================================
   4) LIQUIDITY POOL UI FUNCTIONS (WITH MODAL OVERLAY AND SCROLLING)
======================================================= */
function showModalOverlay(scene) {
  hideModalOverlay(scene);
  const modal = scene.add.rectangle(
    scene.cameras.main.worldView.x,
    scene.cameras.main.worldView.y,
    scene.cameras.main.width,
    scene.cameras.main.height,
    0x000000,
    0.4
  );
  modal.setOrigin(0, 0);
  modal.setScrollFactor(0);
  modal.setDepth(800);
  scene.liquidityOverlay = modal;
}

function hideModalOverlay(scene) {
  if (scene.liquidityOverlay) {
    scene.liquidityOverlay.destroy();
    scene.liquidityOverlay = null;
  }
}

function createScrollableMenu(scene, title, options) {
  const boxW = 260, boxH = 200;
  const boxX = (scene.game.config.width - boxW) / 2;
  const boxY = (scene.game.config.height - boxH) / 2;
  const maxVisible = 6;
  let scrollIndex = 0;

  showDialog(scene, `${title}\n(Use UP/DOWN to scroll, SPACE to select)`);
  scene.dialogBg.fillStyle(0x000000, 0.8);
  scene.dialogBg.fillRect(boxX, boxY, boxW, boxH);

  const updateMenu = () => {
    clearButtons(scene);
    const visibleOptions = options.slice(scrollIndex, scrollIndex + maxVisible);
    visibleOptions.forEach((option, i) => {
      const txt = scene.add.text(boxX + 10, boxY + 80 + i * 20, option.label, { 
        font: "14px Arial", 
        fill: option.highlight ? "#ffff00" : "#ffffff",
        stroke: "#000000",
        strokeThickness: 2
      });
      txt.setDepth(1601);
      txt.setInteractive({ useHandCursor: true });
      txt.on("pointerdown", () => {
        scene.input.keyboard.off("keydown-UP");
        scene.input.keyboard.off("keydown-DOWN");
        scene.input.keyboard.off("keydown-SPACE");
        option.callback();
      });
      txt.on("pointerover", () => {
        txt.setStyle({ fill: "#ff9900" });
      });
      txt.on("pointerout", () => {
        txt.setStyle({ fill: option.highlight ? "#ffff00" : "#ffffff" });
      });
      scene.buttons.push(txt);
      txt.setScrollFactor(0);
    });
    
    // Add scroll indicators if needed
    if (scrollIndex > 0) {
      const upArrow = scene.add.text(boxX + boxW - 20, boxY + 70, "▲", { 
        font: "16px Arial", 
        fill: "#ffffff" 
      }).setDepth(1601).setScrollFactor(0);
      scene.buttons.push(upArrow);
    }
    
    if (scrollIndex + maxVisible < options.length) {
      const downArrow = scene.add.text(boxX + boxW - 20, boxY + boxH - 20, "▼", { 
        font: "16px Arial", 
        fill: "#ffffff" 
      }).setDepth(1601).setScrollFactor(0);
      scene.buttons.push(downArrow);
    }
  };

  updateMenu();

  scene.input.keyboard.on("keydown-UP", () => {
    if (scrollIndex > 0) {
      scrollIndex--;
      updateMenu();
    }
  });

  scene.input.keyboard.on("keydown-DOWN", () => {
    if (scrollIndex + maxVisible < options.length) {
      scrollIndex++;
      updateMenu();
    }
  });

  scene.input.keyboard.once("keydown-SPACE", () => {
    scene.input.keyboard.off("keydown-UP");
    scene.input.keyboard.off("keydown-DOWN");
    const selectedIndex = scrollIndex;
    if (options[selectedIndex]) options[selectedIndex].callback();
  });
}

function showDepositResourceScreen(scene) {
  const resources = scene.localInventory.filter(item => {
    const itemData = getItemData(scene, item.name);
    return itemData && itemData.canDeposit;
  });
  if (!resources || resources.length === 0) {
    alert("No depositable resources available.");
    showLiquidityPoolOptions(scene);
    return;
  }
  clearButtons(scene);
  const options = resources.map((resource, index) => ({
    label: `${resource.name} x${resource.quantity}`,
    callback: () => {
      clearButtons(scene);
      promptDepositDetails(scene, resource.name, index);
    }
  }));
  options.push({
    label: "Back",
    callback: () => {
      clearButtons(scene);
      showLiquidityPoolOptions(scene);
    }
  });
  createScrollableMenu(scene, "Select a resource to deposit:", options);
}

function promptDepositDetails(scene, resource, index) {
  clearButtons(scene);
  hideDialog(scene);
  let amountStr = prompt(`Enter deposit amount for ${resource} (units):`, "10");
  let durationStr = prompt("Enter lockup duration (seconds):", "604800");
  let amount = parseInt(amountStr, 10);
  let duration = parseInt(durationStr, 10);
  if (isNaN(amount) || isNaN(duration)) {
    alert("Invalid input. Returning to resource selection.");
    showDepositResourceScreen(scene);
    return;
  }
  let estimatedYield = Math.floor(amount * (duration / 86400) * 50);
  showConfirmDeposit(scene, resource, amount, duration, estimatedYield, index);
}

function showConfirmDeposit(scene, resource, amount, duration, estimatedYield, index) {
  clearButtons(scene);
  showDialog(scene, `Deposit ${amount} units of ${resource} for ${duration} seconds?\nEstimated yield: ${estimatedYield} units.\nConfirm deposit?`);
  const options = [
    {
      label: "Yes",
      callback: async () => {
        removeFromInventory(scene, resource, amount);
        scene.deposits.push({ amount, duration: duration, startTime: Date.now() });
        alert("Liquidity deposit successful (simulated).");
        clearButtons(scene);
        hideDialog(scene);
        hideModalOverlay(scene);
        scene.narrativeScreen = SCREEN_NONE;
      }
    },
    {
      label: "No",
      callback: () => {
        clearButtons(scene);
        showDepositResourceScreen(scene);
      }
    }
  ];
  createButtons(scene, options);
}

function showLiquidityPoolOptions(scene) {
  scene.narrativeScreen = SCREEN_LIQUIDITY;
  showModalOverlay(scene);
  const options = [
    {
      label: "Deposit Resource",
      callback: () => {
        clearButtons(scene);
        showDepositResourceScreen(scene);
      }
    },
    {
      label: "View Deposits & Yield",
      callback: () => {
        const deposits = scene.deposits.map((d, i) => `${i}: ${d.amount} units, ${Math.floor((Date.now() - d.startTime) / 1000)}s elapsed`).join("\n");
        alert(`Deposits:\n${deposits || "None"}`);
        clearButtons(scene);
        showLiquidityPoolOptions(scene);
      }
    },
    {
      label: "Withdraw Resources",
      callback: () => {
        clearButtons(scene);
        showWithdrawResourceScreen(scene);
      }
    },
    {
      label: "Back",
      callback: () => {
        clearButtons(scene);
        hideDialog(scene);
        hideModalOverlay(scene);
        scene.narrativeScreen = SCREEN_NONE;
      }
    }
  ];
  createScrollableMenu(scene, "Liquidity Pool Options:\nSelect an option:", options);
}

function showWithdrawResourceScreen(scene) {
  if (!scene.deposits || scene.deposits.length === 0) {
    alert("No deposits to withdraw.");
    showLiquidityPoolOptions(scene);
    return;
  }
  clearButtons(scene);
  const options = scene.deposits.map((deposit, index) => ({
    label: `${deposit.amount} units (${Math.floor((Date.now() - deposit.startTime) / 1000)}s)`,
    callback: async () => {
      const deposit = scene.deposits[index];
      const elapsed = (Date.now() - deposit.startTime) / 1000;
      const yieldAmt = Math.floor(deposit.amount * (elapsed / 86400) * 50);
      scene.playerStats.oromozi += deposit.amount + yieldAmt;
      scene.deposits.splice(index, 1);
      alert(`Withdrawn ${deposit.amount} units + ${yieldAmt} yield (simulated).`);
      updateHUD(scene);
      clearButtons(scene);
      showLiquidityPoolOptions(scene);
    }
  }));
  options.push({
    label: "Back",
    callback: () => {
      clearButtons(scene);
      showLiquidityPoolOptions(scene);
    }
  });
  createScrollableMenu(scene, "Select a deposit to withdraw:", options);
}

/* =======================================================
   BATTLE MODE FUNCTIONS (IMPROVED)
======================================================= */
function calculateBattleStats(scene) {
  let baseStats = { 
    health: scene.playerStats.health, 
    attack: 8 + (scene.playerStats.level - 1) * 2, // Base attack scales with level
    evasion: 5 + Math.floor((scene.playerStats.level - 1) * 0.5), 
    defense: 3 + Math.floor((scene.playerStats.level - 1) * 0.7)
  };
  
  scene.equippedItems.forEach(itemName => {
    const itemData = getItemData(scene, itemName);
    if (!itemData) return;

    if (itemData.combatEffects) {
      if (itemData.combatEffects.attack) baseStats.attack += itemData.combatEffects.attack;
      if (itemData.combatEffects.evasion) baseStats.evasion += itemData.combatEffects.evasion;
      if (itemData.combatEffects.defense) baseStats.defense += itemData.combatEffects.defense;
    }

    if (itemData.statEffects && itemData.statEffects.health) {
      baseStats.health = Math.min(baseStats.health + itemData.statEffects.health, 100);
    }
  });
  return baseStats;
}

function enterBattleMode(scene) {
  scene.narrativeScreen = SCREEN_BATTLE;
  showModalOverlay(scene);
  const battleStats = calculateBattleStats(scene);
  
  // Create an enemy for battle simulation
  const enemyLevel = Math.max(1, scene.playerStats.level - 1 + Math.floor(Math.random() * 3));
  const enemy = {
    name: ["Goblin", "Wolf", "Bandit", "Skeleton", "Troll"][Math.floor(Math.random() * 5)],
    health: 50 + enemyLevel * 10,
    maxHealth: 50 + enemyLevel * 10,
    attack: 5 + enemyLevel * 2,
    defense: 2 + Math.floor(enemyLevel * 1.5),
    level: enemyLevel
  };
  
  scene.battleEnemy = enemy;
  scene.battleTurn = 0;
  scene.battleLog = [];
  
  updateBattleUI(scene);
  
  // Add combat controls
  scene.input.keyboard.off('keydown-SPACE');
  scene.input.keyboard.on('keydown-SPACE', () => performBattleAction(scene, 'attack'));
  scene.input.keyboard.on('keydown-ONE', () => performBattleAction(scene, 'attack'));
  scene.input.keyboard.on('keydown-TWO', () => performBattleAction(scene, 'defend'));
  scene.input.keyboard.on('keydown-THREE', () => performBattleAction(scene, 'item'));
  scene.input.keyboard.on('keydown-FOUR', () => performBattleAction(scene, 'flee'));
}

function updateBattleUI(scene) {
  const battleStats = calculateBattleStats(scene);
  const enemy = scene.battleEnemy;
  
  let battleText = `Battle Mode - Turn ${scene.battleTurn}\n\n`;
  battleText += `Player (Lv.${scene.playerStats.level}):\nHP: ${scene.playerStats.health}/${100}\nATK: ${battleStats.attack} DEF: ${battleStats.defense} EVA: ${battleStats.evasion}\n\n`;
  
  battleText += `Enemy ${enemy.name} (Lv.${enemy.level}):\nHP: ${enemy.health}/${enemy.maxHealth}\nATK: ${enemy.attack} DEF: ${enemy.defense}\n\n`;
  
  // Add recent battle log
  if (scene.battleLog && scene.battleLog.length > 0) {
    battleText += "Battle Log:\n";
    const recentLogs = scene.battleLog.slice(-3);
    recentLogs.forEach(log => {
      battleText += `${log}\n`;
    });
    battleText += "\n";
  }
  
  battleText += "Commands:\n1) Attack  2) Defend\n3) Use Item  4) Flee";
  
  showDialog(scene, battleText);
}

function performBattleAction(scene, action) {
  if (!scene.battleEnemy) return;
  
  const battleStats = calculateBattleStats(scene);
  const enemy = scene.battleEnemy;
  scene.battleTurn++;
  
  // Player's turn
  let damage = 0;
  let log = "";
  
  switch(action) {
    case 'attack':
      // Calculate damage with some randomness
      damage = Math.max(1, battleStats.attack - enemy.defense + Math.floor(Math.random() * 5) - 2);
      enemy.health = Math.max(0, enemy.health - damage);
      log = `You attack for ${damage} damage!`;
      scene.battleLog.push(log);
      break;
      
    case 'defend':
      // Temporary defense boost for next enemy attack
      scene.battleDefending = true;
      log = `You take a defensive stance!`;
      scene.battleLog.push(log);
      break;
      
    case 'item':
      // Show inventory for item use
      scene.input.keyboard.off('keydown-SPACE');
      scene.input.keyboard.off('keydown-ONE');
      scene.input.keyboard.off('keydown-TWO');
      scene.input.keyboard.off('keydown-THREE');
      scene.input.keyboard.off('keydown-FOUR');
      
      showBattleItemMenu(scene);
      return;
      
    case 'flee':
      // Chance to escape based on player level vs enemy level
      const escapeChance = 0.4 + (scene.playerStats.level - enemy.level) * 0.1;
      if (Math.random() < escapeChance) {
        scene.battleLog.push("You successfully fled!");
        endBattle(scene, 'flee');
        return;
      } else {
        log = "Failed to escape!";
        scene.battleLog.push(log);
      }
      break;
  }
  
  // Check if enemy is defeated
  if (enemy.health <= 0) {
    endBattle(scene, 'victory');
    return;
  }
  
  // Enemy's turn
  const enemyDamage = Math.max(1, enemy.attack - battleStats.defense - (scene.battleDefending ? 5 : 0) + Math.floor(Math.random() * 4) - 2);
  
  // Evasion chance
  const dodgeChance = battleStats.evasion / 100;
  if (Math.random() < dodgeChance) {
    scene.battleLog.push(`${enemy.name} attacks but you dodge!`);
  } else {
    scene.playerStats.health = Math.max(0, scene.playerStats.health - enemyDamage);
    scene.battleLog.push(`${enemy.name} attacks for ${enemyDamage} damage!`);
    
    // Reset defending status
    scene.battleDefending = false;
  }
  
  // Check if player is defeated
  if (scene.playerStats.health <= 0) {
    endBattle(scene, 'defeat');
    return;
  }
  
  // Update battle UI
  updateBattleUI(scene);
}

function showBattleItemMenu(scene) {
  const healingItems = scene.localInventory.filter(item => {
    const itemData = getItemData(scene, item.name);
    return itemData && itemData.statEffects && itemData.statEffects.health;
  });
  
  if (healingItems.length === 0) {
    scene.battleLog.push("No usable items!");
    scene.input.keyboard.on('keydown-SPACE', () => performBattleAction(scene, 'attack'));
    scene.input.keyboard.on('keydown-ONE', () => performBattleAction(scene, 'attack'));
    scene.input.keyboard.on('keydown-TWO', () => performBattleAction(scene, 'defend'));
    scene.input.keyboard.on('keydown-THREE', () => performBattleAction(scene, 'item'));
    scene.input.keyboard.on('keydown-FOUR', () => performBattleAction(scene, 'flee'));
    updateBattleUI(scene);
    return;
  }
  
  const options = healingItems.map(item => {
    const itemData = getItemData(scene, item.name);
    const healAmount = itemData && itemData.statEffects ? itemData.statEffects.health || 0 : 0;
    
    return {
      label: `${item.name} (Heals ${healAmount}) x${item.quantity}`,
      callback: () => {
        // Use the item
        applyItemEffects(scene, itemData);
        removeFromInventory(scene, item.name, 1);
        scene.battleLog.push(`Used ${item.name} to restore health!`);
        
        // Restore battle controls
        scene.input.keyboard.on('keydown-SPACE', () => performBattleAction(scene, 'attack'));
        scene.input.keyboard.on('keydown-ONE', () => performBattleAction(scene, 'attack'));
        scene.input.keyboard.on('keydown-TWO', () => performBattleAction(scene, 'defend'));
        scene.input.keyboard.on('keydown-THREE', () => performBattleAction(scene, 'item'));
        scene.input.keyboard.on('keydown-FOUR', () => performBattleAction(scene, 'flee'));
        
        // Enemy still gets a turn
        performBattleAction(scene, 'used-item');
      }
    };
  });
  
  options.push({
    label: "Cancel",
    callback: () => {
      // Restore battle controls
      scene.input.keyboard.on('keydown-SPACE', () => performBattleAction(scene, 'attack'));
      scene.input.keyboard.on('keydown-ONE', () => performBattleAction(scene, 'attack'));
      scene.input.keyboard.on('keydown-TWO', () => performBattleAction(scene, 'defend'));
      scene.input.keyboard.on('keydown-THREE', () => performBattleAction(scene, 'item'));
      scene.input.keyboard.on('keydown-FOUR', () => performBattleAction(scene, 'flee'));
      updateBattleUI(scene);
    }
  });
  
  createScrollableMenu(scene, "Select an item to use:", options);
}

function endBattle(scene, result) {
  let finalMessage = '';
  
  switch(result) {
    case 'victory':
      // Calculate rewards based on enemy level
      const expGain = 10 + scene.battleEnemy.level * 5;
      const oromoziGain = 20 + scene.battleEnemy.level * 10;
      
      scene.playerStats.experience = (scene.playerStats.experience || 0) + expGain;
      scene.playerStats.oromozi += oromoziGain;
      
      finalMessage = `Victory! You defeated the ${scene.battleEnemy.name}!\nGained ${expGain} EXP and ${oromoziGain} OROMOZI.`;
      
      // Check for level up
      checkLevelUp(scene);
      
      // Random loot chance
      if (Math.random() < 0.4) {
        const loot = getRandomLootForZone(scene);
        if (loot) {
          addToInventory(scene, loot);
          finalMessage += `\nFound: ${loot}`;
        }
      }
      break;
      
    case 'defeat':
      // Penalties for defeat - lose some oromozi but don't die
      const lossAmount = Math.min(scene.playerStats.oromozi, 50);
      scene.playerStats.oromozi -= lossAmount;
      scene.playerStats.health = 20; // Leave player wounded but alive
      
      finalMessage = `Defeat! You were beaten by the ${scene.battleEnemy.name}.\nLost ${lossAmount} OROMOZI.`;
      break;
      
    case 'flee':
      finalMessage = `You escaped from the ${scene.battleEnemy.name}.`;
      break;
  }
  
  // Show final battle message
  showDialog(scene, finalMessage + "\n\n(Press SPACE to exit)");
  
  // Clean up battle state
  scene.input.keyboard.off('keydown-ONE');
  scene.input.keyboard.off('keydown-TWO');
  scene.input.keyboard.off('keydown-THREE');
  scene.input.keyboard.off('keydown-FOUR');
  
  scene.input.keyboard.once("keydown-SPACE", () => {
    scene.narrativeScreen = SCREEN_NONE;
    hideDialog(scene);
    hideModalOverlay(scene);
    updateHUD(scene);
  });
}

/* =======================================================
   5) MODULE MENUS FOR OTHER VILLAGE BUILDINGS
======================================================= */
// Full implementation of all village modules for compatibility

function showMerchantQuarterOptions(scene) {
  scene.narrativeScreen = SCREEN_MERCHANT;
  showModalOverlay(scene);
  const options = [
    {
      label: "List Item for Sale",
      callback: () => {
        clearButtons(scene);
        showListItemScreen(scene);
      }
    },
    {
      label: "Browse Marketplace",
      callback: () => {
        clearButtons(scene);
        showBrowseMarketplaceScreen(scene);
      }
    },
    {
      label: "View My Listed Items",
      callback: () => {
        clearButtons(scene);
        showMyListingsScreen(scene);
      }
    },
    {
      label: "Back",
      callback: () => {
        clearButtons(scene);
        hideDialog(scene);
        hideModalOverlay(scene);
        scene.narrativeScreen = SCREEN_NONE;
      }
    }
  ];
  createScrollableMenu(scene, "Merchant Quarter Options:\nSelect an option:", options);
}

function showListItemScreen(scene) {
  const resources = scene.localInventory;
  if (!resources || resources.length === 0) {
    alert("No items available to list.");
    showMerchantQuarterOptions(scene);
    return;
  }
  clearButtons(scene);
  const options = resources.map((item, index) => ({
    label: `${item.name} x${item.quantity}`,
    callback: () => {
      clearButtons(scene);
      promptListItemDetails(scene, item, index);
    }
  }));
  options.push({
    label: "Back",
    callback: () => {
      clearButtons(scene);
      showMerchantQuarterOptions(scene);
    }
  });
  createScrollableMenu(scene, "Select an item to list for sale:", options);
}

function promptListItemDetails(scene, item, index) {
  clearButtons(scene);
  hideDialog(scene);
  let priceStr = prompt(`Enter sale price for ${item.name}:`, "1000");
  let price = parseInt(priceStr, 10);
  if (isNaN(price)) {
    alert("Invalid price. Returning to item selection.");
    showListItemScreen(scene);
    return;
  }
  let nonce = Date.now() + Math.floor(Math.random() * 1000);
  showDialog(scene, `List ${item.name} for sale at ${price} OROMOZI?\nConfirm listing?`);
  const options = [
    {
      label: "Yes",
      callback: async () => {
        const itemListed = scene.localInventory[index];
        scene.listedItems.push({ id: index, item: itemListed.name, quantity: 1, price, nonce });
        removeFromInventory(scene, item.name, 1);
        alert("Merchant listing created successfully (simulated).");
        clearButtons(scene);
        showMerchantQuarterOptions(scene);
      }
    },
    {
      label: "No",
      callback: () => {
        clearButtons(scene);
        showListItemScreen(scene);
      }
    }
  ];
  createButtons(scene, options);
}

function showBrowseMarketplaceScreen(scene) {
  const marketItems = [
    { item: "Iron Sword", price: 500 },
    { item: "Wooden Armor", price: 300 },
    { item: "Healing Potion", price: 100 }
  ];
  clearButtons(scene);
  const options = marketItems.map(item => ({
    label: `${item.item} - ${item.price} OROMOZI`,
    callback: async () => {
      if (scene.playerStats.oromozi >= item.price) {
        scene.playerStats.oromozi -= item.price;
        addToInventory(scene, item.item);
        alert(`Purchased ${item.item} for ${item.price} OROMOZI (simulated).`);
      } else {
        alert("Insufficient OROMOZI to purchase this item!");
      }
      updateHUD(scene);
      clearButtons(scene);
      showMerchantQuarterOptions(scene);
    }
  }));
  options.push({
    label: "Back",
    callback: () => {
      clearButtons(scene);
      showMerchantQuarterOptions(scene);
    }
  });
  createScrollableMenu(scene, "Browse Marketplace:\nSelect an item to buy:", options);
}

function showMyListingsScreen(scene) {
  if (!scene.listedItems || scene.listedItems.length === 0) {
    alert("You have no listed items.");
    showMerchantQuarterOptions(scene);
    return;
  }
  clearButtons(scene);
  const options = scene.listedItems.map((listing, index) => ({
    label: `${listing.item} x${listing.quantity} - ${listing.price} OROMOZI`,
    callback: () => {
      clearButtons(scene);
      showManageListingScreen(scene, listing, index);
    }
  }));
  options.push({
    label: "Back",
    callback: () => {
      clearButtons(scene);
      showMerchantQuarterOptions(scene);
    }
  });
  createScrollableMenu(scene, "Your Listings:\nSelect an item to manage:", options);
}

function showManageListingScreen(scene, listing, index) {
  clearButtons(scene);
  const options = [
    {
      label: "Edit Price",
      callback: () => {
        clearButtons(scene);
        promptEditPrice(scene, listing, index);
      }
    },
    {
      label: "Cancel Listing",
      callback: async () => {
        addToInventory(scene, listing.item, listing.quantity);
        scene.listedItems.splice(index, 1);
        alert(`Listing for ${listing.item} cancelled (simulated).`);
        clearButtons(scene);
        showMerchantQuarterOptions(scene);
      }
    },
    {
      label: "Back",
      callback: () => {
        clearButtons(scene);
        showMyListingsScreen(scene);
      }
    }
  ];
  createScrollableMenu(scene, `Manage ${listing.item} (${listing.price} OROMOZI):\nSelect an option:`, options);
}

function promptEditPrice(scene, listing, index) {
  clearButtons(scene);
  hideDialog(scene);
  let newPriceStr = prompt(`Enter new price for ${listing.item} (current: ${listing.price}):`, listing.price);
  let newPrice = parseInt(newPriceStr, 10);
  if (isNaN(newPrice)) {
    alert("Invalid price. Returning to listing options.");
    showManageListingScreen(scene, listing, index);
    return;
  }
  showDialog(scene, `Update ${listing.item} price to ${newPrice} OROMOZI?\nConfirm change?`);
  const options = [
    {
      label: "Yes",
      callback: async () => {
        scene.listedItems[index].price = newPrice;
        alert(`Listing price updated to ${newPrice} (simulated).`);
        clearButtons(scene);
        showMerchantQuarterOptions(scene);
      }
    },
    {
      label: "No",
      callback: () => {
        clearButtons(scene);
        showManageListingScreen(scene, listing, index);
      }
    }
  ];
  createButtons(scene, options);
}

function showRoyalMarketOptions(scene) {
  scene.narrativeScreen = SCREEN_ROYAL;
  showModalOverlay(scene);
  const categories = [
    { name: "Browse Weapons", items: [{ item: "Iron Sword", price: 500 }, { item: "Steel Axe", price: 700 }] },
    { name: "Resources", items: [{ item: "Wood", price: 50 }, { item: "Iron Ore", price: 100 }, { item: "Cloth", price: 50 }] },
    { name: "Consumables", items: [{ item: "Bread", price: 20 }, { item: "Healing Potion", price: 100 }] },
    { name: "Aesthetic Items", items: [{ item: "Fancy Hat", price: 200 }, { item: "Golden Necklace", price: 300 }] },
    { name: "Armor", items: [{ item: "Wooden Armor", price: 300 }, { item: "Iron Chestplate", price: 600 }] },
    { name: "Special Moves", items: [{ item: "Fireball", price: 1000 }, { item: "Stealth Strike", price: 1200 }] }
  ];
  const options = categories.map(cat => ({
    label: cat.name,
    callback: () => {
      clearButtons(scene);
      showRoyalCategoryScreen(scene, cat.name, cat.items);
    }
  }));
  options.push({
    label: "Back",
    callback: () => {
      clearButtons(scene);
      hideDialog(scene);
      hideModalOverlay(scene);
      scene.narrativeScreen = SCREEN_NONE;
    }
  });
  createScrollableMenu(scene, "Royal Market Options:\nSelect an option:", options);
}

function showRoyalCategoryScreen(scene, category, items) {
  clearButtons(scene);
  const options = items.map(item => ({
    label: `${item.item} - ${item.price} OROMOZI`,
    callback: async () => {
      if (scene.playerStats.oromozi >= item.price) {
        scene.playerStats.oromozi -= item.price;
        addToInventory(scene, item.item);
        alert(`Purchased ${item.item} for ${item.price} OROMOZI (simulated).`);
      } else {
        alert("Insufficient OROMOZI to purchase this item!");
      }
      updateHUD(scene);
      clearButtons(scene);
      showRoyalMarketOptions(scene);
    }
  }));
  options.push({
    label: "Back",
    callback: () => {
      clearButtons(scene);
      showRoyalMarketOptions(scene);
    }
  });
  createScrollableMenu(scene, `${category}:\nSelect an item to purchase:`, options);
}

function showTradingPostOptions(scene) {
  scene.narrativeScreen = SCREEN_TRADING;
  showModalOverlay(scene);
  const options = [
    {
      label: "Post an Item",
      callback: () => {
        clearButtons(scene);
        showTradePostItemScreen(scene);
      }
    },
    {
      label: "View Trade Listings",
      callback: () => {
        clearButtons(scene);
        showTradeListingsScreen(scene);
      }
    },
    {
      label: "Back",
      callback: () => {
        clearButtons(scene);
        hideDialog(scene);
        hideModalOverlay(scene);
        scene.narrativeScreen = SCREEN_NONE;
      }
    }
  ];
  createScrollableMenu(scene, "Trading Post Options:\nSelect an option:", options);
}

function showTradePostItemScreen(scene) {
  const resources = scene.localInventory;
  if (!resources || resources.length === 0) {
    alert("No items available to post.");
    showTradingPostOptions(scene);
    return;
  }
  clearButtons(scene);
  const options = resources.map((item, index) => ({
    label: `${item.name} x${item.quantity}`,
    callback: () => {
      clearButtons(scene);
      promptTradeRequest(scene, item, index);
    }
  }));
  options.push({
    label: "Back",
    callback: () => {
      clearButtons(scene);
      showTradingPostOptions(scene);
    }
  });
  createScrollableMenu(scene, "Select an item to offer:", options);
}

function promptTradeRequest(scene, offerItem, offerIndex) {
  clearButtons(scene);
  const allLootItems = getAllLootItems(scene);
  const options = allLootItems.map(item => ({
    label: item,
    callback: async () => {
      scene.tradeListings.push({ offer: offerItem.name, quantity: 1, request: item });
      removeFromInventory(scene, offerItem.name, 1);
      alert(`Trade posted: ${offerItem.name} for ${item} (simulated).`);
      clearButtons(scene);
      showTradingPostOptions(scene);
    }
  }));
  options.push({
    label: "Back",
    callback: () => {
      clearButtons(scene);
      showTradePostItemScreen(scene);
    }
  });
  createScrollableMenu(scene, `Select an item to request for ${offerItem.name}:`, options);
}

function showTradeListingsScreen(scene) {
  if (!scene.tradeListings || scene.tradeListings.length === 0) {
    alert("No trade listings available.");
    showTradingPostOptions(scene);
    return;
  }
  clearButtons(scene);
  const options = scene.tradeListings.map((trade, index) => ({
    label: `${trade.offer} x${trade.quantity} for ${trade.request}`,
    callback: async () => {
      const offerItem = scene.localInventory.find(item => item.name === trade.request);
      if (offerItem && offerItem.quantity >= 1) {
        removeFromInventory(scene, trade.request, 1);
        addToInventory(scene, trade.offer, trade.quantity);
        scene.tradeListings.splice(index, 1);
        alert(`Trade accepted: Received ${trade.offer} for ${trade.request} (simulated).`);
      } else {
        alert(`You don't have ${trade.request} to trade!`);
      }
      clearButtons(scene);
      showTradingPostOptions(scene);
    }
  }));
  options.push({
    label: "Back",
    callback: () => {
      clearButtons(scene);
      showTradingPostOptions(scene);
    }
  });
  createScrollableMenu(scene, "Trade Listings:\nSelect a trade to accept:", options);
}

function showTinkerersLabOptions(scene) {
  scene.narrativeScreen = SCREEN_TINKER;
  showModalOverlay(scene);
  const options = [
    {
      label: "Attempt to Invent",
      callback: () => {
        clearButtons(scene);
        showInventItemScreen(scene);
      }
    },
    {
      label: "Back",
      callback: () => {
        clearButtons(scene);
        hideDialog(scene);
        hideModalOverlay(scene);
        scene.narrativeScreen = SCREEN_NONE;
      }
    }
  ];
  createScrollableMenu(scene, "Tinkerer's Lab Options:\nSelect an option:", options);
}

function showInventItemScreen(scene) {
  const resources = scene.localInventory;
  if (!resources || resources.length < 3) {
    alert("You need at least 3 items to invent something.");
    showTinkerersLabOptions(scene);
    return;
  }
  clearButtons(scene);
  let selectedItems = [];
  const options = resources.map((item, index) => ({
    label: `${item.name} x${item.quantity}`,
    callback: () => {
      if (selectedItems.length < 3 && !selectedItems.includes(item.name)) {
        selectedItems.push(item.name);
        if (selectedItems.length === 3) {
          clearButtons(scene);
          confirmInvention(scene, selectedItems);
        } else {
          showDialog(scene, `Selected: ${selectedItems.join(", ")}\nSelect ${3 - selectedItems.length} more:`);
        }
      }
    }
  }));
  options.push({
    label: "Back",
    callback: () => {
      clearButtons(scene);
      showTinkerersLabOptions(scene);
    }
  });
  createScrollableMenu(scene, "Select 3 items to attempt invention (click 3 times):", options);
}

function confirmInvention(scene, items) {
  clearButtons(scene);
  showDialog(scene, `Invent using ${items.join(", ")}?\nConfirm invention?`);
  const options = [
    {
      label: "Yes",
      callback: async () => {
        const secretRecipes = [
          { ingredients: ["Iron Ore", "Copper Ore", "Wood"], result: "Mechanical Cog" },
          { ingredients: ["Fire Crystal", "Steel Ingot", "Thread"], result: "Flamethrower Gadget" },
          { ingredients: ["Vines", "Stone", "Herbs"], result: "Vine Trap" },
          { ingredients: ["Poisonous Berries", "Water", "Iron Ore"], result: "Toxic Sprayer" },
          { ingredients: ["Wood", "Thread", "Copper Ore"], result: "Wind-Up Toy" },
          { ingredients: ["Steel Ingot", "Fire Crystal", "Wood"], result: "Steam Pistol" },
          { ingredients: ["Leather", "Iron Ore", "Vines"], result: "Spring-Loaded Glove" }
        ];

        items.sort();
        const match = secretRecipes.find(recipe => {
          const sortedRecipe = [...recipe.ingredients].sort();
          return items.length === sortedRecipe.length && items.every((item, i) => item === sortedRecipe[i]);
        });

        const hasItems = items.every(item => {
          const invItem = scene.localInventory.find(i => i.name === item);
          return invItem && invItem.quantity >= 1;
        });

        if (hasItems) {
          items.forEach(item => removeFromInventory(scene, item));
          if (match) {
            const newItem = match.result;
            addToInventory(scene, newItem);
            alert(`Invention succeeded! Created ${newItem} (simulated).`);
          } else {
            alert("Invention failed! Items consumed (simulated).");
          }
        } else {
          alert("You don't have all the required items!");
        }
        clearButtons(scene);
        showTinkerersLabOptions(scene);
      }
    },
    {
      label: "No",
      callback: () => {
        clearButtons(scene);
        showInventItemScreen(scene);
      }
    }
  ];
  createButtons(scene, options);
}

function showCraftingWorkshopOptions(scene) {
  scene.narrativeScreen = SCREEN_CRAFT;
  showModalOverlay(scene);
  const options = [
    {
      label: "Craft Item",
      callback: () => {
        clearButtons(scene);
        showCraftItemScreen(scene);
      }
    },
    {
      label: "Repair Item",
      callback: () => {
        clearButtons(scene);
        showRepairItemScreen(scene);
      }
    },
    {
      label: "Salvage Loot",
      callback: () => {
        clearButtons(scene);
        showSalvageItemScreen(scene);
      }
    },
    {
      label: "Back",
      callback: () => {
        clearButtons(scene);
        hideDialog(scene);
        hideModalOverlay(scene);
        scene.narrativeScreen = SCREEN_NONE;
      }
    }
  ];
  createScrollableMenu(scene, "Crafting Workshop Options:\nSelect an option:", options);
}

function showCraftItemScreen(scene) {
  const recipes = [
    { result: "Iron Sword", ingredients: ["Iron Ore", "Wood"], description: "A sturdy blade for combat." },
    { result: "Wooden Armor", ingredients: ["Wood", "Wood"], description: "Basic protection from the wilds." },
    { result: "Steel Axe", ingredients: ["Steel Ingot", "Wood"], description: "Chops trees and foes alike." },
    { result: "Leather Boots", ingredients: ["Leather", "Thread"], description: "Swift and silent footwear." },
    { result: "Healing Salve", ingredients: ["Herbs", "Water"], description: "Restores minor wounds." },
    { result: "Poison Dagger", ingredients: ["Iron Ore", "Poisonous Berries"], description: "A sneaky, toxic blade." },
    { result: "Stone Hammer", ingredients: ["Stone", "Wood"], description: "Good for breaking rocks." },
    { result: "Copper Ring", ingredients: ["Copper Ore", "Thread"], description: "A shiny trinket." },
    { result: "Fire Staff", ingredients: ["Wood", "Fire Crystal"], description: "Channels fiery magic." },
    { result: "Shield of Roots", ingredients: ["Wood", "Vines"], description: "Nature's sturdy defense." }
  ];
  clearButtons(scene);
  const options = recipes.map(recipe => ({
    label: `${recipe.result} (${recipe.ingredients.join(", ")})`,
    callback: () => {
      clearButtons(scene);
      confirmCraftItem(scene, recipe);
    }
  }));
  options.push({
    label: "Back",
    callback: () => {
      clearButtons(scene);
      showCraftingWorkshopOptions(scene);
    }
  });
  createScrollableMenu(scene, "Select an item to craft:", options);
}

function confirmCraftItem(scene, recipe) {
  const hasIngredients = recipe.ingredients.every(ing => scene.localInventory.some(i => i.name === ing && i.quantity >= 1));
  if (!hasIngredients) {
    alert(`You don't have all required ingredients: ${recipe.ingredients.join(", ")}`);
    showCraftingWorkshopOptions(scene);
    return;
  }
  showDialog(scene, `Craft ${recipe.result} using ${recipe.ingredients.join(", ")}?\n${recipe.description}\nConfirm crafting?`);
  const options = [
    {
      label: "Yes",
      callback: async () => {
        recipe.ingredients.forEach(item => removeFromInventory(scene, item));
        addToInventory(scene, recipe.result);
        alert(`Crafted ${recipe.result} (simulated).`);
        clearButtons(scene);
        showCraftingWorkshopOptions(scene);
      }
    },
    {
      label: "No",
      callback: () => {
        clearButtons(scene);
        showCraftItemScreen(scene);
      }
    }
  ];
  createButtons(scene, options);
}

function showRepairItemScreen(scene) {
  const resources = scene.localInventory;
  if (!resources || resources.length === 0) {
    alert("No items available to repair.");
    showCraftingWorkshopOptions(scene);
    return;
  }
  clearButtons(scene);
  const options = resources.map((item, index) => ({
    label: `${item.name} x${item.quantity}`,
    callback: async () => {
      const resourceItem = scene.localInventory.find(i => i.name === "Wood");
      if (resourceItem && resourceItem.quantity >= 1) {
        removeFromInventory(scene, "Wood");
        alert(`Repaired ${scene.localInventory[index].name} (simulated).`);
      } else {
        alert(`You don't have Wood to repair this item!`);
      }
      clearButtons(scene);
      showCraftingWorkshopOptions(scene);
    }
  }));
  options.push({
    label: "Back",
    callback: () => {
      clearButtons(scene);
      showCraftingWorkshopOptions(scene);
    }
  });
  createScrollableMenu(scene, "Select an item to repair (requires Wood):", options);
}

function showSalvageItemScreen(scene) {
  const resources = scene.localInventory;
  if (!resources || resources.length === 0) {
    alert("No items available to salvage.");
    showCraftingWorkshopOptions(scene);
    return;
  }
  clearButtons(scene);
  const options = resources.map((item, index) => ({
    label: `${item.name} x${item.quantity}`,
    callback: async () => {
      const salvage = getRandomLootForZone(scene);
      removeFromInventory(scene, item.name, 1);
      addToInventory(scene, salvage);
      alert(`Salvaged ${item.name} into ${salvage}.`);
      clearButtons(scene);
      showCraftingWorkshopOptions(scene);
    }
  }));
  options.push({
    label: "Back",
    callback: () => {
      clearButtons(scene);
      showCraftingWorkshopOptions(scene);
    }
  });
  createScrollableMenu(scene, "Select an item to salvage:", options);
}

/* =======================================================
   6) VILLAGE CONTRACT INTERACTION HANDLER
======================================================= */
function handleVillageContractInteraction(scene, obj) {
  console.log("Village contract interaction triggered for:", obj.name);
  
  // Visual feedback for interaction
  if (scene.player) {
    createSimpleEffect(scene, scene.player.x, scene.player.y, 0x00ffff);
  }
  
  switch (obj.name.toLowerCase()) {
    case "trading_post":
      showTradingPostOptions(scene);
      break;
    case "crafting_workshop":
      showCraftingWorkshopOptions(scene);
      break;
    case "liquidity_bank":
      showLiquidityPoolOptions(scene);
      break;
    case "merchant_quarter":
      showMerchantQuarterOptions(scene);
      break;
    case "royal_market":
      showRoyalMarketOptions(scene);
      break;
    case "tinkerers_lab":
      showTinkerersLabOptions(scene);
      break;
    case "scavenger_mode":
      console.log("Entering Scavenger Mode...");
      showDialog(scene, "Enter Scavenger Mode with your current inventory?\n(Press SPACE to confirm)");
      scene.input.keyboard.once("keydown-SPACE", () => {
        const targetZone = zoneList.find(z => z.name === "Outer Grasslands");
        if (targetZone) {
          // Add transition effect
          scene.cameras.main.fadeOut(500);
          scene.time.delayedCall(500, () => {
            const currentOromozi = scene.playerStats.oromozi;
            scene.playerStats = createInitialStats(targetZone.name, currentOromozi);
            scene.scene.restart({ zone: targetZone, inventory: scene.localInventory, promptCount: 0 });
          });
        } else {
          console.warn("Outer Grasslands zone not found!");
        }
      });
      break;
    case "battle_mode":
      console.log("Entering Battle Mode...");
      enterBattleMode(scene);
      break;
      case "camping_mode":
        console.log("Entering Camping Mode...");
        const gameTime = scene.registry.get('gameTime');
        const gameHour = (6 + Math.floor(gameTime / scene.secondsPerHour)) % 24;
        const isNearNight = gameHour >= 18 && gameHour < 20;
        const isNight = gameHour >= 20 || gameHour < 6;
        
        if (isNearNight || isNight) {
          showDialog(scene, `It's ${isNearNight ? "getting dark" : "night"}, do you want to set up camp?\n(Press SPACE to confirm)`);
          scene.input.keyboard.once("keydown-SPACE", () => {
            if (hasCampingMaterials(scene)) {
              console.log('Camping setup initiated');
              hideDialog(scene);
              
              // Remove camping materials
              removeFromInventory(scene, "Stick", 2);
              removeFromInventory(scene, "Cloth", 1);
              updateHUD(scene);
              
              // Create a container for the camping setup progress
              const progressContainer = scene.add.container(scene.cameras.main.centerX, scene.cameras.main.centerY);
              
              // Add background
              const background = scene.add.rectangle(0, 0, 300, 80, 0x000000, 0.7);
              background.setStrokeStyle(2, 0xffffff);
              progressContainer.add(background);
              
              // Add title text
              const titleText = scene.add.text(0, -25, "Setting up camp...", { 
                fontSize: '18px', 
                color: '#ffffff' 
              }).setOrigin(0.5);
              progressContainer.add(titleText);
              
              // Add progress bar background
              const progressBg = scene.add.rectangle(0, 10, 250, 20, 0x333333);
              progressContainer.add(progressBg);
              
              // Add progress bar fill
              const progressBar = scene.add.rectangle(-125, 10, 0, 20, 0x00ff00);
              progressBar.setOrigin(0, 0.5);
              progressContainer.add(progressBar);
              
              // Add progress text
              const progressText = scene.add.text(0, 10, "0%", { 
                fontSize: '12px', 
                color: '#ffffff' 
              }).setOrigin(0.5);
              progressContainer.add(progressText);
              
              // Set depth to ensure visibility
              progressContainer.setDepth(1000);
              
              // Camping setup duration (90 seconds)
              const campSetupDuration = 90;
              let elapsedTime = 0;
              
              // Create and start the timer
              const campingTimer = scene.time.addEvent({
                delay: 1000, // Update every second
                callback: () => {
                  elapsedTime++;
                  const progress = elapsedTime / campSetupDuration;
                  
                  // Update progress bar
                  progressBar.width = 250 * progress;
                  progressText.setText(`${Math.floor(progress * 100)}%`);
                  
                  if (elapsedTime >= campSetupDuration) {
                    // Stop the timer
                    campingTimer.remove();
                    
                    // Change progress bar to blue to indicate completion
                    progressBar.fillColor = 0x0088ff;
                    
                    // Replace progress text with "ENTER CAMP"
                    progressText.setText("ENTER CAMP");
                    progressText.setFontSize(16);
                    
                    // Make the entire progress bar clickable
                    progressBg.setInteractive({ useHandCursor: true });
                    progressBar.setInteractive({ useHandCursor: true });
                    progressText.setInteractive({ useHandCursor: true });
                    
                    // Add click event to enter camping scene
                    const enterCampFunc = () => {
                      // Remove all UI elements
                      progressContainer.destroy();
                      
                      // Save current inventory to pass to camping scene
                      const currentInventory = [...scene.inventory];
                      
                      // Start camping scene with inventory
                      scene.scene.start('CampingScene', {
                        inventory: currentInventory,
                        playerStats: scene.playerStats,
                        zone: zoneList.find(z => z.name === "Village")
                      });
                    };
                    
                    progressBg.on('pointerdown', enterCampFunc);
                    progressBar.on('pointerdown', enterCampFunc);
                    progressText.on('pointerdown', enterCampFunc);
                  }
                },
                callbackScope: scene,
                loop: true
              });
              
              // Allow canceling the setup with ESC key
              const escKey = scene.input.keyboard.addKey('ESC');
              const escHandler = () => {
                campingTimer.remove();
                progressContainer.destroy();
                scene.input.keyboard.removeKey('ESC');
                
                // Return camping materials
                addToInventory(scene, "Stick", 2);
                addToInventory(scene, "Cloth", 1);
                updateHUD(scene);
                
                showDialog(scene, "Camp setup canceled. Materials returned to inventory.\n(Press SPACE to continue)");
                scene.input.keyboard.once("keydown-SPACE", () => {
                  hideDialog(scene);
                });
              };
              
              escKey.on('down', escHandler);
            } else {
              showDialog(scene, "You need 2 sticks and 1 cloth to set up camp.\n(Press SPACE to continue)");
              scene.input.keyboard.once("keydown-SPACE", () => {
                hideDialog(scene);
              });
            }
          });
        } else {
          showDialog(scene, "You can only set up camp during near-night (6:00 PM - 8:00 PM) or night (8:00 PM - 6:00 AM).\n(Press SPACE to continue)");
          scene.input.keyboard.once("keydown-SPACE", () => {
            hideDialog(scene);
          });
        }
        break;
  }
}

/* =======================================================
   7) SCENE LOOT CRATE AND EXCLAMATION SPAWNING FUNCTIONS (IMPROVED)
======================================================= */
function spawnOneLootCrate(scene) {
  const MAX_TRIES = 100;
  let tries = 0;
  const worldW = scene.background.displayWidth;
  const worldH = scene.background.displayHeight;
  
  // Increased minimum distance from edges for better visibility
  const edgeBuffer = 80;
  
  while (tries < MAX_TRIES) {
    tries++;
    const crateX = Phaser.Math.Between(edgeBuffer, worldW - edgeBuffer);
    const crateY = Phaser.Math.Between(edgeBuffer, worldH - edgeBuffer);
    
    // Improved collision detection with better buffer zone
    if (!overlapsObstacle(scene, crateX, crateY, 80)) {
      const crate = scene.lootCrates.create(crateX, crateY, "loot_crate");
      crate.setOrigin(0.5, 0.5);
      crate.setFrame(0); // Initial frame (intact crate)
      crate.setScale(1);
      crate.setDepth(900);
      crate.setImmovable(true);
      
      // Health varies by zone and player level
      const minHealth = 2 + Math.floor((scene.playerStats.level - 1) * 0.5);
      const maxHealth = 6 + Math.floor((scene.playerStats.level - 1) * 0.8);
      const health = Phaser.Math.Between(minHealth, maxHealth);
      
      // Simple tint instead of glow effect for compatibility
      crate.setTint(0xffff77);
      
      crate.setData('health', health);
      crate.setData('breaking', false);
      crate.body.setSize(64, 64);
      crate.body.setOffset(0, 0);
      
      // Add a small animation to make crates stand out
      scene.tweens.add({
        targets: crate,
        y: crateY - 5,
        duration: 1000,
        yoyo: true,
        repeat: -1,
        ease: 'Sine.easeInOut'
      });
      
      console.log("Crate spawned at:", crateX, crateY, "with health:", health);
      return;
    }
  }
  console.warn("Unable to place loot crate after", MAX_TRIES, "tries.");
}

function spawnMultipleLootCrates(scene, count) {
  if (scene.currentZone === "Village") return;
  
  // Scale crate count with player level for progression
  const baseCount = count;
  const levelBonus = Math.floor((scene.playerStats.level - 1) * 0.5);
  const totalCrates = baseCount + levelBonus;
  
  for (let i = 0; i < totalCrates; i++) {
    spawnOneLootCrate(scene);
  }
}

function spawnOneExclamation(scene) {
  const MAX_TRIES = 100;
  let tries = 0;
  const worldW = scene.background.displayWidth;
  const worldH = scene.background.displayHeight;
  
  // Better placement buffer
  const edgeBuffer = 100;
  const minDistanceFromPlayer = 150;
  
  while (tries < MAX_TRIES) {
    tries++;
    const exX = Phaser.Math.Between(edgeBuffer, worldW - edgeBuffer);
    const exY = Phaser.Math.Between(edgeBuffer, worldH - edgeBuffer);
    
    // Check distance from player
    if (scene.player) {
      const playerDist = Phaser.Math.Distance.Between(scene.player.x, scene.player.y, exX, exY);
      if (playerDist < minDistanceFromPlayer) continue;
    }
    
    if (!overlapsObstacle(scene, exX, exY, 50)) {
      const ex = scene.exclamations.create(exX, exY, "exclamation");
      ex.setScale(bgScale * 4);
      ex.setDepth(900);
      ex.setImmovable(true);
      
      // Add pulsing animation to draw attention
      scene.tweens.add({
        targets: ex,
        scale: bgScale * 4.5,
        duration: 500,
        yoyo: true,
        repeat: -1,
        ease: 'Sine.easeInOut'
      });
      
      // Simple yellow tint instead of glow
      ex.setTint(0xffff00);
      
      return;
    }
  }
  console.warn("Unable to place exclamation after", MAX_TRIES, "tries.");
}

function spawnMultipleExclamations(scene, count) {
  // Completely abort if scene isn't fully initialized
  if (!scene || !scene.add || !scene.sys || !scene.sys.displayList) {
    console.error("Scene not ready for spawning exclamations - missing core components");
    return;
  }
  
  if (scene.currentZone === "Village") return;
  
  // Scale exclamation count based on player progress
  const totalExclamations = count + Math.floor((scene.promptCount || 0) / 5);
  const actualCount = Math.min(totalExclamations, 6); // Reduce count to prevent overload
  
  console.log(`Attempting to spawn ${actualCount} exclamations`);
  
  // Use safer loop with try/catch
  for (let i = 0; i < actualCount; i++) {
    try {
      createClickableExclamation(scene);
    } catch (error) {
      console.error("Error spawning exclamation:", error);
    }
  }
}

// Improved collision detection with customizable buffer and more forgiving checks
function overlapsObstacle(scene, x, y, buffer = 64) {
  if (!scene || !scene.obstacles) return false;
  
  const halfBuffer = buffer / 2;
  const rect = new Phaser.Geom.Rectangle(x - halfBuffer, y - halfBuffer, buffer, buffer);
  
  try {
    const obstacles = scene.obstacles.getChildren();
    if (!obstacles || !Array.isArray(obstacles)) return false;
    
    for (let obs of obstacles) {
      if (!obs || !obs.getBounds) continue;
      
      // Add a smaller margin around obstacles for better navigation
      const margin = 5; // Reduced from 10
      const obsBounds = obs.getBounds();
      const expandedBounds = new Phaser.Geom.Rectangle(
        obsBounds.x - margin,
        obsBounds.y - margin,
        obsBounds.width + margin * 2,
        obsBounds.height + margin * 2
      );
      
      if (Phaser.Geom.Intersects.RectangleToRectangle(rect, expandedBounds)) {
        return true;
      }
    }
  } catch (error) {
    console.warn("Error in collision detection:", error);
    return false;
  }
  
  // Also check for proximity to other objects of the same type
  // but with a smaller minimum distance
  const minDistance = buffer * 1.2; // Reduced from 1.5
  
  if (scene.lootCrates) {
    try {
      const crates = scene.lootCrates.getChildren();
      if (crates && Array.isArray(crates)) {
        for (let crate of crates) {
          if (!crate || !crate.x) continue;
          const dist = Phaser.Math.Distance.Between(x, y, crate.x, crate.y);
          if (dist < minDistance) return true;
        }
      }
    } catch (e) {
      console.warn("Error checking crate overlaps:", e);
    }
  }
  
  if (scene.exclamations) {
    try {
      const exs = scene.exclamations.getChildren();
      if (exs && Array.isArray(exs)) {
        for (let ex of exs) {
          if (!ex || !ex.x) continue;
          const dist = Phaser.Math.Distance.Between(x, y, ex.x, ex.y);
          if (dist < minDistance) return true;
        }
      }
    } catch (e) {
      console.warn("Error checking exclamation overlaps:", e);
    }
  }
  
  return false;
}

/* =/* =======================================================
   8) HELPER UI FUNCTIONS (IMPROVED)
======================================================= */
function showDialog(scene, text) {
  const boxW = 260, boxH = 200;
  const boxX = (scene.game.config.width - boxW) / 2;
  const boxY = (scene.game.config.height - boxH) / 2;
  
  scene.dialogBg.clear();
  scene.dialogBg.fillStyle(0x000000, 0.8);
  scene.dialogBg.fillRect(boxX, boxY, boxW, boxH);
  scene.dialogBg.lineStyle(2, 0xffffff, 1);
  scene.dialogBg.strokeRect(boxX, boxY, boxW, boxH);
  
  scene.dialogText.setPosition(boxX + 10, boxY + 10);
  scene.dialogText.setText(text);
  scene.dialogText.setStyle({
    font: "14px Arial",
    fill: "#ffffff",
    wordWrap: { width: boxW - 20 }
  });
  
  scene.dialogBg.setVisible(true);
  scene.dialogText.setVisible(true);
  scene.dialogBg.setScrollFactor(0);
  scene.dialogText.setScrollFactor(0);
  scene.dialogBg.setDepth(1600);
  scene.dialogText.setDepth(1601);
}

function hideDialog(scene) {
  scene.dialogBg.clear();
  scene.dialogBg.setVisible(false);
  scene.dialogText.setVisible(false);
  updateHUD(scene);
}

function createButtons(scene, lines) {
  clearButtons(scene);
  const boxW = 260, boxH = 200;
  const boxX = (scene.game.config.width - boxW) / 2;
  const boxY = (scene.game.config.height - boxH) / 2;
  let startX = boxX + 10;
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    const txt = scene.add.text(startX, boxY + 80 + i * 25, line.label, { 
      font: "14px Arial", 
      fill: "#ffff00",
      stroke: "#000000",
      strokeThickness: 2
    });
    
    txt.setDepth(1601);
    txt.setInteractive({ useHandCursor: true });
    
    // Add button effects
    txt.on("pointerover", () => {
      txt.setStyle({ fill: "#ff9900" });
      txt.setScale(1.1);
    });
    
    txt.on("pointerout", () => {
      txt.setStyle({ fill: "#ffff00" });
      txt.setScale(1);
    });
    
    txt.on("pointerdown", () => {
      txt.setStyle({ fill: "#ffffff" });
      scene.time.delayedCall(100, line.callback);
    });
    
    scene.buttons.push(txt);
    txt.setScrollFactor(0);
  }
}

function clearButtons(scene) {
  scene.buttons.forEach(btn => btn.destroy());
  scene.buttons = [];
}

function getOverlappingExclamation(scene) {
  // First check exclamation physics group
  if (scene.exclamations && scene.player) {
    try {
      const playerRect = scene.player.getBounds();
      const exList = scene.exclamations.getChildren();
      
      for (let ex of exList) {
        if (!ex || !ex.getBounds) continue;
        
        if (Phaser.Geom.Intersects.RectangleToRectangle(playerRect, ex.getBounds())) {
          return ex;
        }
      }
    } catch (error) {
      console.warn("Error checking exclamation overlaps:", error);
    }
  }
  
  // Then check sprite array if it exists
  if (scene.exclamationSprites && scene.exclamationSprites.length > 0 && scene.player) {
    try {
      const playerRect = scene.player.getBounds();
      
      for (let ex of scene.exclamationSprites) {
        if (!ex || !ex.getBounds) continue;
        
        if (Phaser.Geom.Intersects.RectangleToRectangle(playerRect, ex.getBounds())) {
          return ex;
        }
      }
    } catch (error) {
      console.warn("Error checking sprite exclamation overlaps:", error);
    }
  }
  
  return null;
}

function endFlow(scene) {
  scene.narrativeScreen = SCREEN_NONE;
  scene.activePrompt = null;
  scene.chosenOptionIndex = -1;
  hideDialog(scene);
  console.log("Narrative flow ended.");
  updateHUD(scene);
  scene.promptCount++;
  console.log("Prompt count:", scene.promptCount);
}

/* =======================================================
   9) NARRATIVE FLOW FUNCTIONS
======================================================= */
function showPrologue(scene) {
  const zone = scene.currentZone;
  const prologues = scene.narrativePrologues?.[zone];
  if (!prologues || prologues.length === 0) {
    console.log("No prologues for zone:", zone);
    scene.narrativeScreen = SCREEN_PROMPT;
    showPrompt(scene);
    return;
  }
  const text = prologues[Phaser.Math.Between(0, prologues.length - 1)];
  showDialog(scene, text + "\n\n(Press SPACE to continue)");
}

function showPrompt(scene) {
  const zone = scene.currentZone;
  const prompts = scene.narrativeData?.zones?.[zone];
  if (!prompts || prompts.length === 0) {
    console.warn("No prompts for zone:", zone);
    hideDialog(scene);
    scene.narrativeScreen = SCREEN_NONE;
    return;
  }
  
  // Add variation to prompts based on time of day
  const gameTime = scene.registry.get('gameTime');
  const gameHour = (6 + Math.floor(gameTime / scene.secondsPerHour)) % 24;
  const timeOfDay = gameHour < 12 ? "morning" : (gameHour < 18 ? "afternoon" : "evening");
  
  // Filter prompts that match current time of day if available
  const timePrompts = prompts.filter(p => p.timeOfDay === timeOfDay);
  const availablePrompts = timePrompts.length > 0 ? timePrompts : prompts;
  
  const randIndex = Phaser.Math.Between(0, availablePrompts.length - 1);
  scene.activePrompt = availablePrompts[randIndex];
  
  showDialog(scene, `--- ${zone} (${timeOfDay}) ---\n\n${scene.activePrompt.prompt}\n\n(Press SPACE to see choices)`);
}

function showChoices(scene) {
  if (!scene.activePrompt) return;
  showDialog(scene, "Pick one choice:");
  const lines = scene.activePrompt.options.map((opt, i) => ({
    label: opt,
    callback: () => {
      scene.chosenOptionIndex = i;
      scene.narrativeScreen = SCREEN_OUTCOME;
      showOutcome(scene);
    }
  }));
  
  // Add travel options after enough exploration
  if (scene.promptCount >= 8) {
    let extraOption = null;
    if (scene.currentZone === "Outer Grasslands") {
      extraOption = "Return to Village";
    } else if (scene.currentZone !== "Village") {
      let currentIndex = zoneList.findIndex(z => z.name === scene.currentZone);
      if (currentIndex > 0) {
        extraOption = `Return to ${zoneList[currentIndex - 1].name}`;
      }
    }
    if (extraOption) {
      lines.push({
        label: extraOption,
        highlight: true,  // Make it stand out
        callback: () => {
          handleReturn(scene);
        }
      });
    }
  }
  
  lines.push({
    label: "Back",
    callback: () => {
      scene.narrativeScreen = SCREEN_PROMPT;
      clearButtons(scene);
      showPrompt(scene);
    }
  });
  
  createButtons(scene, lines);
}

async function showOutcome(scene) {
  clearButtons(scene);
  if (!scene.activePrompt) return;
  if (scene.chosenOptionIndex < 0 || scene.chosenOptionIndex >= scene.activePrompt.outcomes.length) return;
  const outcomeText = scene.activePrompt.outcomes[scene.chosenOptionIndex];
  
  // Show loading animation
  showDialog(scene, "Processing outcome, please wait...");
  
  // Add short delay for anticipation
  await new Promise(resolve => {
    scene.time.delayedCall(300, resolve);
  });
  
  // Apply the outcome with visual effects
  scene.cameras.main.flash(200, 255, 255, 255, true);
  await applyOutcome(scene, outcomeText);
  scene.narrativeScreen = SCREEN_OUTCOME;
}

function showItemMenu(scene) {
  showDialog(scene, "Item Options:\nPress 'U' to Use Item\nPress 'E' to Equip Item\n\n(Press SPACE to continue playing)");
  const uKey = scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.U);
  const eKey = scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.E);
  const spaceKey = scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);
  
  uKey.once("down", () => {
    spaceKey.removeAllListeners();
    eKey.removeAllListeners();
    scene.narrativeScreen = SCREEN_ITEM_PICK;
    showItemPick(scene, true);
  });
  
  eKey.once("down", () => {
    spaceKey.removeAllListeners();
    uKey.removeAllListeners();
    scene.narrativeScreen = SCREEN_ITEM_PICK;
    showItemPick(scene, false);
  });
  
  spaceKey.once("down", () => {
    uKey.removeAllListeners();
    eKey.removeAllListeners();
    hideDialog(scene);
    endFlow(scene);
  });
}

function showItemPick(scene, isUseFlow) {
  hideDialog(scene);
  const inv = scene.localInventory || [];
  if (inv.length === 0) {
    showDialog(scene, "Your inventory is empty.\n(Press SPACE to end)");
    return;
  }
  
  const lines = inv.map(item => {
    const itemData = getItemData(scene, item.name);
    const description = itemData && itemData.description ? ` - ${itemData.description.slice(0, 20)}...` : '';
    
    return {
      label: `${item.name} x${item.quantity}${description}`,
      callback: () => {
        clearButtons(scene);
        if (isUseFlow) handleUseItem(scene, item);
        else handleEquipItem(scene, item.name);
      }
    };
  });
  
  lines.push({
    label: "Cancel",
    callback: () => {
      clearButtons(scene);
      endFlow(scene);
    }
  });
  
  createButtons(scene, lines);
  showDialog(scene, `Select an item to ${isUseFlow ? "use" : "equip"}`);
}

function handleUseItem(scene, item) {
  const itemData = getItemData(scene, item.name);
  if (applyItemEffects(scene, itemData)) {
    removeFromInventory(scene, item.name, 1);
    
    // Simple effect instead of particle effect
    if (scene.player) {
      createSimpleEffect(scene, scene.player.x, scene.player.y, EFFECT_COLORS.HEAL);
    }
    
    alert(`Used ${item.name}.`);
  } else {
    alert(`${item.name} has no usable effects.`);
  }
  endFlow(scene);
}

function handleEquipItem(scene, itemName) {
  scene.equippedItems.push(itemName);
  recalcEquippedResist(scene);
  
  // Visual feedback with simple effect instead of particles
  if (scene.player) {
    createSimpleEffect(scene, scene.player.x, scene.player.y, 0x00ffff);
    
    scene.player.setTint(0x00ffff);
    scene.time.delayedCall(300, () => scene.player.clearTint());
  }
  
  alert(`Equipped ${itemName}.`);
  endFlow(scene);
}

function handleReturn(scene) {
  let targetZone = null;
  if (scene.currentZone === "Outer Grasslands") {
    targetZone = zoneList.find(z => z.name.toLowerCase() === "village");
  } else if (scene.currentZone !== "Village") {
    let currentIndex = zoneList.findIndex(z => z.name === scene.currentZone);
    if (currentIndex > 0) targetZone = zoneList[currentIndex - 1];
  }
  if (targetZone) {
    console.log(`Return option selected. Traveling to zone: ${targetZone.name}`);
    showDialog(scene, `Returning to ${targetZone.name}...\n(Press SPACE to continue)`);
    
    // Transition effect
    scene.cameras.main.fadeOut(500);
    
    scene.input.keyboard.once("keydown-SPACE", () => {
      const currentOromozi = scene.playerStats.oromozi;
      scene.playerStats = createInitialStats(targetZone.name, currentOromozi);
      
      // Preserve level and experience
      if (scene.playerStats.level) {
        scene.playerStats.level = scene.playerStats.level;
        scene.playerStats.experience = scene.playerStats.experience;
      }
      
      scene.scene.restart({ zone: targetZone, inventory: scene.localInventory, promptCount: 0 });
    });
  } else {
    console.warn("Return option selected, but no target zone found.");
  }
}

/* =======================================================
   10) PHASER GAME CONFIG & SCENE FUNCTIONS (IMPROVED)
======================================================= */
class Monster extends Phaser.Physics.Arcade.Sprite {
  constructor(scene, x, y) {
    super(scene, x, y, "hickory_idle");
    scene.add.existing(this);
    scene.physics.add.existing(this);
    this.setCollideWorldBounds(true);
    this.setDepth(2000);

    this.currentState = "idle";
    this.anims.play("monster_idle", true);

    // Scale monster stats with player level
    const playerLevel = scene.playerStats.level || 1;
    const difficultyMultiplier = 1 + (playerLevel - 1) * 0.2;
    
    this.speed = 50 + (playerLevel - 1) * 5;
    this.attackRange = 40; // Increased for better hit detection
    this.detectionRange = 200 + (playerLevel - 1) * 10;
    this.attackCooldown = Math.max(800, 1000 - (playerLevel - 1) * 50); // Faster attacks at higher levels
    this.lastAttackTime = 0;
    this.maxHealth = Math.floor(80 * difficultyMultiplier);
    this.health = this.maxHealth;
    this.damage = 5 + Math.floor((playerLevel - 1) * 1.2);

    // Create health bar
    this.healthBar = scene.add.graphics();
    this.healthBar.setDepth(2001); // Above monster
    this.updateHealthBar();
    
    // Add monster name/level display
    this.levelText = scene.add.text(this.x, this.y - 30, `Monster Lv.${playerLevel}`, {
      font: '10px Arial',
      fill: '#ffffff',
      stroke: '#000000',
      strokeThickness: 2
    }).setOrigin(0.5).setDepth(2001);
    
          // Simple red tint for night predators
    if (scene.isNight) {
      this.setTint(0xff5555);
    }
  }

  updateHealthBar() {
    this.healthBar.clear();
    const barWidth = 30; // Width of the health bar
    const barHeight = 5; // Height of the health bar
    const healthRatio = this.health / this.maxHealth;
    
    // Background (red)
    this.healthBar.fillStyle(0xff0000);
    this.healthBar.fillRect(this.x - barWidth / 2, this.y - 20, barWidth, barHeight);
    
    // Fill (green portion)
    this.healthBar.fillStyle(0x00ff00); // Green
    this.healthBar.fillRect(this.x - barWidth / 2, this.y - 20, barWidth * healthRatio, barHeight);
    
    // Outline
    this.healthBar.lineStyle(1, 0xffffff); // White border
    this.healthBar.strokeRect(this.x - barWidth / 2, this.y - 20, barWidth, barHeight);
    
    // Update level text position
    if (this.levelText) {
      this.levelText.setPosition(this.x, this.y - 30);
    }
  }

  preUpdate(time, delta) {
    super.preUpdate(time, delta);
    this.updateHealthBar(); // Update health bar position and size
    
    const player = this.scene.player;
    const distance = Phaser.Math.Distance.Between(this.x, this.y, player.x, player.y);

    if (distance <= this.attackRange) {
      if (this.currentState !== "attacking") {
        this.currentState = "attacking";
        this.anims.play("monster_attack", true);
      }
      this.setVelocity(0);
      if (time > this.lastAttackTime + this.attackCooldown) {
        this.attack(player);
        this.lastAttackTime = time;
      }
    } else if (distance <= this.detectionRange) {
      if (this.currentState !== "walking") {
        this.currentState = "walking";
        this.anims.play("monster_walk", true);
      }
      const angle = Phaser.Math.Angle.Between(this.x, this.y, player.x, player.y);
      this.setVelocity(Math.cos(angle) * this.speed, Math.sin(angle) * this.speed);
    } else {
      if (this.currentState !== "idle") {
        this.currentState = "idle";
        this.anims.play("monster_idle", true);
      }
      this.setVelocity(0);
    }

    this.flipX = player.x < this.x;
  }

  attack(player) {
    if (this.scene.playerStats.health > 0) {
      // Calculate damage with some player defense reduction
      const battleStats = calculateBattleStats(this.scene);
      const damage = Math.max(1, this.damage - Math.floor(battleStats.defense * 0.3));
      
      this.scene.playerStats.health = Math.max(this.scene.playerStats.health - damage, 0);
      console.log("Monster attacked player! Health:", this.scene.playerStats.health);
      
      // Visual feedback
      player.setTint(0xff0000);
      this.scene.time.delayedCall(100, () => player.clearTint());
      this.scene.cameras.main.shake(100, 0.005 * damage);
      
      // Floating damage text
      createFloatingText(this.scene, player.x, player.y - 20, `-${damage}`, 0xff0000);
      
      updateHUD(this.scene);
    }
  }

  takeDamage(damage) {
    this.health -= damage;
    console.log(`Monster took ${damage} damage, health now: ${this.health}`);
    
    // Show damage number
    createFloatingText(this.scene, this.x, this.y - 20, `-${damage}`, 0xff0000);
    
    if (this.health <= 0) {
      // Death effect
      createSimpleEffect(this.scene, this.x, this.y, 0xff0000);
      
      // Award experience
      const expGain = 10 + Math.floor(Math.random() * 5);
      this.scene.playerStats.experience = (this.scene.playerStats.experience || 0) + expGain;
      createFloatingText(this.scene, this.x, this.y - 40, `+${expGain} EXP`, 0x00ffff);
      
      // Chance for loot
      if (Math.random() < 0.4) {
        const loot = getRandomLootForZone(this.scene);
        if (loot) {
          addToInventory(this.scene, loot);
          createFloatingText(this.scene, this.x, this.y - 60, `+${loot}`, 0xffff00);
        }
      }
      
      // Check for level up
      checkLevelUp(this.scene);
      
      this.healthBar.destroy();
      if (this.levelText) this.levelText.destroy();
      this.destroy();
      console.log("Monster defeated!");
    } else {
      this.setTint(0xff0000);
      this.scene.time.delayedCall(100, () => {
        this.clearTint();
      }, [], this);
      this.updateHealthBar(); // Immediate update for feedback
    }
  }

  destroy() {
    if (this.healthBar) {
      this.healthBar.destroy();
    }
    if (this.levelText) {
      this.levelText.destroy();
    }
    super.destroy();
  }
}

function preload() {
  this.load.json("OuterGrasslandsMap", "assets/maps/outerGrasslands.json");
  this.load.json("ShadyGroveMap", "assets/maps/shadyGrove.json");
  this.load.json("AridDesertMap", "assets/maps/aridDesert.json");
  this.load.json("villageCommonsMap", "assets/maps/villageCommonsMap.json");

  this.load.image("outerGrasslands", "assets/backgrounds/outerGrasslands.png");
  this.load.image("shadyGrove", "assets/backgrounds/shadyGrove.png");
  this.load.image("aridDesert", "assets/backgrounds/aridDesert.png");
  this.load.image("villageCommons", "assets/backgrounds/villageCommons.png");
  this.load.image("outerGrasslandsForeground", "assets/foregrounds/outerGrasslandsForeground.png");
  this.load.image("shadyGroveForeground", "assets/foregrounds/shadyGroveForeground.png");
  this.load.image("aridDesertForeground", "assets/foregrounds/aridDesertForeground.png");

  this.load.image("tent", "assets/images/tent.png");

  this.load.spritesheet("player", "assets/sprites/player.png", {
    frameWidth: 48,
    frameHeight: 48,
    margin: 0,
    spacing: 0
  });

  this.load.spritesheet("loot_crate", "assets/sprites/crate.png", {
    frameWidth: 64,
    frameHeight: 64
  });

  this.load.image("exclamation", "assets/sprites/exclamation.png");
  
  // Not using particle image since we switched to simple effects

  this.load.spritesheet("hickory_idle", "assets/sprites/Hickory_Idle.png", { frameWidth: 32, frameHeight: 32, margin: 0, spacing: 0 });
  this.load.spritesheet("hickory_walk", "assets/sprites/Hickory_Walk.png", { frameWidth: 32, frameHeight: 32, margin: 0, spacing: 0 });
  this.load.spritesheet("hickory_attack", "assets/sprites/Hickory_Attack.png", { frameWidth: 32, frameHeight: 32, margin: 0, spacing: 0 });

  this.load.json("narrativePrologues", "assets/data/narrativePrologues.json");
  this.load.json("narrativePrompts", "assets/data/narrativeprompt.json");
  this.load.json("lootTable", "assets/data/lootTable.json");
  
  // No sound preloads for now
}

function createScene() {
  console.log("createScene: Received scene data:", this.scene.settings.data);
  let defaultZone = zoneList.find(z => z.name === "Village");
  if (!this.scene.settings.data || !this.scene.settings.data.zone) {
    this.scene.settings.data = {
      zone: defaultZone,
      inventory: [
        { name: "Bread", quantity: 1 },
        { name: "Water", quantity: 1 },
        { name: "Iron Sword", quantity: 1 },
        { name: "Wooden Armor", quantity: 1 },
        { name: "Healing Medicine", quantity: 1 }
      ],
      promptCount: 0
    };
    console.log("Defaulting zone to Village with preloaded loot items.");
  }

  const existingOromozi = this.playerStats ? this.playerStats.oromozi : 1000;
  const existingLevel = this.playerStats ? this.playerStats.level : 1;
  const existingExp = this.playerStats ? this.playerStats.experience : 0;
  
  if (!this.playerStats) {
    this.playerStats = createInitialStats(this.scene.settings.data.zone.name, existingOromozi);
  } else {
    this.playerStats.currentZone = this.scene.settings.data.zone.name;
  }
  
  // Preserve progression between zone changes
  if (existingLevel > 1) {
    this.playerStats.level = existingLevel;
    this.playerStats.experience = existingExp;
  }
  
  this.localInventory = this.scene.settings.data.inventory || [];
  this.promptCount = this.scene.settings.data.promptCount || 0;
  this.deposits = this.deposits || [];
  this.listedItems = this.listedItems || [];
  this.tradeListings = this.tradeListings || [];
  initEquippedData(this);

  // Initialize flags
  this.isRestarting = false;
  this.isDying = false;

  if (!this.registry.get('gameTime')) {
    this.registry.set('gameTime', 0);
  }
  this.secondsPerDay = 240;
  this.secondsPerHour = this.secondsPerDay / 24;

  if (this.scene.settings.data.zone.name !== "Village" && !this.initialScavengerInventory) {
    this.initialScavengerInventory = JSON.parse(JSON.stringify(this.localInventory));
    this.lastInventoryState = JSON.parse(JSON.stringify(this.localInventory));
    console.log("Initial Scavenger Mode inventory set:", this.initialScavengerInventory);
  }

  let zoneData;
  if (this.scene.settings.data.zone) {
    zoneData = this.scene.settings.data.zone;
    for (let i = 0; i < zoneList.length; i++) {
      if (zoneList[i].name === zoneData.name) {
        currentZoneIndex = i;
        break;
      }
    }
    console.log("createScene: New zone data found:", zoneData.name);
  } else {
    zoneData = zoneList[currentZoneIndex];
    console.log("createScene: No new zone data; using current zone:", zoneData.name);
  }
  this.currentZone = zoneData.name;
  this.playerStats.currentZone = this.currentZone;
  this.hasPromptedCamping = false;
  
  // Initialize arrays for tracking game objects
  this.exclamationSprites = [];
  this.miniMapMonsters = [];
  this.miniMapCrates = [];

  const mapData = this.cache.json.get(zoneData.mapKey);
  let bgX = 0;
  let bgY = 0;
  if (mapData && mapData.layers) {
    const backgroundLayer = mapData.layers.find(layer => layer.type === "imagelayer" && layer.name.toLowerCase() === "background");
    if (backgroundLayer) {
      bgX = backgroundLayer.x || 0;
      bgY = backgroundLayer.y || 0;
    }
  }
  this.background = this.add.image(bgX * bgScale, bgY * bgScale, zoneData.backgroundKey).setOrigin(0, 0).setScale(bgScale);
  this.physics.world.setBounds(0, 0, this.background.displayWidth, this.background.displayHeight);
  this.cameras.main.setBounds(0, 0, this.background.displayWidth, this.background.displayHeight);

  // No particle system needed with simplified effects

  this.obstacles = this.physics.add.staticGroup();

  if (zoneData.name === "Village") {
    // Village-specific setup
    this.interactionObjects = this.physics.add.staticGroup();
    
    if (mapData && mapData.layers) {
      mapData.layers.forEach(layer => {
        if (layer.type === "objectgroup" && layer.name === "Object Layer 1") {
          const offsetX = layer.offsetx || 0;
          const offsetY = layer.offsety || 0;
          layer.objects.forEach(obj => {
            // Add a slightly smaller collision box for better movement
            const rect = this.add.rectangle(
              (obj.x + offsetX) * bgScale + 5,
              (obj.y + offsetY) * bgScale + 5,
              obj.width * bgScale - 10,
              obj.height * bgScale - 10,
              0xff0000,
              0
            );
            rect.setOrigin(0, 0);
            this.physics.add.existing(rect, true);
            this.obstacles.add(rect);
          });
        } else if (layer.type === "objectgroup" && layer.name.toLowerCase() === "interactions") {
          layer.objects.forEach(obj => {
            const interactiveObj = this.add.rectangle(
              obj.x * bgScale,
              obj.y * bgScale,
              obj.width * bgScale,
              obj.height * bgScale,
              0x00ff00,
              0
            );
            interactiveObj.setOrigin(0, 0);
            this.physics.add.existing(interactiveObj, true);
            interactiveObj.body.enable = false;
            interactiveObj.setInteractive();
            
            // Add visual hint for interactive objects
            const hintGlow = this.add.graphics();
            hintGlow.lineStyle(2, 0x00ffff, 0.5);
            hintGlow.strokeRect(
              obj.x * bgScale,
              obj.y * bgScale,
              obj.width * bgScale,
              obj.height * bgScale
            );
            hintGlow.setDepth(900);
            
            // Pulse animation for interaction hint
            this.tweens.add({
              targets: hintGlow,
              alpha: { from: 0.3, to: 0.8 },
              duration: 1000,
              yoyo: true,
              repeat: -1
            });
            
            interactiveObj.on("pointerdown", () => {
              console.log("Clicked on village object:", obj);
              handleVillageContractInteraction(this, obj);
            });
            
            interactiveObj.on("pointerover", () => {
              // Show interaction label
              const label = this.add.text(
                obj.x * bgScale + (obj.width * bgScale / 2),
                obj.y * bgScale - 10,
                obj.name.replace(/_/g, " "),
                {
                  font: "14px Arial",
                  fill: "#ffffff",
                  stroke: "#000000",
                  strokeThickness: 3
                }
              ).setOrigin(0.5, 1).setDepth(1000);
              
              interactiveObj.label = label;
            });
            
            interactiveObj.on("pointerout", () => {
              if (interactiveObj.label) {
                interactiveObj.label.destroy();
                interactiveObj.label = null;
              }
            });
            
            this.interactionObjects.add(interactiveObj);
          });
        }
      });
    }

    // Enhanced battle area with visual indicator
    const battleBox = this.add.rectangle(300 * bgScale, 200 * bgScale, 50 * bgScale, 50 * bgScale, 0xff0000, 0.3);
    battleBox.setOrigin(0, 0);
    battleBox.setStrokeStyle(2, 0xffffff);
    this.physics.add.existing(battleBox, true);
    battleBox.body.enable = false;
    battleBox.setInteractive();
    battleBox.name = "battle_mode";
    
    // Add battle icon
    const battleIcon = this.add.text(
      battleBox.x + battleBox.width / 2,
      battleBox.y + battleBox.height / 2,
      "⚔️",
      { font: "24px Arial" }
    ).setOrigin(0.5).setDepth(901);
    
    // Add battle label
    const battleLabel = this.add.text(
      battleBox.x + battleBox.width / 2,
      battleBox.y + battleBox.height + 10,
      "Training Arena",
      {
        font: "14px Arial",
        fill: "#ffffff",
        stroke: "#000000",
        strokeThickness: 3
      }
    ).setOrigin(0.5, 0).setDepth(901);
    
    // Pulsing animation
    this.tweens.add({
      targets: [battleBox, battleIcon],
      alpha: { from: 0.7, to: 1 },
      duration: 1200,
      yoyo: true,
      repeat: -1
    });
    
    battleBox.on("pointerdown", () => {
      console.log("Clicked on battle box");
      handleVillageContractInteraction(this, battleBox);
    });
    
    this.interactionObjects.add(battleBox);
  } else {
    // Non-village zone setup
    if (mapData && mapData.layers) {
      mapData.layers.forEach(layer => {
        if (layer.type === "objectgroup" && layer.name === "Object Layer 1") {
          const offsetX = layer.offsetx || 0;
          const offsetY = layer.offsety || 0;
          layer.objects.forEach(obj => {
            // Use slightly smaller collision boxes for better movement
            const rect = this.add.rectangle(
              (obj.x + offsetX) * bgScale + 5,
              (obj.y + offsetY) * bgScale + 5,
              obj.width * bgScale - 10,
              obj.height * bgScale - 10,
              0xff0000,
              0
            );
            rect.setOrigin(0, 0);
            this.physics.add.existing(rect, true);
            this.obstacles.add(rect);
          });
        } else if (
          layer.type === "imagelayer" &&
          layer.name.toLowerCase() === zoneData.foregroundKey.toLowerCase()
        ) {
          const offX = layer.x || 0;
          const offY = layer.y || 0;
          this.foreground = this.add.image(offX * bgScale, offY * bgScale, zoneData.foregroundKey)
            .setOrigin(0, 0)
            .setScale(bgScale);
          this.foreground.setDepth(1000);
        }
      });
    }
  }

  // Improved night overlay with stars
  this.nightOverlay = this.add.rectangle(
    this.game.config.width / 2,
    this.game.config.height / 2,
    this.game.config.width,
    this.game.config.height,
    0x000033,
    0.6
  )
    .setOrigin(0.5)
    .setDepth(1500)
    .setScrollFactor(0);

  // Add stars to night sky (only visible at night)
  this.stars = [];
  for (let i = 0; i < 50; i++) {
    const star = this.add.circle(
      Phaser.Math.Between(0, this.game.config.width),
      Phaser.Math.Between(0, this.game.config.height / 2),
      Phaser.Math.Between(1, 2),
      0xffffff,
      1
    ).setScrollFactor(0).setDepth(1501).setAlpha(0);
    
    // Twinkle animation
    this.tweens.add({
      targets: star,
      alpha: { from: 0.3, to: 0.9 },
      duration: Phaser.Math.Between(1000, 3000),
      yoyo: true,
      repeat: -1,
      delay: Phaser.Math.Between(0, 2000)
    });
    
    this.stars.push(star);
  }

  const gameTime = this.registry.get('gameTime');
  const gameHour = (6 + Math.floor(gameTime / this.secondsPerHour)) % 24;
  const isNight = gameHour >= 20 || gameHour < 6;
  this.nightOverlay.setAlpha(isNight ? 0.8 : 0);
  this.stars.forEach(star => star.setAlpha(isNight ? Phaser.Math.Between(3, 9) * 0.1 : 0));
  this.wasNight = isNight;
  this.isNight = isNight;

  // Create player with improved visuals
  this.player = this.physics.add.sprite(100 * bgScale, 100 * bgScale, "player");
  this.player.setScale(playerScale * 0.5);
  this.player.setCollideWorldBounds(true);
  this.player.setDepth(2000);
  
  // Add subtle shadow beneath player
  this.playerShadow = this.add.ellipse(
    this.player.x,
    this.player.y + 12,
    20,
    10,
    0x000000,
    0.3
  ).setDepth(1999);

  // Create visual health bar that follows player
  this.healthBar = this.add.graphics().setDepth(3000).setScrollFactor(0);
  
  // Improved collision box for player (smaller than sprite for better movement)
  this.player.body.setSize(16, 16);
  this.player.body.setOffset(16, 20);

  // Create player animations (unchanged)
  this.anims.create({
    key: "walk-down",
    frames: this.anims.generateFrameNumbers("player", { start: 18, end: 23 }),
    frameRate: 10,
    repeat: -1
  });

  this.anims.create({
    key: "walk-right",
    frames: this.anims.generateFrameNumbers("player", { start: 6, end: 11 }),
    frameRate: 10,
    repeat: -1
  });

  this.anims.create({
    key: "walk-up",
    frames: this.anims.generateFrameNumbers("player", { start: 30, end: 35 }),
    frameRate: 10,
    repeat: -1
  });

  this.anims.create({
    key: "walk-left",
    frames: this.anims.generateFrameNumbers("player", { start: 24, end: 29 }),
    frameRate: 10,
    repeat: -1
  });

  this.anims.create({
    key: "idle-down",
    frames: this.anims.generateFrameNumbers("player", { start: 0, end: 5 }),
    frameRate: 10,
    repeat: -1
  });

  this.anims.create({
    key: "idle-up",
    frames: this.anims.generateFrameNumbers("player", { start: 12, end: 17 }),
    frameRate: 10,
    repeat: -1
  });

  this.anims.create({
    key: "idle-left",
    frames: [{ key: "player", frame: 24 }],
    frameRate: 10
  });

  this.anims.create({
    key: "idle-right",
    frames: [{ key: "player", frame: 6 }],
    frameRate: 10
  });

  this.anims.create({
    key: "attack-down",
    frames: this.anims.generateFrameNumbers("player", { start: 36, end: 39 }),
    frameRate: 15,
    repeat: 0
  });

  this.anims.create({
    key: "attack-right",
    frames: this.anims.generateFrameNumbers("player", { start: 42, end: 45 }),
    frameRate: 15,
    repeat: 0
  });

  this.anims.create({
    key: "attack-up",
    frames: this.anims.generateFrameNumbers("player", { start: 48, end: 51 }),
    frameRate: 15,
    repeat: 0
  });

  this.anims.create({
    key: "attack-left",
    frames: this.anims.generateFrameNumbers("player", { start: 54, end: 57 }),
    frameRate: 15,
    repeat: 0
  });

  this.player.anims.play("idle-down", true);
  this.lastDirection = "down";

  this.isAttacking = false;

  this.player.on('animationcomplete', (animation) => {
    if (animation.key.startsWith('attack-')) {
      this.isAttacking = false;
    }
  });

  // Improved attack logic with visual effects
  this.applyAttackDamage = () => {
    const attackRange = 120; // Increased range for better detection
    const verticalTolerance = 50; // Increased tolerance
    let monstersInRange = [];
    console.log("Player at:", this.player.x, this.player.y, "Direction:", this.lastDirection);
    
    // Create attack effect based on direction
    let effectX = this.player.x;
    let effectY = this.player.y;
    
    if (this.lastDirection === "right") {
      effectX = this.player.x + 30;
      monstersInRange = this.monsters.getChildren().filter(monster => {
        const inRange = monster.x > this.player.x && monster.x < this.player.x + attackRange &&
                        Math.abs(monster.y - this.player.y) < verticalTolerance;
        if (inRange) console.log("Monster in range at:", monster.x, monster.y);
        return inRange;
      });
    } else if (this.lastDirection === "left") {
      effectX = this.player.x - 30;
      monstersInRange = this.monsters.getChildren().filter(monster => {
        const inRange = monster.x < this.player.x && monster.x > this.player.x - attackRange &&
                        Math.abs(monster.y - this.player.y) < verticalTolerance;
        if (inRange) console.log("Monster in range at:", monster.x, monster.y);
        return inRange;
      });
    } else if (this.lastDirection === "up") {
      effectY = this.player.y - 30;
      monstersInRange = this.monsters.getChildren().filter(monster => {
        const inRange = monster.y < this.player.y && monster.y > this.player.y - attackRange &&
                        Math.abs(monster.x - this.player.x) < verticalTolerance;
        if (inRange) console.log("Monster in range at:", monster.x, monster.y);
        return inRange;
      });
    } else if (this.lastDirection === "down") {
      effectY = this.player.y + 30;
      monstersInRange = this.monsters.getChildren().filter(monster => {
        const inRange = monster.y > this.player.y && monster.y < this.player.y + attackRange &&
                        Math.abs(monster.x - this.player.x) < verticalTolerance;
        if (inRange) console.log("Monster in range at:", monster.x, monster.y);
        return inRange;
      });
    }
    
          // Create attack effect
    createSimpleEffect(this, effectX, effectY, EFFECT_COLORS.ATTACK);
    
    console.log("Monsters in range:", monstersInRange.length);
    
    // Calculate player attack power with level scaling
    const baseAttack = 10 + (this.playerStats.level - 1) * 2;
    const randomFactor = Phaser.Math.Between(-2, 3);
    const attackPower = baseAttack + randomFactor;
    
    monstersInRange.forEach(monster => {
      monster.takeDamage(attackPower);
    });
  };

  this.cameras.main.startFollow(this.player);
  this.cameras.main.setZoom(2);

  // Monster animations
  this.anims.create({
    key: "monster_idle",
    frames: this.anims.generateFrameNumbers("hickory_idle", { start: 0, end: 5 }),
    frameRate: 10,
    repeat: -1
  });

  this.anims.create({
    key: "monster_walk",
    frames: this.anims.generateFrameNumbers("hickory_walk", { start: 0, end: 5 }),
    frameRate: 10,
    repeat: -1
  });

  this.anims.create({
    key: "monster_attack",
    frames: this.anims.generateFrameNumbers("hickory_attack", { start: 0, end: 5 }),
    frameRate: 10,
    repeat: -1
  });

  // Crate break animation
  this.anims.create({
    key: "crate_break",
    frames: this.anims.generateFrameNumbers("loot_crate", { start: 1, end: 4 }),
    frameRate: 10,
    repeat: 0
  });

  this.monsters = this.physics.add.group();
  if (this.obstacles && this.obstacles.getLength() > 0) {
    this.physics.add.collider(this.monsters, this.obstacles);
  }

  // Enhanced monster spawning with level scaling
  if (this.currentZone === "Outer Grasslands") {
    this.monsterSpawnTimer = this.time.addEvent({
      delay: 5000,
      callback: this.spawnMonster,
      callbackScope: this,
      loop: true
    });
  }

  // Set up camera and viewport
  const cam = this.cameras.main;
  const visibleWidth = cam.width / cam.zoom;
  const visibleHeight = cam.height / cam.zoom;
  const frameX = (this.game.config.width - visibleWidth) / 2;
  const frameY = (this.game.config.height - visibleHeight) / 2;
  this.frameRect = new Phaser.Geom.Rectangle(frameX, frameY, visibleWidth, visibleHeight);
  
  // Create stylish frame
  this.frame = this.add.graphics();
  this.frame.lineStyle(4, 0xffffff, 1);
  this.frame.strokeRect(frameX, frameY, visibleWidth, visibleHeight);
  
  // Add inner stroke for style
  this.frame.lineStyle(2, 0x000000, 0.5);
  this.frame.strokeRect(frameX + 2, frameY + 2, visibleWidth - 4, visibleHeight - 4);
  
  this.frame.setScrollFactor(0);
  this.frame.setDepth(10000);
  
  // Improved HUD
  this.hudText = this.add.text(frameX + 10, frameY + visibleHeight - 10, "", {
    font: "16px Arial",
    fill: "#ffffff",
    stroke: "#000000",
    strokeThickness: 3
  });
  this.hudText.setOrigin(0, 1);
  this.hudText.setScrollFactor(0);
  this.hudText.setDepth(11000);

  // Log system with better visibility
  this.logMessages = [];
  this.logText = this.add.text(frameX + visibleWidth - 10, frameY + 10, "Loot Log Initialized", {
    font: "12px Arial",
    fill: "#ff9900",
    stroke: "#000000",
    strokeThickness: 2,
    align: "right",
    wordWrap: { width: 200 }
  }).setOrigin(1, 0).setScrollFactor(0).setDepth(12000);

  // Add mini-map if in scavenger zones (not village)
  if (this.currentZone !== "Village") {
    const mapSize = 100;
    const mapX = frameX + visibleWidth - mapSize - 10;
    const mapY = frameY + visibleHeight - mapSize - 10;
    
    // Create mini-map background
    this.miniMap = this.add.graphics()
      .fillStyle(0x000000, 0.5)
      .fillRect(mapX, mapY, mapSize, mapSize)
      .lineStyle(2, 0xffffff, 0.8)
      .strokeRect(mapX, mapY, mapSize, mapSize)
      .setScrollFactor(0)
      .setDepth(12000);
    
    // Create player dot on mini-map
    this.miniMapPlayer = this.add.circle(0, 0, 3, 0x00ff00)
      .setScrollFactor(0)
      .setDepth(12001);
    
    // Update mini-map in update function
    this.updateMiniMap = () => {
      if (!this.miniMapPlayer || !this.player || !this.background) return;
      
      // Scale player position to mini-map
      const mapRatioX = mapSize / this.background.displayWidth;
      const mapRatioY = mapSize / this.background.displayHeight;
      
      const miniX = mapX + this.player.x * mapRatioX;
      const miniY = mapY + this.player.y * mapRatioY;
      
      this.miniMapPlayer.setPosition(miniX, miniY);
      
      // Update monster dots on minimap
      if (this.miniMapMonsters) {
        this.miniMapMonsters.forEach(dot => dot.destroy());
      }
      
      this.miniMapMonsters = [];
      if (this.monsters) {
        this.monsters.getChildren().forEach(monster => {
          const dotX = mapX + monster.x * mapRatioX;
          const dotY = mapY + monster.y * mapRatioY;
          
          const dot = this.add.circle(dotX, dotY, 2, 0xff0000)
            .setScrollFactor(0)
            .setDepth(12001);
            
          this.miniMapMonsters.push(dot);
        });
      }
      
      // Add loot crates to minimap
      if (this.miniMapCrates) {
        this.miniMapCrates.forEach(dot => dot.destroy());
      }
      
      this.miniMapCrates = [];
      if (this.lootCrates) {
        this.lootCrates.getChildren().forEach(crate => {
          const dotX = mapX + crate.x * mapRatioX;
          const dotY = mapY + crate.y * mapRatioY;
          
          const dot = this.add.circle(dotX, dotY, 2, 0xffff00)
            .setScrollFactor(0)
            .setDepth(12001);
            
          this.miniMapCrates.push(dot);
        });
      }
    };
  }

  // Game controls
  this.keys = this.input.keyboard.addKeys({
    up: Phaser.Input.Keyboard.KeyCodes.W,
    left: Phaser.Input.Keyboard.KeyCodes.A,
    down: Phaser.Input.Keyboard.KeyCodes.S,
    right: Phaser.Input.Keyboard.KeyCodes.D,
    interact: Phaser.Input.Keyboard.KeyCodes.I,
    z: Phaser.Input.Keyboard.KeyCodes.Z,
    v: Phaser.Input.Keyboard.KeyCodes.V,
    space: Phaser.Input.Keyboard.KeyCodes.SPACE,
    t: Phaser.Input.Keyboard.KeyCodes.T, // Time setting
    i: Phaser.Input.Keyboard.KeyCodes.I, // Inventory shortcut
    m: Phaser.Input.Keyboard.KeyCodes.M  // Map toggle
  });

  // Create loot groups and spawn initial objects in non-village zones
  if (zoneData.name !== "Village") {
    this.lootCrates = this.physics.add.group({ immovable: true, allowGravity: false });
    
    // Create exclamations group (now tracking array, not physics)
    this.exclamationSprites = [];
    
    // Scale spawns with player level
    const baseCount = 6;
    const levelBonus = Math.floor((this.playerStats.level - 1) * 0.7);
    spawnMultipleLootCrates(this, baseCount + levelBonus);
    spawnMultipleExclamations(this, 6);
    
    // Periodic spawning of new resources
    this.time.addEvent({
      delay: 30000,
      callback: () => spawnMultipleLootCrates(this, 1 + Math.floor(this.playerStats.level / 3)),
      callbackScope: this,
      loop: true
    });
    
    this.time.addEvent({
      delay: 15000,
      callback: () => spawnMultipleExclamations(this, 1),
      callbackScope: this,
      loop: true
    });
  }

  // Enhanced crate hit function with better feedback
  this.hitCrate = (crate) => {
    if (crate.getData('breaking')) return;

    let health = crate.getData('health');
    health -= 1;
    crate.setData('health', health);
    
    // Visual feedback for hit
    crate.setTint(0xff9900);
    this.time.delayedCall(100, () => crate.clearTint());
    
    // Camera shake
    this.cameras.main.shake(50, 0.003);

    if (health <= 0) {
      crate.setData('breaking', true);
      
      // Determine loot with level consideration
      const loot = getRandomLootForZone(this);
      if (loot) {
        addToInventory(this, loot);
        addToLog(this, `Received: ${loot}`);
        
        // Visual loot explosion
        createSimpleEffect(this, crate.x, crate.y, EFFECT_COLORS.LOOT);
      } else {
        addToLog(this, "No loot found");
      }
      
      crate.play('crate_break');
      crate.once('animationcomplete', () => {
        crate.destroy();
      });
    } else {
      console.log(`Crate hit, health remaining: ${health}`);
    }
  };

  // Load narrative data
  this.narrativePrologues = this.cache.json.get("narrativePrologues");
  this.narrativeData = this.cache.json.get("narrativePrompts");

  // Dialog and UI elements
  this.dialogBg = this.add.graphics();
  this.dialogBg.setDepth(1600);
  this.dialogBg.setVisible(false);
  
  this.dialogText = this.add.text(0, 0, "", {
    font: "14px Arial",
    fill: "#ffffff",
    wordWrap: { width: 240 },
    stroke: "#000000",
    strokeThickness: 3
  });
  
  this.dialogText.setDepth(1601);
  this.dialogText.setVisible(false);
  this.buttons = [];
  this.narrativeScreen = SCREEN_NONE;
  this.activePrompt = null;
  this.chosenOptionIndex = -1;

  // Add player collisions
  if (this.obstacles && this.obstacles.getLength() > 0) {
    this.physics.add.collider(this.player, this.obstacles);
  }

  updateHUD(this);

  // Handle fade-in after death with better transition
  if (this.scene.settings.data.fromDeath) {
    this.cameras.main.setAlpha(0);
    this.add.tween({
      targets: this.cameras.main,
      alpha: 1,
      duration: 1500,
      ease: 'Sine.easeIn',
      onComplete: () => {
        // Simple resurrection effect
        createSimpleEffect(this, this.player.x, this.player.y, 0xffffff);
      }
    });
  } else {
    // Normal zone transition
    this.cameras.main.fadeIn(500);
  }

  console.log("createScene: gameTime:", this.registry.get('gameTime'));
}

function spawnMonster() {
  console.log("spawnMonster called");
  
  // Only spawn at night in wilderness zones with level-based limit
  if (this.isNight && this.currentZone === "Outer Grasslands") {
    const playerLevel = this.playerStats.level || 1;
    const maxMonsters = 3 + Math.floor(playerLevel / 2);
    
    if (this.monsters.getLength() < maxMonsters) {
      let x, y, validSpawn = false;
      let tries = 0;
      const MAX_TRIES = 100;
      
      while (!validSpawn && tries < MAX_TRIES) {
        // Spawn within a reasonable area of the world
        const worldW = this.background ? this.background.displayWidth : 800;
        const worldH = this.background ? this.background.displayHeight : 600;
        
        x = Phaser.Math.Between(50, worldW - 50);
        y = Phaser.Math.Between(50, worldH - 50);
        
        // More relaxed distance requirements
        let playerDistance = 250;
        if (this.player && this.player.x !== undefined) {
          playerDistance = Phaser.Math.Distance.Between(this.player.x, this.player.y, x, y);
        }
        
        // Don't spawn too close but less restrictive on distance
        if (playerDistance > 150 && playerDistance < 800 && !overlapsObstacle(this, x, y, 40)) {
          validSpawn = true;
        }
        tries++;
      }
      
      if (validSpawn) {
        console.log("Monster spawned at", x, y);
        const monster = new Monster(this, x, y);
        this.monsters.add(monster);
        
        // Simple spawn effect
        createSimpleEffect(this, x, y, 0x330000);
      } else {
        console.log("Failed to find a valid spawn location after", MAX_TRIES, "tries");
      }
    } else {
      console.log(`Max monsters (${maxMonsters}) already spawned`);
    }
  } else {
    console.log("Spawn conditions not met: isNight=", this.isNight, "zone=", this.currentZone, "monsters=", this.monsters ? this.monsters.getLength() : 0);
  }
}

function handlePlayerDeath(scene) {
  scene.isRestarting = true;
  scene.isDying = true;
  
  // Death sequence with effects
  scene.player.setTint(0xff0000);
  scene.cameras.main.shake(500, 0.03);
  scene.cameras.main.flash(300, 255, 0, 0);
  
  showDialog(scene, "You have died!\nYou wake up in Village Commons...\nAll your loot has been lost!");
  
  // Simple death effect
  createSimpleEffect(scene, scene.player.x, scene.player.y, 0xff0000);
  
  scene.time.delayedCall(2000, () => {
    const fadeTween = scene.tweens.add({
      targets: scene.cameras.main,
      alpha: 0,
      duration: 1000,
      onComplete: () => {
        // Cleanup
        hideDialog(scene);
        scene.sound.stopAll();
        scene.tweens.killAll();
        if (scene.monsters) scene.monsters.clear(true, true);
        if (scene.lootCrates) scene.lootCrates.clear(true, true);
        if (scene.exclamations) scene.exclamations.clear(true, true);
        
        // Restart scene
        const villageZone = zoneList.find(z => z.name === "Village");
        if (villageZone) {
          // Preserve level and oromozi, just heal the player
          const currentLevel = scene.playerStats.level || 1;
          const currentExp = scene.playerStats.experience || 0;
          scene.playerStats = createInitialStats(villageZone.name, scene.playerStats.oromozi);
          scene.playerStats.level = currentLevel;
          scene.playerStats.experience = currentExp;
          
          // FIX 3: Clear inventory when player dies
          scene.localInventory = [];
          
          scene.scene.restart({ zone: villageZone, inventory: scene.localInventory, fromDeath: true, promptCount: 0 });
        } else {
          console.error("Village zone not found!");
        }
      }
    });
  });
}

function updateScene(time, delta) {
  if (this.isRestarting) return;

  if (!this.player || !this.player.body) return;

  // Update game time
  let gameTime = this.registry.get('gameTime') || 0;
  gameTime += delta / 1000;
  this.registry.set('gameTime', gameTime % this.secondsPerDay);
  const gameHour = (6 + Math.floor(gameTime / this.secondsPerHour)) % 24;
  this.isNight = gameHour >= 20 || gameHour < 6;
  
  // Update time display in HUD with safety checks and proper recreation
  const hour = gameHour % 12 === 0 ? 12 : gameHour % 12;
  const ampm = gameHour < 12 ? "AM" : "PM";
  const timeString = `${hour}:00 ${ampm}`;
  
  try {
    if (this.timeText && this.timeText.active) {
      this.timeText.setText(timeString);
    } else {
      // Create a new timeText if it doesn't exist or was destroyed
      if (this.timeText) this.timeText.destroy();
      
      this.timeText = this.add.text(10, 10, timeString, {
        font: "12px Arial",
        fill: "#ffffff",
        stroke: "#000000",
        strokeThickness: 2
      }).setScrollFactor(0).setDepth(12000);
    }
  } catch (error) {
    console.warn("Error with time display, recreating:", error);
    try {
      // Last resort - recreate from scratch with no text
      if (this.timeText) this.timeText.destroy();
      this.timeText = this.add.text(10, 10, "", {
        font: "12px Arial",
        fill: "#ffffff",
      }).setScrollFactor(0).setDepth(12000);
      
      // Set text in next frame
      this.time.delayedCall(100, () => {
        if (this.timeText && this.timeText.active) {
          this.timeText.setText(timeString);
        }
      });
    } catch (err) {
      console.error("Failed to recreate time display:", err);
    }
  }

  // Update day/night transition
  if (this.isNight && !this.wasNight) {
    this.tweens.add({
      targets: this.nightOverlay,
      alpha: 0.8,
      duration: 5000,
      ease: 'Linear'
    });
    
    // Fade in stars
    this.stars.forEach(star => {
      this.tweens.add({
        targets: star,
        alpha: Phaser.Math.Between(3, 9) * 0.1,
        duration: 3000,
        ease: 'Linear'
      });
    });
  } else if (!this.isNight && this.wasNight) {
    this.tweens.add({
      targets: this.nightOverlay,
      alpha: 0,
      duration: 5000,
      ease: 'Linear'
    });
    
    // Fade out stars
    this.stars.forEach(star => {
      this.tweens.add({
        targets: star,
        alpha: 0,
        duration: 3000,
        ease: 'Linear'
      });
    });
  }
  this.wasNight = this.isNight;

  // Update player shadow
  if (this.playerShadow) {
    this.playerShadow.setPosition(this.player.x, this.player.y + 12);
  }
  
  // Update minimap if exists with safer checks
  if (this.updateMiniMap && this.currentZone !== "Village" && 
      this.player && this.player.x !== undefined && this.player.y !== undefined) {
    try {
      this.updateMiniMap();
    } catch (error) {
      console.warn("Error updating minimap:", error);
    }
  }

  // Camping prompt logic with better timing
  if (gameHour === 18 && !this.hasPromptedCamping && this.currentZone !== "Village" && this.narrativeScreen === SCREEN_NONE) {
    this.narrativeScreen = SCREEN_CAMPING_PROMPT;
    showDialog(this, "It's getting dark (6:00 PM), do you want to set up camp?\n(Press SPACE to confirm)");
    this.hasPromptedCamping = true;
  } else if (gameHour !== 18 && this.hasPromptedCamping) {
    this.hasPromptedCamping = false; // Reset flag when time changes
  }

  // Clear monsters safely
  if (this.monsters && (!this.isNight || this.currentZone === "Village")) {
    this.monsters.clear(true, true);
  }

  // Handle player death and scene restart
  if (this.playerStats && this.playerStats.health <= 0 && this.currentZone !== "Village" && !this.isDying) {
    console.log("Player died in Scavenger Mode!");
    handlePlayerDeath(this);
    return;
  }

  // Set time to 5:00 PM when 'T' is pressed
  if (Phaser.Input.Keyboard.JustDown(this.keys.t)) {
    this.registry.set('gameTime', 110); // 11 hours * 10 seconds per hour
    console.log("Time set to 5:00 PM");
  }

  // Zone changing shortcut with better transition
  if (Phaser.Input.Keyboard.JustDown(this.keys.z)) {
    console.log("Switching zone, current gameTime:", this.registry.get('gameTime'));
    currentZoneIndex = (currentZoneIndex + 1) % zoneList.length;
    
    // Add transition effect
    this.cameras.main.fadeOut(500);
    this.time.delayedCall(500, () => {
      this.scene.restart({ zone: zoneList[currentZoneIndex], inventory: this.localInventory, promptCount: this.promptCount });
    });
    return;
  }
  
  // Show inventory on I key press (when not in other dialogs)
  if (Phaser.Input.Keyboard.JustDown(this.keys.i) && this.narrativeScreen === SCREEN_NONE) {
    this.narrativeScreen = SCREEN_ITEM_MENU;
    showItemMenu(this);
    return;
  }

  // Manage foreground layer depth based on player position
  if (this.foreground) {
    const overlapsForeground = Phaser.Geom.Intersects.RectangleToRectangle(this.player.getBounds(), this.foreground.getBounds());
    if (overlapsForeground) {
      this.player.setDepth(this.foreground.depth - 1);
    } else {
      this.player.setDepth(this.foreground.depth + 1);
    }
  }

  // Adjusted condition to only halt for module UI states (7 to 13), not SCREEN_CAMPING_PROMPT (14)
  if (this.narrativeScreen >= SCREEN_LIQUIDITY && this.narrativeScreen <= SCREEN_BATTLE) {
    this.player.setVelocity(0);
    this.player.anims.stop();
    return;
  }

  // Handle different narrative screens
  switch (this.narrativeScreen) {
    case SCREEN_PROLOGUE:
    case SCREEN_PROMPT:
    case SCREEN_CAMPING_PROMPT:
      this.player.setVelocity(0);
      this.player.anims.stop();
      if (Phaser.Input.Keyboard.JustDown(this.keys.space)) {
        if (this.narrativeScreen === SCREEN_PROLOGUE) {
          this.narrativeScreen = SCREEN_PROMPT;
          showPrompt(this);
        } else if (this.narrativeScreen === SCREEN_PROMPT) {
          this.narrativeScreen = SCREEN_CHOICES;
          showChoices(this);
        } else if (this.narrativeScreen === SCREEN_CAMPING_PROMPT && Phaser.Input.Keyboard.JustDown(this.keys.space)) {
  if (hasCampingMaterials(this)) {
    console.log('Camping setup initiated');

    // Remove camping materials
    removeFromInventory(this, "Stick", 2);
    removeFromInventory(this, "Cloth", 1);
    updateHUD(this);

    // Record camp location at player's current position
    this.campX = this.player.x;
    this.campY = this.player.y;

    // Add tent at camp location
    this.tent = this.add.image(this.campX, this.campY, 'tent').setDepth(4999);

    // Create progress bar background
    this.progressBg = this.add.rectangle(this.campX, this.campY - 20, 100, 10, 0x808080).setDepth(5000);

    // Create progress bar fill
    this.progressFill = this.add.rectangle(this.campX - 50, this.campY - 20, 0, 10, 0x00ff00)
      .setOrigin(0, 0.5)
      .setDepth(5001);

    // Start 90-second timer for camp setup
    this.campTimer = this.time.addEvent({
      delay: 90000, // 90 seconds
      callback: () => {
        console.log('Camp setup complete');
        // Set progress fill to full
        this.progressFill.width = 100;

        // Add "Enter Camp" text and make it interactive
        this.enterCampText = this.add.text(this.campX, this.campY - 40, 'Enter Camp', {
          font: '16px Arial',
          fill: '#ffffff',
          stroke: '#000000',
          strokeThickness: 3
        }).setOrigin(0.5).setDepth(5002).setInteractive();

        this.enterCampText.on('pointerdown', () => {
          console.log('Enter Camp clicked');
          this.scene.start('CampingScene', {
            zone: this.scene.settings.data.zone || 'defaultZone',
            inventory: this.localInventory || [],
            promptCount: this.promptCount || 0,
            playerStats: this.playerStats,
            isFireLit: false,
            campX: this.campX,
            campY: this.campY
          });
        });
      },
      callbackScope: this,
      loop: false
    });

    // Update progress bar every 100ms based on timer progress
    this.time.addEvent({
      delay: 100,
      callback: () => {
        if (this.campTimer) {
          const progress = this.campTimer.getProgress();
          console.log('Progress:', progress);
          this.progressFill.width = 100 * progress;
        }
      },
      callbackScope: this,
      loop: true
    });

    // Hide dialog and allow player movement during setup
    hideDialog(this);
    this.narrativeScreen = SCREEN_NONE;
  } else {
    showDialog(this, "You need 2 sticks and 1 cloth to set up camp.\n(Press SPACE to continue)");
    this.input.keyboard.once("keydown-SPACE", () => {
      hideDialog(this);
      this.narrativeScreen = SCREEN_NONE;
    
    case SCREEN_CHOICES:
    case SCREEN_OUTCOME:
    case SCREEN_ITEM_MENU:
    case SCREEN_ITEM_PICK:
      this.player.setVelocity(0);
      this.player.anims.stop();
      if (this.narrativeScreen === SCREEN_OUTCOME && Phaser.Input.Keyboard.JustDown(this.keys.space)) {
        this.narrativeScreen = SCREEN_ITEM_MENU;
        showItemMenu(this);
      }
      return;
      
    default:
      break;
  }

  // Character movement and actions
  const speed = 100; // Increased base speed for better feel
  
  if (Phaser.Input.Keyboard.JustDown(this.keys.space)) {
    this.isAttacking = true;
    this.player.setVelocity(0);
    this.player.anims.play(`attack-${this.lastDirection}`, true);
    
    // Camera effect for attack
    this.cameras.main.shake(50, 0.005);
    
    this.applyAttackDamage(); // Call directly for immediate feedback
    
    // Check for crate interactions during attack
    if (this.lootCrates) {
      const crates = this.lootCrates.getChildren();
      const attackRange = 60; // Increased range for better hit detection
      
      for (let crate of crates) {
        const distance = Phaser.Math.Distance.Between(
          this.player.x, this.player.y, crate.x, crate.y
        );
        
        if (distance < attackRange) {
          console.log("Player in range of crate, hitting...");
          this.hitCrate(crate);
          break; // Hit only one crate per spacebar press
        }
      }
    }
  }

  if (!this.isAttacking) {
    this.player.setVelocity(0);
    
    // Movement with slight acceleration for better feel
    let currentSpeed = speed;
    if (this.playerStats.stamina < 30) {
      currentSpeed = speed * 0.7; // Slow down when low on stamina
    }
    
    if (this.keys.left.isDown) {
      this.player.setVelocityX(-currentSpeed);
      this.player.anims.play("walk-left", true);
      this.lastDirection = "left";
    } else if (this.keys.right.isDown) {
      this.player.setVelocityX(currentSpeed);
      this.player.anims.play("walk-right", true);
      this.lastDirection = "right";
    } else if (this.keys.up.isDown) {
      this.player.setVelocityY(-currentSpeed);
      this.player.anims.play("walk-up", true);
      this.lastDirection = "up";
    } else if (this.keys.down.isDown) {
      this.player.setVelocityY(currentSpeed);
      this.player.anims.play("walk-down", true);
      this.lastDirection = "down";
    } else {
      this.player.setVelocity(0);
      if (this.lastDirection === "down") {
        this.player.anims.play("idle-down", true);
      } else if (this.lastDirection === "up") {
        this.player.anims.play("idle-up", true);
      } else if (this.lastDirection === "left") {
        this.player.anims.play("idle-left", true);
      } else if (this.lastDirection === "right") {
        this.player.anims.play("idle-right", true);
      }
    }
  }

  // Interact with exclamation points
  if (Phaser.Input.Keyboard.JustDown(this.keys.interact)) {
    const ex = getOverlappingExclamation(this);
    if (ex) {
      console.log("Interacting with ex at:", ex.x, ex.y);
      
      // Simple visual effect when interacting
      createSimpleEffect(this, ex.x, ex.y, 0xffffff);
      
      ex.destroy();
      this.narrativeScreen = SCREEN_PROLOGUE;
      showPrologue(this);
    } else {
      console.log("Interact pressed, but no exclamation overlap.");
    }
  }
}

/* =======================================================
   11) PHASER SCENE CLASSES & CONFIG
======================================================= */
class MainGameScene extends Phaser.Scene {
  constructor() {
    super('MainGameScene');
  }

  preload() {
    preload.call(this);
  }

  create() {
    createScene.call(this);
  }

  update(time, delta) {
    updateScene.call(this, time, delta);
  }

  spawnMonster() {
    spawnMonster.call(this);
  }
}

class MenuScene extends Phaser.Scene {
  constructor() {
    super('MenuScene');
  }

  preload() {
    for (let i = 1; i <= 113; i++) {
      this.load.image(`frame_${i}`, `assets/menu/frame (${i}).png`);
    }
  }

  create() {
    let frames = [];
    for (let i = 1; i <= 113; i++) {
      frames.push({ key: `frame_${i}` });
    }

    this.anims.create({
      key: 'menuAnimation',
      frames: frames,
      frameRate: 24,
      repeat: -1
    });

    let gifSprite = this.add.sprite(
      this.game.config.width / 2,
      this.game.config.height / 2,
      'frame_1'
    );
    gifSprite.setOrigin(0.5);

    const texture = this.textures.get('frame_1');
    const frame = texture.getSourceImage();
    const imageWidth = frame.width;
    const imageHeight = frame.height;

    const scaleX = this.game.config.width / imageWidth;
    const scaleY = this.game.config.height / imageHeight;
    const scale = Math.min(scaleX, scaleY);

    gifSprite.setScale(scale);
    gifSprite.play('menuAnimation');

    // Enhanced title
    const titleText = this.add.text(
      this.game.config.width / 2,
      this.game.config.height * 0.3,
      'SCAVENGER QUEST',
      { 
        font: '48px Arial', 
        fill: '#ffffff',
        stroke: '#000000',
        strokeThickness: 6
      }
    ).setOrigin(0.5);
    
    // Add title glow effect
    this.tweens.add({
      targets: titleText,
      alpha: { from: 0.8, to: 1 },
      duration: 1500,
      yoyo: true,
      repeat: -1
    });

    // Enhanced start prompt
    const promptText = this.add.text(
      this.game.config.width / 2,
      this.game.config.height * 0.9,
      'Press Enter to Begin',
      { 
        font: '32px Arial', 
        fill: '#ffffff',
        stroke: '#000000',
        strokeThickness: 4 
      }
    ).setOrigin(0.5);
    
    // Add pulse animation
    this.tweens.add({
      targets: promptText,
      scale: { from: 1, to: 1.1 },
      duration: 800,
      yoyo: true,
      repeat: -1
    });

    // Start game on Enter
    this.input.keyboard.on('keydown-ENTER', () => {
      this.cameras.main.fadeOut(500);
      this.time.delayedCall(500, () => {
        const villageZone = zoneList.find(z => z.name === "Village");
        if (villageZone) {
          this.scene.start('MainGameScene', { zone: villageZone });
        } else {
          console.error("Village zone not found!");
        }
      });
    });
  }
}

const config = {
  type: Phaser.AUTO,
  width: 800,
  height: 600,
  physics: {
    default: "arcade",
    arcade: {
      gravity: { y: 0 },
      debug: false
    }
  },
  scale: {
    mode: Phaser.Scale.FIT,
    autoCenter: Phaser.Scale.CENTER_BOTH,
    parent: 'phaser-game',
    width: 800,
    height: 600,
    minWidth: 320,
    minHeight: 240,
    maxWidth: 800,
    maxHeight: 600
  },
  scene: [MenuScene, MainGameScene]
};

const game = new Phaser.Game(config);
</file>

</files>
